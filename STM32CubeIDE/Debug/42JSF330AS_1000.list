
42JSF330AS_1000.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000897c  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008b54  08008b54  00018b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d94  08008d94  0002068c  2**0
                  CONTENTS
  4 .ARM          00000008  08008d94  08008d94  00018d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d9c  08008d9c  0002068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d9c  08008d9c  00018d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008da0  08008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000068c  20000000  08008da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000488  2000068c  08009430  0002068c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b14  08009430  00020b14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002068c  2**0
                  CONTENTS, READONLY
 12 .debug_line   000443bb  00000000  00000000  000206bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0005c951  00000000  00000000  00064a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008b72  00000000  00000000  000c13c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e10  00000000  00000000  000c9f40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000fc5dc  00000000  00000000  000cbd50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004f18  00000000  00000000  001c8330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000296a6  00000000  00000000  001cd248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002befa  00000000  00000000  001f68ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  002227e8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005488  00000000  00000000  00222838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000068c 	.word	0x2000068c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008b3c 	.word	0x08008b3c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000690 	.word	0x20000690
 8000214:	08008b3c 	.word	0x08008b3c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800051c:	480d      	ldr	r0, [pc, #52]	; (8000554 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800051e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000520:	480d      	ldr	r0, [pc, #52]	; (8000558 <LoopForever+0x6>)
  ldr r1, =_edata
 8000522:	490e      	ldr	r1, [pc, #56]	; (800055c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000524:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <LoopForever+0xe>)
  movs r3, #0
 8000526:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000528:	e002      	b.n	8000530 <LoopCopyDataInit>

0800052a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800052a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800052c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800052e:	3304      	adds	r3, #4

08000530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000534:	d3f9      	bcc.n	800052a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000536:	4a0b      	ldr	r2, [pc, #44]	; (8000564 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000538:	4c0b      	ldr	r4, [pc, #44]	; (8000568 <LoopForever+0x16>)
  movs r3, #0
 800053a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800053c:	e001      	b.n	8000542 <LoopFillZerobss>

0800053e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800053e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000540:	3204      	adds	r2, #4

08000542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000544:	d3fb      	bcc.n	800053e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000546:	f003 f831 	bl	80035ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800054a:	f008 facb 	bl	8008ae4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054e:	f000 f88b 	bl	8000668 <main>

08000552 <LoopForever>:

LoopForever:
    b LoopForever
 8000552:	e7fe      	b.n	8000552 <LoopForever>
  ldr   r0, =_estack
 8000554:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800055c:	2000068c 	.word	0x2000068c
  ldr r2, =_sidata
 8000560:	08008da4 	.word	0x08008da4
  ldr r2, =_sbss
 8000564:	2000068c 	.word	0x2000068c
  ldr r4, =_ebss
 8000568:	20000b14 	.word	0x20000b14

0800056c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800056c:	e7fe      	b.n	800056c <BusFault_Handler>
	...

08000570 <DAC_Init>:
  *             Refer to device datasheet for channels availability.
  * @retval None
  */
__STATIC_INLINE void LL_DAC_Enable(DAC_TypeDef *DACx, uint32_t DAC_Channel)
{
  SET_BIT(DACx->CR,
 8000570:	4a02      	ldr	r2, [pc, #8]	; (800057c <DAC_Init+0xc>)
 8000572:	6813      	ldr	r3, [r2, #0]
 8000574:	f043 0301 	orr.w	r3, r3, #1
 8000578:	6013      	str	r3, [r2, #0]
  */
__weak void DAC_Init(UI_Handle_t *pHandle)
{
  /* Enable DAC Channel1 */
  LL_DAC_Enable(DAC1, LL_DAC_CHANNEL_1);
}
 800057a:	4770      	bx	lr
 800057c:	50000800 	.word	0x50000800

08000580 <DAC_Exec>:
  *         variables will be provided in the related output channels. This is
  *         the implementation of the virtual function.
  * @param  pHandle pointer on related component instance.
  */
__weak void DAC_Exec(UI_Handle_t *pHandle)
{
 8000580:	b508      	push	{r3, lr}
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  MC_Protocol_REG_t bCh_var;

  bCh_var = pDacHandle->bChannel_variable[DAC_CH0];
  LL_DAC_ConvertData12LeftAligned(DAC1, LL_DAC_CHANNEL_1,
                                  DACOFF + ((int16_t)UI_GetReg(pHandle,bCh_var,MC_NULL)));
 8000582:	2200      	movs	r2, #0
 8000584:	f890 1030 	ldrb.w	r1, [r0, #48]	; 0x30
 8000588:	f002 fdb0 	bl	80030ec <UI_GetReg>
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800058c:	4908      	ldr	r1, [pc, #32]	; (80005b0 <DAC_Exec+0x30>)
  SET_BIT(DACx->SWTRIGR,
 800058e:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <DAC_Exec+0x34>)
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8000590:	684b      	ldr	r3, [r1, #4]
 8000592:	b200      	sxth	r0, r0
 8000594:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000598:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800059c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
 80005a0:	4318      	orrs	r0, r3
 80005a2:	6048      	str	r0, [r1, #4]
  SET_BIT(DACx->SWTRIGR,
 80005a4:	6853      	ldr	r3, [r2, #4]
 80005a6:	f043 0301 	orr.w	r3, r3, #1
 80005aa:	6053      	str	r3, [r2, #4]
  LL_DAC_TrigSWConversion(DAC1, LL_DAC_CHANNEL_1);
}
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop
 80005b0:	50000808 	.word	0x50000808
 80005b4:	50000800 	.word	0x50000800

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ba:	2400      	movs	r4, #0
{
 80005bc:	b0a6      	sub	sp, #152	; 0x98
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	2238      	movs	r2, #56	; 0x38
 80005c0:	4621      	mov	r1, r4
 80005c2:	a806      	add	r0, sp, #24
 80005c4:	f008 fab2 	bl	8008b2c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005c8:	2244      	movs	r2, #68	; 0x44
 80005ca:	4621      	mov	r1, r4
 80005cc:	a815      	add	r0, sp, #84	; 0x54
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ce:	e9cd 4400 	strd	r4, r4, [sp]
 80005d2:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80005d6:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005d8:	f008 faa8 	bl	8008b2c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005dc:	4620      	mov	r0, r4
 80005de:	f004 f9a9 	bl	8004934 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e2:	2201      	movs	r2, #1
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ec:	2302      	movs	r3, #2
 80005ee:	2203      	movs	r2, #3
 80005f0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005f4:	2106      	movs	r1, #6
 80005f6:	2255      	movs	r2, #85	; 0x55
 80005f8:	e9cd 120f 	strd	r1, r2, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80005fe:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000600:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000604:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000606:	f004 fa1b 	bl	8004a40 <HAL_RCC_OscConfig>
 800060a:	b108      	cbz	r0, 8000610 <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800060e:	e7fe      	b.n	800060e <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000658 <SystemClock_Config+0xa0>
 8000614:	ed8d 7b00 	vstr	d7, [sp]
 8000618:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8000660 <SystemClock_Config+0xa8>
 800061c:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800061e:	2104      	movs	r1, #4
 8000620:	4668      	mov	r0, sp
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000622:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	ed8d 7b02 	vstr	d7, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000628:	f004 fc8e 	bl	8004f48 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	b108      	cbz	r0, 8000634 <SystemClock_Config+0x7c>
 8000630:	b672      	cpsid	i
  while (1)
 8000632:	e7fe      	b.n	8000632 <SystemClock_Config+0x7a>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 8000634:	f248 0102 	movw	r1, #32770	; 0x8002
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800063c:	a815      	add	r0, sp, #84	; 0x54
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12;
 800063e:	9115      	str	r1, [sp, #84]	; 0x54
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000640:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000642:	9224      	str	r2, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000644:	f004 fdc4 	bl	80051d0 <HAL_RCCEx_PeriphCLKConfig>
 8000648:	b108      	cbz	r0, 800064e <SystemClock_Config+0x96>
 800064a:	b672      	cpsid	i
  while (1)
 800064c:	e7fe      	b.n	800064c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 800064e:	f004 fdb7 	bl	80051c0 <HAL_RCC_EnableCSS>
}
 8000652:	b026      	add	sp, #152	; 0x98
 8000654:	bd10      	pop	{r4, pc}
 8000656:	bf00      	nop
 8000658:	0000000f 	.word	0x0000000f
 800065c:	00000003 	.word	0x00000003
	...

08000668 <main>:
{
 8000668:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066c:	2400      	movs	r4, #0
{
 800066e:	b0ad      	sub	sp, #180	; 0xb4
  HAL_Init();
 8000670:	f002 ffcc 	bl	800360c <HAL_Init>
  SystemClock_Config();
 8000674:	f7ff ffa0 	bl	80005b8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	e9cd 441c 	strd	r4, r4, [sp, #112]	; 0x70
 800067c:	e9cd 441e 	strd	r4, r4, [sp, #120]	; 0x78
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000680:	4bab      	ldr	r3, [pc, #684]	; (8000930 <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	9420      	str	r4, [sp, #128]	; 0x80
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  hadc1.Instance = ADC1;
 8000686:	4dab      	ldr	r5, [pc, #684]	; (8000934 <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000688:	f042 0204 	orr.w	r2, r2, #4
 800068c:	64da      	str	r2, [r3, #76]	; 0x4c
 800068e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000690:	f002 0204 	and.w	r2, r2, #4
 8000694:	9202      	str	r2, [sp, #8]
 8000696:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800069a:	2120      	movs	r1, #32
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800069c:	430a      	orrs	r2, r1
 800069e:	64da      	str	r2, [r3, #76]	; 0x4c
 80006a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a2:	400a      	ands	r2, r1
 80006a4:	9203      	str	r2, [sp, #12]
 80006a6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006aa:	f042 0201 	orr.w	r2, r2, #1
 80006ae:	64da      	str	r2, [r3, #76]	; 0x4c
 80006b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b2:	f002 0201 	and.w	r2, r2, #1
 80006b6:	9204      	str	r2, [sp, #16]
 80006b8:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006bc:	f042 0202 	orr.w	r2, r2, #2
 80006c0:	64da      	str	r2, [r3, #76]	; 0x4c
 80006c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c8:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d0:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d2:	f004 f929 	bl	8004928 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 80006d6:	4622      	mov	r2, r4
 80006d8:	4897      	ldr	r0, [pc, #604]	; (8000938 <main+0x2d0>)
 80006da:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80006de:	f004 f923 	bl	8004928 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ea:	4893      	ldr	r0, [pc, #588]	; (8000938 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006ee:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80006f0:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80006f4:	f004 f820 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 80006f8:	2220      	movs	r2, #32
 80006fa:	2301      	movs	r3, #1
 80006fc:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000700:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = LD2_Pin;
 8000702:	2200      	movs	r2, #0
 8000704:	2300      	movs	r3, #0
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = LD2_Pin;
 800070a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800070e:	f004 f813 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000716:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800071a:	4888      	ldr	r0, [pc, #544]	; (800093c <main+0x2d4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	941e      	str	r4, [sp, #120]	; 0x78
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 800071e:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_ENCODER_Z_Pin;
 8000720:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(M1_ENCODER_Z_GPIO_Port, &GPIO_InitStruct);
 8000724:	f004 f808 	bl	8004738 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000728:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 800072c:	2301      	movs	r3, #1
 800072e:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000732:	4881      	ldr	r0, [pc, #516]	; (8000938 <main+0x2d0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000734:	2302      	movs	r3, #2
 8000736:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000738:	a91c      	add	r1, sp, #112	; 0x70
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800073a:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800073e:	f003 fffb 	bl	8004738 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000742:	4621      	mov	r1, r4
 8000744:	223c      	movs	r2, #60	; 0x3c
 8000746:	a81c      	add	r0, sp, #112	; 0x70
  ADC_MultiModeTypeDef multimode = {0};
 8000748:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 800074c:	9416      	str	r4, [sp, #88]	; 0x58
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800074e:	f44f 2800 	mov.w	r8, #524288	; 0x80000
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000752:	f008 f9eb 	bl	8008b2c <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000756:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800075a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800075e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.GainCompensation = 0;
 8000760:	612c      	str	r4, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000762:	83ac      	strh	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000764:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000768:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076c:	63ec      	str	r4, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800076e:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000772:	2604      	movs	r6, #4
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000774:	2401      	movs	r4, #1
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000776:	4628      	mov	r0, r5
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000778:	e9c5 3800 	strd	r3, r8, [r5]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800077c:	616c      	str	r4, [r5, #20]
  hadc1.Init.NbrOfConversion = 1;
 800077e:	622c      	str	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000780:	60ef      	str	r7, [r5, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000782:	61ae      	str	r6, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000784:	f002 ff76 	bl	8003674 <HAL_ADC_Init>
 8000788:	b108      	cbz	r0, 800078e <main+0x126>
 800078a:	b672      	cpsid	i
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x124>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800078e:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000790:	a914      	add	r1, sp, #80	; 0x50
 8000792:	4628      	mov	r0, r5
 8000794:	f003 fdd8 	bl	8004348 <HAL_ADCEx_MultiModeConfigChannel>
 8000798:	b108      	cbz	r0, 800079e <main+0x136>
 800079a:	b672      	cpsid	i
  while (1)
 800079c:	e7fe      	b.n	800079c <main+0x134>
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800079e:	ed9f 8b60 	vldr	d8, [pc, #384]	; 8000920 <main+0x2b8>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007a2:	4b67      	ldr	r3, [pc, #412]	; (8000940 <main+0x2d8>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80007a4:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.InjectedOffset = 0;
 80007a8:	e9cd 6020 	strd	r6, r0, [sp, #128]	; 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 80007ac:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80007b0:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007b4:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007b8:	f04f 0a7f 	mov.w	sl, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007bc:	f04f 0902 	mov.w	r9, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007c0:	a91c      	add	r1, sp, #112	; 0x70
 80007c2:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80007c4:	e9cd 3b1c 	strd	r3, fp, [sp, #112]	; 0x70
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 80007c8:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80007cc:	941e      	str	r4, [sp, #120]	; 0x78
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80007ce:	f8cd a07c 	str.w	sl, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 80007d2:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007d6:	f003 fabd 	bl	8003d54 <HAL_ADCEx_InjectedConfigChannel>
 80007da:	b108      	cbz	r0, 80007e0 <main+0x178>
 80007dc:	b672      	cpsid	i
  while (1)
 80007de:	e7fe      	b.n	80007de <main+0x176>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80007e0:	a351      	add	r3, pc, #324	; (adr r3, 8000928 <main+0x2c0>)
 80007e2:	e9d3 2300 	ldrd	r2, r3, [r3]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007e6:	a91c      	add	r1, sp, #112	; 0x70
 80007e8:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 80007ea:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80007ee:	f003 fab1 	bl	8003d54 <HAL_ADCEx_InjectedConfigChannel>
 80007f2:	4601      	mov	r1, r0
 80007f4:	b108      	cbz	r0, 80007fa <main+0x192>
 80007f6:	b672      	cpsid	i
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <main+0x190>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80007fa:	223c      	movs	r2, #60	; 0x3c
 80007fc:	9001      	str	r0, [sp, #4]
 80007fe:	a81c      	add	r0, sp, #112	; 0x70
  hadc2.Instance = ADC2;
 8000800:	4d50      	ldr	r5, [pc, #320]	; (8000944 <main+0x2dc>)
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000802:	f008 f993 	bl	8008b2c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000806:	9901      	ldr	r1, [sp, #4]
 8000808:	2220      	movs	r2, #32
 800080a:	a814      	add	r0, sp, #80	; 0x50
 800080c:	f008 f98e 	bl	8008b2c <memset>
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000810:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 8000812:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <main+0x2e0>)
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000814:	83a9      	strh	r1, [r5, #28]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000816:	4628      	mov	r0, r5
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000818:	e9c5 1404 	strd	r1, r4, [r5, #16]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800081c:	e9c5 110b 	strd	r1, r1, [r5, #44]	; 0x2c
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8000820:	f8c5 8004 	str.w	r8, [r5, #4]
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000824:	60ef      	str	r7, [r5, #12]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000826:	60a9      	str	r1, [r5, #8]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000828:	61ae      	str	r6, [r5, #24]
  hadc2.Init.NbrOfConversion = 2;
 800082a:	f8c5 9020 	str.w	r9, [r5, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800082e:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000832:	f885 1038 	strb.w	r1, [r5, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000836:	63e9      	str	r1, [r5, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000838:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
  hadc2.Instance = ADC2;
 800083c:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800083e:	f002 ff19 	bl	8003674 <HAL_ADC_Init>
 8000842:	b108      	cbz	r0, 8000848 <main+0x1e0>
 8000844:	b672      	cpsid	i
  while (1)
 8000846:	e7fe      	b.n	8000846 <main+0x1de>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000848:	4b40      	ldr	r3, [pc, #256]	; (800094c <main+0x2e4>)
  sConfigInjected.InjectedOffset = 0;
 800084a:	9021      	str	r0, [sp, #132]	; 0x84
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800084c:	f8ad 0094 	strh.w	r0, [sp, #148]	; 0x94
  sConfigInjected.QueueInjectedContext = DISABLE;
 8000850:	f88d 0096 	strb.w	r0, [sp, #150]	; 0x96
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8000854:	f88d 00a0 	strb.w	r0, [sp, #160]	; 0xa0
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000858:	a91c      	add	r1, sp, #112	; 0x70
 800085a:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 800085c:	ed8d 8b26 	vstr	d8, [sp, #152]	; 0x98
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8000860:	e9cd b41d 	strd	fp, r4, [sp, #116]	; 0x74
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000864:	e9cd a61f 	strd	sl, r6, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8000868:	f8cd 9090 	str.w	r9, [sp, #144]	; 0x90
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 800086c:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800086e:	f003 fa71 	bl	8003d54 <HAL_ADCEx_InjectedConfigChannel>
 8000872:	b108      	cbz	r0, 8000878 <main+0x210>
 8000874:	b672      	cpsid	i
  while (1)
 8000876:	e7fe      	b.n	8000876 <main+0x20e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000878:	4a35      	ldr	r2, [pc, #212]	; (8000950 <main+0x2e8>)
 800087a:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800087e:	a91c      	add	r1, sp, #112	; 0x70
 8000880:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000882:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8000886:	f003 fa65 	bl	8003d54 <HAL_ADCEx_InjectedConfigChannel>
 800088a:	b108      	cbz	r0, 8000890 <main+0x228>
 800088c:	b672      	cpsid	i
  while (1)
 800088e:	e7fe      	b.n	800088e <main+0x226>
  sConfig.Channel = ADC_CHANNEL_2;
 8000890:	4a30      	ldr	r2, [pc, #192]	; (8000954 <main+0x2ec>)
 8000892:	2306      	movs	r3, #6
 8000894:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000898:	2204      	movs	r2, #4
 800089a:	237f      	movs	r3, #127	; 0x7f
 800089c:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a0:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_2;
 80008a2:	2204      	movs	r2, #4
 80008a4:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008a6:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 80008a8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ac:	f002 ffe6 	bl	800387c <HAL_ADC_ConfigChannel>
 80008b0:	b108      	cbz	r0, 80008b6 <main+0x24e>
 80008b2:	b672      	cpsid	i
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <main+0x24c>
  sConfig.Channel = ADC_CHANNEL_8;
 80008b6:	4a28      	ldr	r2, [pc, #160]	; (8000958 <main+0x2f0>)
 80008b8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008ba:	4628      	mov	r0, r5
 80008bc:	a914      	add	r1, sp, #80	; 0x50
  sConfig.Channel = ADC_CHANNEL_8;
 80008be:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80008c2:	f002 ffdb 	bl	800387c <HAL_ADC_ConfigChannel>
 80008c6:	b108      	cbz	r0, 80008cc <main+0x264>
 80008c8:	b672      	cpsid	i
  while (1)
 80008ca:	e7fe      	b.n	80008ca <main+0x262>
  hcordic.Instance = CORDIC;
 80008cc:	4823      	ldr	r0, [pc, #140]	; (800095c <main+0x2f4>)
 80008ce:	4b24      	ldr	r3, [pc, #144]	; (8000960 <main+0x2f8>)
 80008d0:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80008d2:	f003 fd9f 	bl	8004414 <HAL_CORDIC_Init>
 80008d6:	b108      	cbz	r0, 80008dc <main+0x274>
 80008d8:	b672      	cpsid	i
  while (1)
 80008da:	e7fe      	b.n	80008da <main+0x272>
  hdac1.Instance = DAC1;
 80008dc:	4c21      	ldr	r4, [pc, #132]	; (8000964 <main+0x2fc>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	2100      	movs	r1, #0
 80008e2:	a81c      	add	r0, sp, #112	; 0x70
 80008e4:	f008 f922 	bl	8008b2c <memset>
  hdac1.Instance = DAC1;
 80008e8:	4b1f      	ldr	r3, [pc, #124]	; (8000968 <main+0x300>)
 80008ea:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80008ec:	4620      	mov	r0, r4
 80008ee:	f003 fe29 	bl	8004544 <HAL_DAC_Init>
 80008f2:	4602      	mov	r2, r0
 80008f4:	b108      	cbz	r0, 80008fa <main+0x292>
 80008f6:	b672      	cpsid	i
  while (1)
 80008f8:	e7fe      	b.n	80008f8 <main+0x290>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80008fa:	2602      	movs	r6, #2
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008fc:	4620      	mov	r0, r4
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80008fe:	2701      	movs	r7, #1
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000900:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.DAC_Trigger = DAC_TRIGGER_SOFTWARE;
 8000902:	e9cd 261e 	strd	r2, r6, [sp, #120]	; 0x78
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000906:	e9cd 2620 	strd	r2, r6, [sp, #128]	; 0x80
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800090a:	961c      	str	r6, [sp, #112]	; 0x70
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800090c:	f8ad 2074 	strh.w	r2, [sp, #116]	; 0x74
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000910:	9223      	str	r2, [sp, #140]	; 0x8c
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000912:	9722      	str	r7, [sp, #136]	; 0x88
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000914:	f003 fe2c 	bl	8004570 <HAL_DAC_ConfigChannel>
 8000918:	4604      	mov	r4, r0
 800091a:	b338      	cbz	r0, 800096c <main+0x304>
 800091c:	b672      	cpsid	i
  while (1)
 800091e:	e7fe      	b.n	800091e <main+0x2b6>
 8000920:	00000080 	.word	0x00000080
 8000924:	00000080 	.word	0x00000080
 8000928:	1d500080 	.word	0x1d500080
 800092c:	0000010f 	.word	0x0000010f
 8000930:	40021000 	.word	0x40021000
 8000934:	200006a8 	.word	0x200006a8
 8000938:	48000800 	.word	0x48000800
 800093c:	48000400 	.word	0x48000400
 8000940:	04300002 	.word	0x04300002
 8000944:	20000714 	.word	0x20000714
 8000948:	50000100 	.word	0x50000100
 800094c:	1d500080 	.word	0x1d500080
 8000950:	19200040 	.word	0x19200040
 8000954:	08600004 	.word	0x08600004
 8000958:	21800100 	.word	0x21800100
 800095c:	20000780 	.word	0x20000780
 8000960:	40020c00 	.word	0x40020c00
 8000964:	200007a8 	.word	0x200007a8
 8000968:	50000800 	.word	0x50000800
  htim1.Instance = TIM1;
 800096c:	4daa      	ldr	r5, [pc, #680]	; (8000c18 <main+0x5b0>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800096e:	900e      	str	r0, [sp, #56]	; 0x38
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000970:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
 8000974:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
 8000978:	e9cd 0018 	strd	r0, r0, [sp, #96]	; 0x60
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800097c:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8000980:	e9cd 0011 	strd	r0, r0, [sp, #68]	; 0x44
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000984:	e9cd 0007 	strd	r0, r0, [sp, #28]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8000988:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098c:	9006      	str	r0, [sp, #24]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 800098e:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000990:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000992:	4601      	mov	r1, r0
 8000994:	2234      	movs	r2, #52	; 0x34
 8000996:	a81c      	add	r0, sp, #112	; 0x70
 8000998:	f008 f8c8 	bl	8008b2c <memset>
  htim1.Instance = TIM1;
 800099c:	4b9f      	ldr	r3, [pc, #636]	; (8000c1c <main+0x5b4>)
 800099e:	602b      	str	r3, [r5, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80009a0:	f04f 0c20 	mov.w	ip, #32
 80009a4:	f640 3311 	movw	r3, #2833	; 0xb11
 80009a8:	e9c5 c302 	strd	ip, r3, [r5, #8]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ac:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009ae:	f44f 7380 	mov.w	r3, #256	; 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80009b2:	e9c5 7405 	strd	r7, r4, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80009b6:	606c      	str	r4, [r5, #4]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80009b8:	612b      	str	r3, [r5, #16]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ba:	f004 fe11 	bl	80055e0 <HAL_TIM_Base_Init>
 80009be:	b108      	cbz	r0, 80009c4 <main+0x35c>
 80009c0:	b672      	cpsid	i
  while (1)
 80009c2:	e7fe      	b.n	80009c2 <main+0x35a>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009c4:	4628      	mov	r0, r5
 80009c6:	f004 fe95 	bl	80056f4 <HAL_TIM_PWM_Init>
 80009ca:	b108      	cbz	r0, 80009d0 <main+0x368>
 80009cc:	b672      	cpsid	i
  while (1)
 80009ce:	e7fe      	b.n	80009ce <main+0x366>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009d0:	2206      	movs	r2, #6
 80009d2:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009d4:	a90e      	add	r1, sp, #56	; 0x38
 80009d6:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80009d8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80009dc:	f004 ffb0 	bl	8005940 <HAL_TIM_SlaveConfigSynchro>
 80009e0:	b108      	cbz	r0, 80009e6 <main+0x37e>
 80009e2:	b672      	cpsid	i
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <main+0x37c>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e6:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009e8:	2270      	movs	r2, #112	; 0x70
 80009ea:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ec:	a906      	add	r1, sp, #24
 80009ee:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80009f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	f005 f988 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x396>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x394>
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 80009fe:	970c      	str	r7, [sp, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a00:	aa0a      	add	r2, sp, #40	; 0x28
 8000a02:	4631      	mov	r1, r6
 8000a04:	4628      	mov	r0, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8000a06:	2601      	movs	r6, #1
 8000a08:	2701      	movs	r7, #1
 8000a0a:	e9cd 670a 	strd	r6, r7, [sp, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8000a0e:	f005 fa13 	bl	8005e38 <HAL_TIMEx_ConfigBreakInput>
 8000a12:	4602      	mov	r2, r0
 8000a14:	b108      	cbz	r0, 8000a1a <main+0x3b2>
 8000a16:	b672      	cpsid	i
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <main+0x3b0>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1a:	2100      	movs	r1, #0
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a1c:	901a      	str	r0, [sp, #104]	; 0x68
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a1e:	2060      	movs	r0, #96	; 0x60
 8000a20:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
 8000a24:	2000      	movs	r0, #0
 8000a26:	2100      	movs	r1, #0
 8000a28:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
 8000a2c:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a30:	a914      	add	r1, sp, #80	; 0x50
 8000a32:	4628      	mov	r0, r5
 8000a34:	f005 f86a 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 8000a38:	b108      	cbz	r0, 8000a3e <main+0x3d6>
 8000a3a:	b672      	cpsid	i
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x3d4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3e:	2204      	movs	r2, #4
 8000a40:	a914      	add	r1, sp, #80	; 0x50
 8000a42:	4628      	mov	r0, r5
 8000a44:	f005 f862 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 8000a48:	b108      	cbz	r0, 8000a4e <main+0x3e6>
 8000a4a:	b672      	cpsid	i
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <main+0x3e4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4e:	2208      	movs	r2, #8
 8000a50:	a914      	add	r1, sp, #80	; 0x50
 8000a52:	4628      	mov	r0, r5
 8000a54:	f005 f85a 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 8000a58:	b108      	cbz	r0, 8000a5e <main+0x3f6>
 8000a5a:	b672      	cpsid	i
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <main+0x3f4>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a5e:	2370      	movs	r3, #112	; 0x70
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a60:	486d      	ldr	r0, [pc, #436]	; (8000c18 <main+0x5b0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000a62:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a64:	220c      	movs	r2, #12
 8000a66:	a914      	add	r1, sp, #80	; 0x50
 8000a68:	f005 f850 	bl	8005b0c <HAL_TIM_PWM_ConfigChannel>
 8000a6c:	b108      	cbz	r0, 8000a72 <main+0x40a>
 8000a6e:	b672      	cpsid	i
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <main+0x408>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000a72:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a7a:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
 8000a7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a82:	2300      	movs	r3, #0
 8000a84:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8000a90:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
 8000a94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a98:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a9c:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000aa0:	9028      	str	r0, [sp, #160]	; 0xa0
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aa6:	485c      	ldr	r0, [pc, #368]	; (8000c18 <main+0x5b0>)
 8000aa8:	a91c      	add	r1, sp, #112	; 0x70
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000aaa:	e9cd 2326 	strd	r2, r3, [sp, #152]	; 0x98
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000aae:	f005 f975 	bl	8005d9c <HAL_TIMEx_ConfigBreakDeadTime>
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	b108      	cbz	r0, 8000aba <main+0x452>
 8000ab6:	b672      	cpsid	i
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <main+0x450>
  htim2.Instance = TIM2;
 8000aba:	4d59      	ldr	r5, [pc, #356]	; (8000c20 <main+0x5b8>)
  HAL_TIM_MspPostInit(&htim1);
 8000abc:	4856      	ldr	r0, [pc, #344]	; (8000c18 <main+0x5b0>)
 8000abe:	f001 ff37 	bl	8002930 <HAL_TIM_MspPostInit>
  htim2.Instance = TIM2;
 8000ac2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ac6:	602b      	str	r3, [r5, #0]
  htim2.Init.Period = M1_PULSE_NBR;
 8000ac8:	f640 739f 	movw	r3, #3999	; 0xf9f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000acc:	2701      	movs	r7, #1
  htim2.Init.Period = M1_PULSE_NBR;
 8000ace:	60eb      	str	r3, [r5, #12]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000ad0:	220c      	movs	r2, #12
 8000ad2:	2302      	movs	r3, #2
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000ad4:	a91c      	add	r1, sp, #112	; 0x70
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000ad6:	2603      	movs	r6, #3
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000ad8:	f04f 080c 	mov.w	r8, #12
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000adc:	4628      	mov	r0, r5
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8000ade:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ae2:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae6:	e9c5 4401 	strd	r4, r4, [r5, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000aea:	941d      	str	r4, [sp, #116]	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aec:	9416      	str	r4, [sp, #88]	; 0x58
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	61ac      	str	r4, [r5, #24]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8000af2:	941f      	str	r4, [sp, #124]	; 0x7c
 8000af4:	9423      	str	r4, [sp, #140]	; 0x8c
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000af6:	961c      	str	r6, [sp, #112]	; 0x70
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000af8:	971e      	str	r7, [sp, #120]	; 0x78
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000afa:	9722      	str	r7, [sp, #136]	; 0x88
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8000afc:	f8cd 8090 	str.w	r8, [sp, #144]	; 0x90
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b00:	f004 fe80 	bl	8005804 <HAL_TIM_Encoder_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	b108      	cbz	r0, 8000b0c <main+0x4a4>
 8000b08:	b672      	cpsid	i
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <main+0x4a2>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0c:	a914      	add	r1, sp, #80	; 0x50
 8000b0e:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b10:	9314      	str	r3, [sp, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b12:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b14:	f005 f8f8 	bl	8005d08 <HAL_TIMEx_MasterConfigSynchronization>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b108      	cbz	r0, 8000b20 <main+0x4b8>
 8000b1c:	b672      	cpsid	i
  while (1)
 8000b1e:	e7fe      	b.n	8000b1e <main+0x4b6>
  huart2.Instance = USART2;
 8000b20:	4c40      	ldr	r4, [pc, #256]	; (8000c24 <main+0x5bc>)
  huart2.Init.BaudRate = 115200;
 8000b22:	4a41      	ldr	r2, [pc, #260]	; (8000c28 <main+0x5c0>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b24:	6123      	str	r3, [r4, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b26:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b2a:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b2e:	e9c4 3308 	strd	r3, r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b32:	62a3      	str	r3, [r4, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b34:	4620      	mov	r0, r4
  huart2.Init.BaudRate = 115200;
 8000b36:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b3a:	e9c4 2300 	strd	r2, r3, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b3e:	f8c4 8014 	str.w	r8, [r4, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b42:	f005 fc15 	bl	8006370 <HAL_UART_Init>
 8000b46:	4601      	mov	r1, r0
 8000b48:	b108      	cbz	r0, 8000b4e <main+0x4e6>
 8000b4a:	b672      	cpsid	i
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <main+0x4e4>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b4e:	4620      	mov	r0, r4
 8000b50:	f005 fc98 	bl	8006484 <HAL_UARTEx_SetTxFifoThreshold>
 8000b54:	4601      	mov	r1, r0
 8000b56:	b108      	cbz	r0, 8000b5c <main+0x4f4>
 8000b58:	b672      	cpsid	i
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <main+0x4f2>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f005 fcd3 	bl	8006508 <HAL_UARTEx_SetRxFifoThreshold>
 8000b62:	b108      	cbz	r0, 8000b68 <main+0x500>
 8000b64:	b672      	cpsid	i
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <main+0x4fe>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b68:	4620      	mov	r0, r4
 8000b6a:	f005 fc6d 	bl	8006448 <HAL_UARTEx_DisableFifoMode>
 8000b6e:	4604      	mov	r4, r0
 8000b70:	b108      	cbz	r0, 8000b76 <main+0x50e>
 8000b72:	b672      	cpsid	i
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <main+0x50c>
  MX_MotorControl_Init();
 8000b76:	f001 fad7 	bl	8002128 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000b7a:	463a      	mov	r2, r7
 8000b7c:	2104      	movs	r1, #4
 8000b7e:	2018      	movs	r0, #24
 8000b80:	f003 fc74 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000b84:	2018      	movs	r0, #24
 8000b86:	f003 fcaf 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000b8a:	4622      	mov	r2, r4
 8000b8c:	4621      	mov	r1, r4
 8000b8e:	2019      	movs	r0, #25
 8000b90:	f003 fc6c 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b94:	2019      	movs	r0, #25
 8000b96:	f003 fca7 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8000b9a:	4622      	mov	r2, r4
 8000b9c:	2102      	movs	r1, #2
 8000b9e:	2012      	movs	r0, #18
 8000ba0:	f003 fc64 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000ba4:	2012      	movs	r0, #18
 8000ba6:	f003 fc9f 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8000baa:	4622      	mov	r2, r4
 8000bac:	4631      	mov	r1, r6
 8000bae:	201c      	movs	r0, #28
 8000bb0:	f003 fc5c 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bb4:	201c      	movs	r0, #28
 8000bb6:	f003 fc97 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000bba:	463a      	mov	r2, r7
 8000bbc:	4631      	mov	r1, r6
 8000bbe:	2026      	movs	r0, #38	; 0x26
 8000bc0:	f003 fc54 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bc4:	2026      	movs	r0, #38	; 0x26
 8000bc6:	f003 fc8f 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8000bca:	4622      	mov	r2, r4
 8000bcc:	4631      	mov	r1, r6
 8000bce:	2028      	movs	r0, #40	; 0x28
 8000bd0:	f003 fc4c 	bl	800446c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bd4:	2028      	movs	r0, #40	; 0x28
 8000bd6:	f003 fc87 	bl	80044e8 <HAL_NVIC_EnableIRQ>
  MC_StartMotor1();
 8000bda:	f000 f82d 	bl	8000c38 <MC_StartMotor1>
  while(MC_GetAlignmentStatusMotor1()!=TC_ALIGNMENT_COMPLETED){}
 8000bde:	f000 f843 	bl	8000c68 <MC_GetAlignmentStatusMotor1>
 8000be2:	2802      	cmp	r0, #2
 8000be4:	d1fb      	bne.n	8000bde <main+0x576>
	MC_ProgramPositionCommandMotor1(3.14/2,0.1);
 8000be6:	eddf 8a11 	vldr	s17, [pc, #68]	; 8000c2c <main+0x5c4>
 8000bea:	ed9f 8a11 	vldr	s16, [pc, #68]	; 8000c30 <main+0x5c8>
 8000bee:	eeb0 0a48 	vmov.f32	s0, s16
 8000bf2:	eef0 0a68 	vmov.f32	s1, s17
 8000bf6:	f000 f82b 	bl	8000c50 <MC_ProgramPositionCommandMotor1>
	HAL_Delay(2000);
 8000bfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000bfe:	f002 fd27 	bl	8003650 <HAL_Delay>
	MC_ProgramPositionCommandMotor1(-3.14/2,0.1);
 8000c02:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8000c34 <main+0x5cc>
 8000c06:	eef0 0a68 	vmov.f32	s1, s17
 8000c0a:	f000 f821 	bl	8000c50 <MC_ProgramPositionCommandMotor1>
	HAL_Delay(2000);
 8000c0e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c12:	f002 fd1d 	bl	8003650 <HAL_Delay>
  while (1)
 8000c16:	e7ea      	b.n	8000bee <main+0x586>
 8000c18:	200007bc 	.word	0x200007bc
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	20000808 	.word	0x20000808
 8000c24:	20000854 	.word	0x20000854
 8000c28:	40004400 	.word	0x40004400
 8000c2c:	3dcccccd 	.word	0x3dcccccd
 8000c30:	3fc8f5c3 	.word	0x3fc8f5c3
 8000c34:	bfc8f5c3 	.word	0xbfc8f5c3

08000c38 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8000c38:	4b01      	ldr	r3, [pc, #4]	; (8000c40 <MC_StartMotor1+0x8>)
 8000c3a:	6818      	ldr	r0, [r3, #0]
 8000c3c:	f000 b87e 	b.w	8000d3c <MCI_StartMotor>
 8000c40:	200009dc 	.word	0x200009dc

08000c44 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8000c44:	4b01      	ldr	r3, [pc, #4]	; (8000c4c <MC_StopMotor1+0x8>)
 8000c46:	6818      	ldr	r0, [r3, #0]
 8000c48:	f000 b882 	b.w	8000d50 <MCI_StopMotor>
 8000c4c:	200009dc 	.word	0x200009dc

08000c50 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1( float fTargetPosition, float fDuration )
{
	MCI_ExecPositionCommand( pMCI[M1], fTargetPosition, fDuration );
 8000c50:	4b01      	ldr	r3, [pc, #4]	; (8000c58 <MC_ProgramPositionCommandMotor1+0x8>)
 8000c52:	6818      	ldr	r0, [r3, #0]
 8000c54:	f000 b838 	b.w	8000cc8 <MCI_ExecPositionCommand>
 8000c58:	200009dc 	.word	0x200009dc

08000c5c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8000c5c:	4b01      	ldr	r3, [pc, #4]	; (8000c64 <MC_GetSTMStateMotor1+0x8>)
 8000c5e:	6818      	ldr	r0, [r3, #0]
 8000c60:	f000 b8be 	b.w	8000de0 <MCI_GetSTMState>
 8000c64:	200009dc 	.word	0x200009dc

08000c68 <MC_GetAlignmentStatusMotor1>:
/**
 * @brief returns the alignment state of Motor 1.
 *   */
__weak AlignStatus_t  MC_GetAlignmentStatusMotor1( void )
{
	return MCI_GetAlignmentStatus( pMCI[M1] );
 8000c68:	4b01      	ldr	r3, [pc, #4]	; (8000c70 <MC_GetAlignmentStatusMotor1+0x8>)
 8000c6a:	6818      	ldr	r0, [r3, #0]
 8000c6c:	f000 b8bc 	b.w	8000de8 <MCI_GetAlignmentStatus>
 8000c70:	200009dc 	.word	0x200009dc

08000c74 <MCI_Init>:
  */
__weak void MCI_Init( MCI_Handle_t * pHandle, STM_Handle_t * pSTM, SpeednTorqCtrl_Handle_t * pSTC, pFOCVars_t pFOCVars, PosCtrl_Handle_t * pPosCtrl )
{
  pHandle->pSTM = pSTM;
  pHandle->pSTC = pSTC;
  pHandle->pFOCVars = pFOCVars;
 8000c74:	e9c0 2301 	strd	r2, r3, [r0, #4]
  pHandle->pSTM = pSTM;
 8000c78:	6001      	str	r1, [r0, #0]
  pHandle->pPosCtrl = pPosCtrl;
 8000c7a:	9b00      	ldr	r3, [sp, #0]
 8000c7c:	60c3      	str	r3, [r0, #12]

  /* Buffer related initialization */
  pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8000c7e:	2100      	movs	r1, #0
 8000c80:	7401      	strb	r1, [r0, #16]
  pHandle->hFinalSpeed = 0;
 8000c82:	f8c0 1012 	str.w	r1, [r0, #18]
  pHandle->hFinalTorque = 0;
  pHandle->hDurationms = 0;
 8000c86:	8341      	strh	r1, [r0, #26]
  pHandle->CommandState = MCI_BUFFER_EMPTY;
 8000c88:	7701      	strb	r1, [r0, #28]
}
 8000c8a:	4770      	bx	lr

08000c8c <MCI_ExecSpeedRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecSpeedRamp( MCI_Handle_t * pHandle,  int16_t hFinalSpeed, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c8c:	f04f 0c01 	mov.w	ip, #1
  pHandle->hFinalSpeed = hFinalSpeed;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c90:	f240 1301 	movw	r3, #257	; 0x101
  pHandle->lastCommand = MCI_EXECSPEEDRAMP;
 8000c94:	f880 c010 	strb.w	ip, [r0, #16]
  pHandle->hFinalSpeed = hFinalSpeed;
 8000c98:	8241      	strh	r1, [r0, #18]
  pHandle->hDurationms = hDurationms;
 8000c9a:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000c9c:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_SPEED_MODE;
}
 8000c9e:	4770      	bx	lr

08000ca0 <MCI_ExecTorqueRamp>:
  *         value.
  * @retval none.
  */
__weak void MCI_ExecTorqueRamp( MCI_Handle_t * pHandle,  int16_t hFinalTorque, uint16_t hDurationms )
{
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ca0:	f04f 0c02 	mov.w	ip, #2
  pHandle->hFinalTorque = hFinalTorque;
  pHandle->hDurationms = hDurationms;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000ca4:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_EXECTORQUERAMP;
 8000ca6:	f880 c010 	strb.w	ip, [r0, #16]
  pHandle->hFinalTorque = hFinalTorque;
 8000caa:	8281      	strh	r1, [r0, #20]
  pHandle->hDurationms = hDurationms;
 8000cac:	8342      	strh	r2, [r0, #26]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cae:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop

08000cb4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences( MCI_Handle_t * pHandle, qd_t Iqdref )
{
 8000cb4:	b082      	sub	sp, #8
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cb6:	2203      	movs	r2, #3
  pHandle->Iqdref.q = Iqdref.q;
  pHandle->Iqdref.d = Iqdref.d;
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cb8:	2301      	movs	r3, #1
  pHandle->lastCommand = MCI_SETCURRENTREFERENCES;
 8000cba:	7402      	strb	r2, [r0, #16]
  pHandle->Iqdref.q = Iqdref.q;
 8000cbc:	f8c0 1016 	str.w	r1, [r0, #22]
  pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000cc0:	8383      	strh	r3, [r0, #28]
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
}
 8000cc2:	b002      	add	sp, #8
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <MCI_ExecPositionCommand>:
  * @param  FinalPosition is the desired rotor position asked.
  * @param  Duration the duration of the movement to reach the final position.
  * @retval none.
  */
__weak void MCI_ExecPositionCommand( MCI_Handle_t * pHandle, float FinalPosition, float Duration )
{
 8000cc8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000cca:	6883      	ldr	r3, [r0, #8]
{
 8000ccc:	ed2d 8b02 	vpush	{d8}
  pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
{
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	4604      	mov	r4, r0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000cda:	6840      	ldr	r0, [r0, #4]
{
 8000cdc:	eeb0 8a60 	vmov.f32	s16, s1
 8000ce0:	eef0 8a40 	vmov.f32	s17, s0
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000ce4:	f007 f986 	bl	8007ff4 <STC_GetSpeedSensor>
 8000ce8:	f007 f922 	bl	8007f30 <SPD_GetMecAngle>
  if (Duration > 0) {
 8000cec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000cf4:	9001      	str	r0, [sp, #4]
  if (Duration > 0) {
 8000cf6:	dd14      	ble.n	8000d22 <MCI_ExecPositionCommand+0x5a>
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000cf8:	ee07 0a90 	vmov	s15, r0
 8000cfc:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8000d38 <MCI_ExecPositionCommand+0x70>
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d00:	68e0      	ldr	r0, [r4, #12]
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d06:	eeb0 1a48 	vmov.f32	s2, s16
  float currentPositionRad = (float)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8000d0a:	ee27 0a80 	vmul.f32	s0, s15, s0
    TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8000d0e:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8000d12:	f007 fb05 	bl	8008320 <TC_MoveCommand>
  } else {
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
  }

  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	7763      	strb	r3, [r4, #29]
}
 8000d1a:	b002      	add	sp, #8
 8000d1c:	ecbd 8b02 	vpop	{d8}
 8000d20:	bd10      	pop	{r4, pc}
    TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8000d22:	68e0      	ldr	r0, [r4, #12]
 8000d24:	eeb0 0a68 	vmov.f32	s0, s17
 8000d28:	f007 fb6c 	bl	8008404 <TC_FollowCommand>
  pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	7763      	strb	r3, [r4, #29]
}
 8000d30:	b002      	add	sp, #8
 8000d32:	ecbd 8b02 	vpop	{d8}
 8000d36:	bd10      	pop	{r4, pc}
 8000d38:	38c90fdb 	.word	0x38c90fdb

08000d3c <MCI_StartMotor>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StartMotor( MCI_Handle_t * pHandle )
{
 8000d3c:	b510      	push	{r4, lr}
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000d3e:	2103      	movs	r1, #3
{
 8000d40:	4604      	mov	r4, r0
  bool RetVal = STM_NextState( pHandle->pSTM, IDLE_START );
 8000d42:	6800      	ldr	r0, [r0, #0]
 8000d44:	f007 fa34 	bl	80081b0 <STM_NextState>

  if ( RetVal == true )
 8000d48:	b108      	cbz	r0, 8000d4e <MCI_StartMotor+0x12>
  {
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	7723      	strb	r3, [r4, #28]
  }

  return RetVal;
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <MCI_StopMotor>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_StopMotor( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, ANY_STOP );
 8000d50:	6800      	ldr	r0, [r0, #0]
 8000d52:	2107      	movs	r1, #7
 8000d54:	f007 ba2c 	b.w	80081b0 <STM_NextState>

08000d58 <MCI_FaultAcknowledged>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_FaultAcknowledged( MCI_Handle_t * pHandle )
{
  return STM_FaultAcknowledged( pHandle->pSTM );
 8000d58:	6800      	ldr	r0, [r0, #0]
 8000d5a:	f007 ba9f 	b.w	800829c <STM_FaultAcknowledged>
 8000d5e:	bf00      	nop

08000d60 <MCI_EncoderAlign>:
  * @retval bool It returns true if the command is successfully executed
  *         otherwise it return false.
  */
__weak bool MCI_EncoderAlign( MCI_Handle_t * pHandle )
{
  return STM_NextState( pHandle->pSTM, IDLE_ALIGNMENT );
 8000d60:	6800      	ldr	r0, [r0, #0]
 8000d62:	2101      	movs	r1, #1
 8000d64:	f007 ba24 	b.w	80081b0 <STM_NextState>

08000d68 <MCI_ExecBufferedCommands>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none.
  */
__weak void MCI_ExecBufferedCommands( MCI_Handle_t * pHandle )
{
  if ( pHandle != MC_NULL )
 8000d68:	b178      	cbz	r0, 8000d8a <MCI_ExecBufferedCommands+0x22>
{
 8000d6a:	b510      	push	{r4, lr}
  {
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8000d6c:	7f03      	ldrb	r3, [r0, #28]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	4604      	mov	r4, r0
 8000d72:	d000      	beq.n	8000d76 <MCI_ExecBufferedCommands+0xe>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
      }
    }
  }
}
 8000d74:	bd10      	pop	{r4, pc}
      switch ( pHandle->lastCommand )
 8000d76:	7c01      	ldrb	r1, [r0, #16]
 8000d78:	2902      	cmp	r1, #2
 8000d7a:	d020      	beq.n	8000dbe <MCI_ExecBufferedCommands+0x56>
 8000d7c:	2903      	cmp	r1, #3
 8000d7e:	d005      	beq.n	8000d8c <MCI_ExecBufferedCommands+0x24>
 8000d80:	2901      	cmp	r1, #1
 8000d82:	d00c      	beq.n	8000d9e <MCI_ExecBufferedCommands+0x36>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 8000d84:	2303      	movs	r3, #3
 8000d86:	7723      	strb	r3, [r4, #28]
}
 8000d88:	bd10      	pop	{r4, pc}
 8000d8a:	4770      	bx	lr
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8000d8c:	6882      	ldr	r2, [r0, #8]
 8000d8e:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8000d92:	f8d0 3016 	ldr.w	r3, [r0, #22]
 8000d96:	6113      	str	r3, [r2, #16]
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	7723      	strb	r3, [r4, #28]
}
 8000d9c:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000d9e:	6883      	ldr	r3, [r0, #8]
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_SPEED_MODE );
 8000da6:	6840      	ldr	r0, [r0, #4]
 8000da8:	f007 f93e 	bl	8008028 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms );
 8000dac:	8b62      	ldrh	r2, [r4, #26]
 8000dae:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8000db2:	6860      	ldr	r0, [r4, #4]
 8000db4:	f007 f93c 	bl	8008030 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d0e3      	beq.n	8000d84 <MCI_ExecBufferedCommands+0x1c>
 8000dbc:	e7ec      	b.n	8000d98 <MCI_ExecBufferedCommands+0x30>
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8000dbe:	6883      	ldr	r3, [r0, #8]
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8000dc6:	6840      	ldr	r0, [r0, #4]
 8000dc8:	f007 f92e 	bl	8008028 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms );
 8000dcc:	8b62      	ldrh	r2, [r4, #26]
 8000dce:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8000dd2:	6860      	ldr	r0, [r4, #4]
 8000dd4:	f007 f92c 	bl	8008030 <STC_ExecRamp>
      if ( commandHasBeenExecuted )
 8000dd8:	2800      	cmp	r0, #0
 8000dda:	d0d3      	beq.n	8000d84 <MCI_ExecBufferedCommands+0x1c>
 8000ddc:	e7dc      	b.n	8000d98 <MCI_ExecBufferedCommands+0x30>
 8000dde:	bf00      	nop

08000de0 <MCI_GetSTMState>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak State_t  MCI_GetSTMState( MCI_Handle_t * pHandle )
{
  return STM_GetState( pHandle->pSTM );
 8000de0:	6800      	ldr	r0, [r0, #0]
 8000de2:	f007 ba59 	b.w	8008298 <STM_GetState>
 8000de6:	bf00      	nop

08000de8 <MCI_GetAlignmentStatus>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval State_t It returns the current state of the alignment.
  */
__weak AlignStatus_t  MCI_GetAlignmentStatus( MCI_Handle_t * pHandle )
{
  return TC_GetAlignmentStatus( pHandle->pPosCtrl );
 8000de8:	68c0      	ldr	r0, [r0, #12]
 8000dea:	f007 bcf5 	b.w	80087d8 <TC_GetAlignmentStatus>
 8000dee:	bf00      	nop

08000df0 <MCI_GetControlMode>:
  *         these two values: STC_TORQUE_MODE or STC_SPEED_MODE.
  */
__weak STC_Modality_t MCI_GetControlMode( MCI_Handle_t * pHandle )
{
  return pHandle->LastModalitySetByUser;
}
 8000df0:	7f40      	ldrb	r0, [r0, #29]
 8000df2:	4770      	bx	lr

08000df4 <MCI_GetLastRampFinalSpeed>:
__weak int16_t MCI_GetLastRampFinalSpeed( MCI_Handle_t * pHandle )
{
  int16_t hRetVal = 0;

  /* Examine the last buffered commands */
  if ( pHandle->lastCommand == MCI_EXECSPEEDRAMP )
 8000df4:	7c03      	ldrb	r3, [r0, #16]
 8000df6:	2b01      	cmp	r3, #1
  {
    hRetVal = pHandle->hFinalSpeed;
 8000df8:	bf0c      	ite	eq
 8000dfa:	f9b0 0012 	ldrsheq.w	r0, [r0, #18]
  int16_t hRetVal = 0;
 8000dfe:	2000      	movne	r0, #0
  }
  return hRetVal;
}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop

08000e04 <MCI_StopRamp>:
  * @brief  Stop the execution of ongoing ramp.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_StopRamp( MCI_Handle_t * pHandle)
{
   STC_StopRamp( pHandle->pSTC );
 8000e04:	6840      	ldr	r0, [r0, #4]
 8000e06:	f007 b95b 	b.w	80080c0 <STC_StopRamp>
 8000e0a:	bf00      	nop

08000e0c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit( MCI_Handle_t * pHandle )
{
 8000e0c:	b508      	push	{r3, lr}
  SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor( pHandle->pSTC );
 8000e0e:	6840      	ldr	r0, [r0, #4]
 8000e10:	f007 f8f0 	bl	8007ff4 <STC_GetSpeedSensor>

  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
}
 8000e14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return ( SPD_GetAvrgMecSpeedUnit( SpeedSensor ) );
 8000e18:	f007 b88c 	b.w	8007f34 <SPD_GetAvrgMecSpeedUnit>

08000e1c <MCI_GetMecSpeedRefUnit>:
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak int16_t MCI_GetMecSpeedRefUnit( MCI_Handle_t * pHandle )
{
  return ( STC_GetMecSpeedRefUnit( pHandle->pSTC ) );
 8000e1c:	6840      	ldr	r0, [r0, #4]
 8000e1e:	f007 b8f3 	b.w	8008008 <STC_GetMecSpeedRefUnit>
 8000e22:	bf00      	nop

08000e24 <MCI_GetIab>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval ab_t Stator current Iab
  */
__weak ab_t MCI_GetIab( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iab );
 8000e24:	6882      	ldr	r2, [r0, #8]
 8000e26:	6810      	ldr	r0, [r2, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	b282      	uxth	r2, r0
 8000e2c:	f362 030f 	bfi	r3, r2, #0, #16
 8000e30:	0c00      	lsrs	r0, r0, #16
 8000e32:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e36:	b082      	sub	sp, #8
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	b002      	add	sp, #8
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop

08000e40 <MCI_GetIalphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Ialphabeta
  */
__weak alphabeta_t MCI_GetIalphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Ialphabeta );
 8000e40:	6882      	ldr	r2, [r0, #8]
 8000e42:	6850      	ldr	r0, [r2, #4]
 8000e44:	2300      	movs	r3, #0
 8000e46:	b282      	uxth	r2, r0
 8000e48:	f362 030f 	bfi	r3, r2, #0, #16
 8000e4c:	0c00      	lsrs	r0, r0, #16
 8000e4e:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e52:	b082      	sub	sp, #8
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	b002      	add	sp, #8
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <MCI_GetIqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqd
  */
__weak qd_t MCI_GetIqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqd );
 8000e5c:	6882      	ldr	r2, [r0, #8]
 8000e5e:	68d0      	ldr	r0, [r2, #12]
 8000e60:	2300      	movs	r3, #0
 8000e62:	b282      	uxth	r2, r0
 8000e64:	f362 030f 	bfi	r3, r2, #0, #16
 8000e68:	0c00      	lsrs	r0, r0, #16
 8000e6a:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e6e:	b082      	sub	sp, #8
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	b002      	add	sp, #8
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <MCI_GetIqdref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Iqdref
  */
__weak qd_t MCI_GetIqdref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Iqdref );
 8000e78:	6882      	ldr	r2, [r0, #8]
 8000e7a:	6910      	ldr	r0, [r2, #16]
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	b282      	uxth	r2, r0
 8000e80:	f362 030f 	bfi	r3, r2, #0, #16
 8000e84:	0c00      	lsrs	r0, r0, #16
 8000e86:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000e8a:	b082      	sub	sp, #8
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	b002      	add	sp, #8
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <MCI_GetVqd>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval qd_t Stator current Vqd
  */
__weak qd_t MCI_GetVqd( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Vqd );
 8000e94:	6882      	ldr	r2, [r0, #8]
 8000e96:	f8d2 0016 	ldr.w	r0, [r2, #22]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	b282      	uxth	r2, r0
 8000e9e:	f362 030f 	bfi	r3, r2, #0, #16
 8000ea2:	0c00      	lsrs	r0, r0, #16
 8000ea4:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ea8:	b082      	sub	sp, #8
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	b002      	add	sp, #8
 8000eae:	4770      	bx	lr

08000eb0 <MCI_GetValphabeta>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval alphabeta_t Stator current Valphabeta
  */
__weak alphabeta_t MCI_GetValphabeta( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->Valphabeta );
 8000eb0:	6882      	ldr	r2, [r0, #8]
 8000eb2:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	b282      	uxth	r2, r0
 8000eba:	f362 030f 	bfi	r3, r2, #0, #16
 8000ebe:	0c00      	lsrs	r0, r0, #16
 8000ec0:	f360 431f 	bfi	r3, r0, #16, #16
{
 8000ec4:	b082      	sub	sp, #8
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	b002      	add	sp, #8
 8000eca:	4770      	bx	lr

08000ecc <MCI_GetTeref>:
  * @param  pHandle Pointer on the component instance to work on.
  * @retval int16_t Teref
  */
__weak int16_t MCI_GetTeref( MCI_Handle_t * pHandle )
{
  return ( pHandle->pFOCVars->hTeref );
 8000ecc:	6883      	ldr	r3, [r0, #8]
}
 8000ece:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8000ed2:	4770      	bx	lr

08000ed4 <MCI_SetIdref>:
  * @param  int16_t New target Id value
  * @retval none
  */
__weak void MCI_SetIdref( MCI_Handle_t * pHandle, int16_t hNewIdref )
{
  pHandle->pFOCVars->Iqdref.d = hNewIdref;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	6882      	ldr	r2, [r0, #8]
 8000ed8:	f361 030f 	bfi	r3, r1, #0, #16
 8000edc:	f361 431f 	bfi	r3, r1, #16, #16
 8000ee0:	f8c2 3012 	str.w	r3, [r2, #18]
  pHandle->pFOCVars->UserIdref = hNewIdref;
}
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref( MCI_Handle_t * pHandle )
{
 8000ee8:	b510      	push	{r4, lr}
  pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref( pHandle->pSTC );
 8000eea:	e9d0 0401 	ldrd	r0, r4, [r0, #4]
 8000eee:	f007 f927 	bl	8008140 <STC_GetDefaultIqdref>
 8000ef2:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8000ef6:	8220      	strh	r0, [r4, #16]
 8000ef8:	8263      	strh	r3, [r4, #18]
}
 8000efa:	bd10      	pop	{r4, pc}

08000efc <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;

  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000efc:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8000f00:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.a;
 8000f02:	fb13 f201 	smulbb	r2, r3, r1
{
 8000f06:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ( int32_t )Input.b;
 8000f0a:	fb10 f101 	smulbb	r1, r0, r1
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */

  wbeta_tmp = ( -( a_divSQRT3_tmp ) - ( b_divSQRT3_tmp ) -
 8000f0e:	4250      	negs	r0, r2
 8000f10:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
                 ( b_divSQRT3_tmp ) ) >> 15;
#endif

  /* Check saturation of Ibeta */
  if ( wbeta_tmp > INT16_MAX )
 8000f14:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8000f18:	b084      	sub	sp, #16
  if ( wbeta_tmp > INT16_MAX )
 8000f1a:	da05      	bge.n	8000f28 <MCM_Clarke+0x2c>
 8000f1c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if ( wbeta_tmp < ( -32768 ) )
 8000f1e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8000f22:	da0c      	bge.n	8000f3e <MCM_Clarke+0x42>
 8000f24:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <MCM_Clarke+0x50>)
 8000f26:	e001      	b.n	8000f2c <MCM_Clarke+0x30>
 8000f28:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if ( Output.beta == ( int16_t )( -32768 ) )
  {
    Output.beta = -32767;
  }

  return ( Output );
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f363 000f 	bfi	r0, r3, #0, #16
 8000f34:	b293      	uxth	r3, r2
 8000f36:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000f3a:	b004      	add	sp, #16
 8000f3c:	4770      	bx	lr
    hbeta_tmp = ( int16_t )( wbeta_tmp );
 8000f3e:	4803      	ldr	r0, [pc, #12]	; (8000f4c <MCM_Clarke+0x50>)
 8000f40:	b20a      	sxth	r2, r1
 8000f42:	4282      	cmp	r2, r0
 8000f44:	bfb8      	it	lt
 8000f46:	4602      	movlt	r2, r0
 8000f48:	e7f0      	b.n	8000f2c <MCM_Clarke+0x30>
 8000f4a:	bf00      	nop
 8000f4c:	ffff8001 	.word	0xffff8001

08000f50 <MCM_Trig_Functions>:
    uint32_t CordicRdata;
    Trig_Components Components;
  } CosSin;

  /* Configure CORDIC */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MCM_Trig_Functions+0x28>)
 8000f52:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <MCM_Trig_Functions+0x2c>)
 8000f54:	601a      	str	r2, [r3, #0]
  LL_CORDIC_WriteData(CORDIC, 0x7FFF0000 + (uint32_t) hAngle);
 8000f56:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8000f5a:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8000f5e:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8000f60:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components);
 8000f62:	2000      	movs	r0, #0
 8000f64:	b29a      	uxth	r2, r3
 8000f66:	f362 000f 	bfi	r0, r2, #0, #16
 8000f6a:	0c1b      	lsrs	r3, r3, #16
{
 8000f6c:	b082      	sub	sp, #8
  return (CosSin.Components);
 8000f6e:	f363 401f 	bfi	r0, r3, #16, #16

}
 8000f72:	b002      	add	sp, #8
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	00600040 	.word	0x00600040

08000f80 <MCM_Park>:
{
 8000f80:	b530      	push	{r4, r5, lr}
 8000f82:	b085      	sub	sp, #20
 8000f84:	4603      	mov	r3, r0
 8000f86:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f88:	4608      	mov	r0, r1
 8000f8a:	141c      	asrs	r4, r3, #16
{
 8000f8c:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8000f8e:	f7ff ffdf 	bl	8000f50 <MCM_Trig_Functions>
 8000f92:	b22d      	sxth	r5, r5
 8000f94:	fa0f fc80 	sxth.w	ip, r0
 8000f98:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ( int32_t )Local_Vector_Components.hCos;
 8000f9a:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = ( q_tmp_1 - q_tmp_2 ) >> 15;
 8000f9e:	fb04 1113 	mls	r1, r4, r3, r1
  if ( wqd_tmp > INT16_MAX )
 8000fa2:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8000fa6:	da05      	bge.n	8000fb4 <MCM_Park+0x34>
 8000fa8:	13ca      	asrs	r2, r1, #15
  else if ( wqd_tmp < ( -32768 ) )
 8000faa:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fae:	da22      	bge.n	8000ff6 <MCM_Park+0x76>
 8000fb0:	4914      	ldr	r1, [pc, #80]	; (8001004 <MCM_Park+0x84>)
 8000fb2:	e001      	b.n	8000fb8 <MCM_Park+0x38>
 8000fb4:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ( int32_t )Local_Vector_Components.hCos;
 8000fb8:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fbc:	fb05 4403 	mla	r4, r5, r3, r4
  if ( wqd_tmp > INT16_MAX )
 8000fc0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = ( d_tmp_1 + d_tmp_2 ) >> 15;
 8000fc4:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if ( wqd_tmp > INT16_MAX )
 8000fc8:	da04      	bge.n	8000fd4 <MCM_Park+0x54>
  else if ( wqd_tmp < ( -32768 ) )
 8000fca:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8000fce:	da0c      	bge.n	8000fea <MCM_Park+0x6a>
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MCM_Park+0x84>)
 8000fd2:	e001      	b.n	8000fd8 <MCM_Park+0x58>
 8000fd4:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return ( Output );
 8000fd8:	b28a      	uxth	r2, r1
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f362 000f 	bfi	r0, r2, #0, #16
 8000fe0:	b29b      	uxth	r3, r3
 8000fe2:	f363 401f 	bfi	r0, r3, #16, #16
}
 8000fe6:	b005      	add	sp, #20
 8000fe8:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MCM_Park+0x84>)
 8000fec:	b213      	sxth	r3, r2
 8000fee:	4283      	cmp	r3, r0
 8000ff0:	bfb8      	it	lt
 8000ff2:	4603      	movlt	r3, r0
 8000ff4:	e7f0      	b.n	8000fd8 <MCM_Park+0x58>
    hqd_tmp = ( int16_t )( wqd_tmp );
 8000ff6:	4903      	ldr	r1, [pc, #12]	; (8001004 <MCM_Park+0x84>)
 8000ff8:	b212      	sxth	r2, r2
 8000ffa:	4291      	cmp	r1, r2
 8000ffc:	bfb8      	it	lt
 8000ffe:	4611      	movlt	r1, r2
 8001000:	e7da      	b.n	8000fb8 <MCM_Park+0x38>
 8001002:	bf00      	nop
 8001004:	ffff8001 	.word	0xffff8001

08001008 <MCM_Rev_Park>:
{
 8001008:	b530      	push	{r4, r5, lr}
 800100a:	b085      	sub	sp, #20
 800100c:	4604      	mov	r4, r0
 800100e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001010:	4608      	mov	r0, r1
{
 8001012:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions( Theta );
 8001014:	f7ff ff9c 	bl	8000f50 <MCM_Trig_Functions>
 8001018:	1424      	asrs	r4, r4, #16
 800101a:	1402      	asrs	r2, r0, #16
 800101c:	b22d      	sxth	r5, r5
 800101e:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hSin;
 8001020:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = ( int16_t )( ( ( alpha_tmp1 ) + ( alpha_tmp2 ) ) >> 15 );
 8001024:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ( int32_t )Local_Vector_Components.hCos;
 8001028:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = ( int16_t )( ( beta_tmp2 - beta_tmp1 ) >> 15 );
 800102c:	fb05 4412 	mls	r4, r5, r2, r4
  return ( Output );
 8001030:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001034:	2000      	movs	r0, #0
 8001036:	f363 000f 	bfi	r0, r3, #0, #16
 800103a:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 800103e:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001042:	b005      	add	sp, #20
 8001044:	bd30      	pop	{r4, r5, pc}
 8001046:	bf00      	nop

08001048 <FOC_Clear>:
  ab_t NULL_ab = {(int16_t)0, (int16_t)0};
  qd_t NULL_qd = {(int16_t)0, (int16_t)0};
  alphabeta_t NULL_alphabeta = {(int16_t)0, (int16_t)0};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001048:	2226      	movs	r2, #38	; 0x26
{
 800104a:	b538      	push	{r3, r4, r5, lr}
 800104c:	fb00 f202 	mul.w	r2, r0, r2
 8001050:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001052:	2400      	movs	r4, #0
 8001054:	509c      	str	r4, [r3, r2]
{
 8001056:	4605      	mov	r5, r0
 8001058:	f102 0108 	add.w	r1, r2, #8
 800105c:	1898      	adds	r0, r3, r2
 800105e:	3210      	adds	r2, #16
 8001060:	4419      	add	r1, r3
 8001062:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001064:	4a11      	ldr	r2, [pc, #68]	; (80010ac <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001066:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 8001068:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 800106c:	604c      	str	r4, [r1, #4]
 800106e:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001070:	f8c3 4006 	str.w	r4, [r3, #6]
 8001074:	f8c3 400a 	str.w	r4, [r3, #10]
 8001078:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], (int32_t)0);
 800107c:	4621      	mov	r1, r4
 800107e:	f005 fd3b 	bl	8006af8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], (int32_t)0);
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <FOC_Clear+0x68>)
 8001084:	4621      	mov	r1, r4
 8001086:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800108a:	f005 fd35 	bl	8006af8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800108e:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <FOC_Clear+0x6c>)
 8001090:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001094:	f006 ffb0 	bl	8007ff8 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001098:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <FOC_Clear+0x70>)
 800109a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800109e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80010a2:	f005 bf6b 	b.w	8006f7c <PWMC_SwitchOffPWM>
 80010a6:	bf00      	nop
 80010a8:	200008f0 	.word	0x200008f0
 80010ac:	200009b4 	.word	0x200009b4
 80010b0:	200009b0 	.word	0x200009b0
 80010b4:	200009c8 	.word	0x200009c8
 80010b8:	200009d0 	.word	0x200009d0

080010bc <MCboot>:
{
 80010bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  STM_Init(&STM[M1]);
 80010c0:	4f70      	ldr	r7, [pc, #448]	; (8001284 <MCboot+0x1c8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010c2:	4d71      	ldr	r5, [pc, #452]	; (8001288 <MCboot+0x1cc>)
  PID_HandleInit(&PIDSpeedHandle_M1);
 80010c4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80012dc <MCboot+0x220>
  ENC_Init (&ENCODER_M1);
 80010c8:	4e70      	ldr	r6, [pc, #448]	; (800128c <MCboot+0x1d0>)
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80010ca:	f8df 9214 	ldr.w	r9, [pc, #532]	; 80012e0 <MCboot+0x224>
 80010ce:	f8df a214 	ldr.w	sl, [pc, #532]	; 80012e4 <MCboot+0x228>
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 80010d2:	f8df b214 	ldr.w	fp, [pc, #532]	; 80012e8 <MCboot+0x22c>
{
 80010d6:	b089      	sub	sp, #36	; 0x24
 80010d8:	4603      	mov	r3, r0
  STM_Init(&STM[M1]);
 80010da:	4638      	mov	r0, r7
{
 80010dc:	e9cd 3103 	strd	r3, r1, [sp, #12]
  STM_Init(&STM[M1]);
 80010e0:	f007 f844 	bl	800816c <STM_Init>
  bMCBootCompleted = 0;
 80010e4:	4a6a      	ldr	r2, [pc, #424]	; (8001290 <MCboot+0x1d4>)
  pCLM[M1] = &CircleLimitationM1;
 80010e6:	4b6b      	ldr	r3, [pc, #428]	; (8001294 <MCboot+0x1d8>)
  pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80010e8:	486b      	ldr	r0, [pc, #428]	; (8001298 <MCboot+0x1dc>)
 80010ea:	6028      	str	r0, [r5, #0]
  bMCBootCompleted = 0;
 80010ec:	2400      	movs	r4, #0
 80010ee:	7014      	strb	r4, [r2, #0]
  pCLM[M1] = &CircleLimitationM1;
 80010f0:	4a6a      	ldr	r2, [pc, #424]	; (800129c <MCboot+0x1e0>)
 80010f2:	601a      	str	r2, [r3, #0]
  R3_2_Init(&PWM_Handle_M1);
 80010f4:	f006 fad2 	bl	800769c <R3_2_Init>
  startTimers();
 80010f8:	f005 fda8 	bl	8006c4c <startTimers>
  PID_HandleInit(&PIDSpeedHandle_M1);
 80010fc:	4640      	mov	r0, r8
 80010fe:	f005 fce7 	bl	8006ad0 <PID_HandleInit>
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001102:	4a67      	ldr	r2, [pc, #412]	; (80012a0 <MCboot+0x1e4>)
  pSTC[M1] = &SpeednTorqCtrlM1;
 8001104:	4d67      	ldr	r5, [pc, #412]	; (80012a4 <MCboot+0x1e8>)
  pPIDSpeed[M1] = &PIDSpeedHandle_M1;
 8001106:	f8c2 8000 	str.w	r8, [r2]
  pSTC[M1] = &SpeednTorqCtrlM1;
 800110a:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 80012ec <MCboot+0x230>
 800110e:	f8c5 8000 	str.w	r8, [r5]
  ENC_Init (&ENCODER_M1);
 8001112:	4630      	mov	r0, r6
 8001114:	f005 fad0 	bl	80066b8 <ENC_Init>
  EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8001118:	6829      	ldr	r1, [r5, #0]
 800111a:	464a      	mov	r2, r9
 800111c:	4633      	mov	r3, r6
 800111e:	4650      	mov	r0, sl
 8001120:	f005 fa7c 	bl	800661c <EAC_Init>
  pEAC[M1] = &EncAlignCtrlM1;
 8001124:	4b60      	ldr	r3, [pc, #384]	; (80012a8 <MCboot+0x1ec>)
  pPIDPosCtrl[M1] = &PID_PosParamsM1;
 8001126:	4861      	ldr	r0, [pc, #388]	; (80012ac <MCboot+0x1f0>)
 8001128:	f8cb 0000 	str.w	r0, [fp]
  pEAC[M1] = &EncAlignCtrlM1;
 800112c:	f8c3 a000 	str.w	sl, [r3]
  PID_HandleInit(pPIDPosCtrl[M1]);
 8001130:	f005 fcce 	bl	8006ad0 <PID_HandleInit>
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 8001134:	4642      	mov	r2, r8
  pPosCtrl[M1] = &pPosCtrlM1;
 8001136:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80012f0 <MCboot+0x234>
 800113a:	485d      	ldr	r0, [pc, #372]	; (80012b0 <MCboot+0x1f4>)
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 800113c:	f8db 1000 	ldr.w	r1, [fp]
  pPosCtrl[M1] = &pPosCtrlM1;
 8001140:	f8c8 0000 	str.w	r0, [r8]
  TC_Init(pPosCtrl[M1], pPIDPosCtrl[M1], &SpeednTorqCtrlM1, &ENCODER_M1);
 8001144:	4633      	mov	r3, r6
 8001146:	f007 f8bb 	bl	80082c0 <TC_Init>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 800114a:	4855      	ldr	r0, [pc, #340]	; (80012a0 <MCboot+0x1e4>)
  PID_HandleInit(&PIDIqHandle_M1);
 800114c:	f8df b1a4 	ldr.w	fp, [pc, #420]	; 80012f4 <MCboot+0x238>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001150:	6801      	ldr	r1, [r0, #0]
 8001152:	6828      	ldr	r0, [r5, #0]
  PID_HandleInit(&PIDIdHandle_M1);
 8001154:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 80012f8 <MCboot+0x23c>
  STC_Init(pSTC[M1],pPIDSpeed[M1], &ENCODER_M1._Super);
 8001158:	4632      	mov	r2, r6
 800115a:	f006 ff33 	bl	8007fc4 <STC_Init>
  VSS_Init (&VirtualSpeedSensorM1);
 800115e:	4648      	mov	r0, r9
 8001160:	f007 fc74 	bl	8008a4c <VSS_Init>
  PID_HandleInit(&PIDIqHandle_M1);
 8001164:	4658      	mov	r0, fp
 8001166:	f005 fcb3 	bl	8006ad0 <PID_HandleInit>
  PID_HandleInit(&PIDIdHandle_M1);
 800116a:	4650      	mov	r0, sl
 800116c:	f005 fcb0 	bl	8006ad0 <PID_HandleInit>
  pPIDIq[M1] = &PIDIqHandle_M1;
 8001170:	4950      	ldr	r1, [pc, #320]	; (80012b4 <MCboot+0x1f8>)
  pPIDId[M1] = &PIDIdHandle_M1;
 8001172:	4b51      	ldr	r3, [pc, #324]	; (80012b8 <MCboot+0x1fc>)
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001174:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80012fc <MCboot+0x240>
 8001178:	4850      	ldr	r0, [pc, #320]	; (80012bc <MCboot+0x200>)
  pPIDIq[M1] = &PIDIqHandle_M1;
 800117a:	f8c1 b000 	str.w	fp, [r1]
  pPIDId[M1] = &PIDIdHandle_M1;
 800117e:	f8c3 a000 	str.w	sl, [r3]
  NTC_Init(&TempSensorParamsM1);
 8001182:	f8df b17c 	ldr.w	fp, [pc, #380]	; 8001300 <MCboot+0x244>
  pBusSensorM1 = &RealBusVoltageSensorParamsM1;
 8001186:	f8c9 0000 	str.w	r0, [r9]
  RVBS_Init(pBusSensorM1);
 800118a:	f006 fe4b 	bl	8007e24 <RVBS_Init>
  pMPM[M1] = &PQD_MotorPowMeasM1;
 800118e:	494c      	ldr	r1, [pc, #304]	; (80012c0 <MCboot+0x204>)
 8001190:	4b4c      	ldr	r3, [pc, #304]	; (80012c4 <MCboot+0x208>)
 8001192:	600b      	str	r3, [r1, #0]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001194:	f8df a16c 	ldr.w	sl, [pc, #364]	; 8001304 <MCboot+0x248>
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 8001198:	f8d9 2000 	ldr.w	r2, [r9]
  pMPM[M1]->pFOCVars = &FOCVars[M1];
 800119c:	f8c3 a10c 	str.w	sl, [r3, #268]	; 0x10c
  NTC_Init(&TempSensorParamsM1);
 80011a0:	4658      	mov	r0, fp
  pMPM[M1]->pVBS = &(pBusSensorM1->_Super);
 80011a2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
  NTC_Init(&TempSensorParamsM1);
 80011a6:	f005 fc4f 	bl	8006a48 <NTC_Init>
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80011aa:	4a47      	ldr	r2, [pc, #284]	; (80012c8 <MCboot+0x20c>)
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80011ac:	4b47      	ldr	r3, [pc, #284]	; (80012cc <MCboot+0x210>)
 80011ae:	4848      	ldr	r0, [pc, #288]	; (80012d0 <MCboot+0x214>)
  pTemperatureSensor[M1] = &TempSensorParamsM1;
 80011b0:	f8c2 b000 	str.w	fp, [r2]
  pREMNG[M1] = &RampExtMngrHFParamsM1;
 80011b4:	6018      	str	r0, [r3, #0]
  REMNG_Init(pREMNG[M1]);
 80011b6:	f006 fe83 	bl	8007ec0 <REMNG_Init>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80011ba:	f04f 0b01 	mov.w	fp, #1
  FOC_Clear(M1);
 80011be:	4620      	mov	r0, r4
 80011c0:	f7ff ff42 	bl	8001048 <FOC_Clear>
  FOCVars[M1].bDriveInput = EXTERNAL;
 80011c4:	f88a b024 	strb.w	fp, [sl, #36]	; 0x24
  FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80011c8:	6828      	ldr	r0, [r5, #0]
 80011ca:	f006 ffb9 	bl	8008140 <STC_GetDefaultIqdref>
 80011ce:	f8ca 0010 	str.w	r0, [sl, #16]
  FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80011d2:	6828      	ldr	r0, [r5, #0]
 80011d4:	f006 ffb4 	bl	8008140 <STC_GetDefaultIqdref>
 80011d8:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80011dc:	f8aa 0014 	strh.w	r0, [sl, #20]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80011e0:	4653      	mov	r3, sl
  oMCInterface[M1] = & Mci[M1];
 80011e2:	f8df a124 	ldr.w	sl, [pc, #292]	; 8001308 <MCboot+0x24c>
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80011e6:	f8d8 2000 	ldr.w	r2, [r8]
  oMCInterface[M1] = & Mci[M1];
 80011ea:	483a      	ldr	r0, [pc, #232]	; (80012d4 <MCboot+0x218>)
 80011ec:	f8ca 0000 	str.w	r0, [sl]
  MCI_Init(oMCInterface[M1], &STM[M1], pSTC[M1], &FOCVars[M1], pPosCtrl[M1]);
 80011f0:	9200      	str	r2, [sp, #0]
 80011f2:	682a      	ldr	r2, [r5, #0]
 80011f4:	4639      	mov	r1, r7
 80011f6:	f7ff fd3d 	bl	8000c74 <MCI_Init>
  MCI_ExecSpeedRamp(oMCInterface[M1],
 80011fa:	f8da 3000 	ldr.w	r3, [sl]
 80011fe:	6828      	ldr	r0, [r5, #0]
 8001200:	9305      	str	r3, [sp, #20]
 8001202:	f006 ff93 	bl	800812c <STC_GetMecSpeedRefUnitDefault>
 8001206:	9b05      	ldr	r3, [sp, #20]
 8001208:	4601      	mov	r1, r0
 800120a:	4622      	mov	r2, r4
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fd3d 	bl	8000c8c <MCI_ExecSpeedRamp>
  pMCIList[M1] = oMCInterface[M1];
 8001212:	9903      	ldr	r1, [sp, #12]
 8001214:	f8da 3000 	ldr.w	r3, [sl]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001218:	4821      	ldr	r0, [pc, #132]	; (80012a0 <MCboot+0x1e4>)
  pMCIList[M1] = oMCInterface[M1];
 800121a:	600b      	str	r3, [r1, #0]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <MCboot+0x1cc>)
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 800121e:	f8d0 e000 	ldr.w	lr, [r0]
  MCT[M1].pPIDIq = pPIDIq[M1];
 8001222:	4824      	ldr	r0, [pc, #144]	; (80012b4 <MCboot+0x1f8>)
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001224:	6819      	ldr	r1, [r3, #0]
  MCT[M1].pSpeednTorqueCtrl = pSTC[M1];
 8001226:	682a      	ldr	r2, [r5, #0]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001228:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MCboot+0x204>)
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 800122a:	4d27      	ldr	r5, [pc, #156]	; (80012c8 <MCboot+0x20c>)
  MCT[M1].pPIDIq = pPIDIq[M1];
 800122c:	f8d0 c000 	ldr.w	ip, [r0]
  MCT[M1].pPIDId = pPIDId[M1];
 8001230:	4821      	ldr	r0, [pc, #132]	; (80012b8 <MCboot+0x1fc>)
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001232:	f8d3 a000 	ldr.w	sl, [r3]
  MCT[M1].pTemperatureSensor = (NTC_Handle_t *) pTemperatureSensor[M1];
 8001236:	682d      	ldr	r5, [r5, #0]
  MCT[M1].pPIDSpeed = pPIDSpeed[M1];
 8001238:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MCboot+0x21c>)
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800123a:	f8d9 9000 	ldr.w	r9, [r9]
  MCT[M1].pPIDId = pPIDId[M1];
 800123e:	6800      	ldr	r0, [r0, #0]
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8001240:	f8d8 8000 	ldr.w	r8, [r8]
  MCT[M1].pPWMnCurrFdbk = pwmcHandle[M1];
 8001244:	6119      	str	r1, [r3, #16]
  MCT[M1].pStateMachine = &STM[M1];
 8001246:	e9c3 2709 	strd	r2, r7, [r3, #36]	; 0x24
  MCT[M1].pPIDIq = pPIDIq[M1];
 800124a:	e9c3 ec00 	strd	lr, ip, [r3]
  MCT[M1].pBusVoltageSensor = &(pBusSensorM1->_Super);
 800124e:	e9c3 590b 	strd	r5, r9, [r3, #44]	; 0x2c
  MCT[M1].pSpeedSensorVirtual = MC_NULL;
 8001252:	e9c3 4407 	strd	r4, r4, [r3, #28]
  MCT[M1].pNTCRelay = MC_NULL;             /* relay is defined, oRelayM1*/
 8001256:	e9c3 440d 	strd	r4, r4, [r3, #52]	; 0x34
  MCT[M1].pFF = MC_NULL;
 800125a:	e9c3 4410 	strd	r4, r4, [r3, #64]	; 0x40
  bMCBootCompleted = 1;
 800125e:	4a0c      	ldr	r2, [pc, #48]	; (8001290 <MCboot+0x1d4>)
  MCT[M1].pPIDId = pPIDId[M1];
 8001260:	6098      	str	r0, [r3, #8]
  MCT[M1].pSpeedSensorMain = (SpeednPosFdbk_Handle_t *) &ENCODER_M1;
 8001262:	619e      	str	r6, [r3, #24]
  MCT[M1].pMPM =  (MotorPowMeas_Handle_t*)pMPM[M1];
 8001264:	f8c3 a03c 	str.w	sl, [r3, #60]	; 0x3c
  MCT[M1].pPosCtrl = pPosCtrl[M1];
 8001268:	f8c3 8048 	str.w	r8, [r3, #72]	; 0x48
  MCT[M1].pPIDFluxWeakening = MC_NULL; /* if M1 doesn't has FW */
 800126c:	60dc      	str	r4, [r3, #12]
  MCT[M1].pRevupCtrl = MC_NULL;              /* only if M1 is not sensorless*/
 800126e:	615c      	str	r4, [r3, #20]
  MCT[M1].pOTT = MC_NULL;
 8001270:	e9c3 4413 	strd	r4, r4, [r3, #76]	; 0x4c
  pMCTList[M1] = &MCT[M1];
 8001274:	9904      	ldr	r1, [sp, #16]
 8001276:	600b      	str	r3, [r1, #0]
  bMCBootCompleted = 1;
 8001278:	f882 b000 	strb.w	fp, [r2]
}
 800127c:	b009      	add	sp, #36	; 0x24
 800127e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001282:	bf00      	nop
 8001284:	2000098c 	.word	0x2000098c
 8001288:	200009d0 	.word	0x200009d0
 800128c:	200000f0 	.word	0x200000f0
 8001290:	20000992 	.word	0x20000992
 8001294:	200009a4 	.word	0x200009a4
 8001298:	2000034c 	.word	0x2000034c
 800129c:	20000000 	.word	0x20000000
 80012a0:	200009bc 	.word	0x200009bc
 80012a4:	200009c8 	.word	0x200009c8
 80012a8:	200009a8 	.word	0x200009a8
 80012ac:	2000020c 	.word	0x2000020c
 80012b0:	200004cc 	.word	0x200004cc
 80012b4:	200009b4 	.word	0x200009b4
 80012b8:	200009b0 	.word	0x200009b0
 80012bc:	200003e0 	.word	0x200003e0
 80012c0:	200009ac 	.word	0x200009ac
 80012c4:	20000238 	.word	0x20000238
 80012c8:	200009cc 	.word	0x200009cc
 80012cc:	200009c4 	.word	0x200009c4
 80012d0:	200003c8 	.word	0x200003c8
 80012d4:	2000096c 	.word	0x2000096c
 80012d8:	20000918 	.word	0x20000918
 80012dc:	200001e0 	.word	0x200001e0
 80012e0:	20000494 	.word	0x20000494
 80012e4:	2000016c 	.word	0x2000016c
 80012e8:	200009b8 	.word	0x200009b8
 80012ec:	20000408 	.word	0x20000408
 80012f0:	200009c0 	.word	0x200009c0
 80012f4:	200001b4 	.word	0x200001b4
 80012f8:	20000188 	.word	0x20000188
 80012fc:	200009a0 	.word	0x200009a0
 8001300:	2000043c 	.word	0x2000043c
 8001304:	200008f0 	.word	0x200008f0
 8001308:	2000099c 	.word	0x2000099c

0800130c <FOC_InitAdditionalMethods>:
__weak void FOC_InitAdditionalMethods(uint8_t bMotor)
{
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
}
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop

08001310 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001310:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if(FOCVars[bMotor].bDriveInput == INTERNAL)
 8001312:	4c08      	ldr	r4, [pc, #32]	; (8001334 <FOC_CalcCurrRef+0x24>)
 8001314:	2326      	movs	r3, #38	; 0x26
 8001316:	fb03 4400 	mla	r4, r3, r0, r4
 800131a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800131e:	b103      	cbz	r3, 8001322 <FOC_CalcCurrRef+0x12>

  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001320:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001322:	4b05      	ldr	r3, [pc, #20]	; (8001338 <FOC_CalcCurrRef+0x28>)
 8001324:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001328:	f006 fece 	bl	80080c8 <STC_CalcTorqueReference>
 800132c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800132e:	8220      	strh	r0, [r4, #16]
}
 8001330:	bd10      	pop	{r4, pc}
 8001332:	bf00      	nop
 8001334:	200008f0 	.word	0x200008f0
 8001338:	200009c8 	.word	0x200009c8

0800133c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800133c:	4b01      	ldr	r3, [pc, #4]	; (8001344 <TSK_SetChargeBootCapDelayM1+0x8>)
 800133e:	8018      	strh	r0, [r3, #0]
}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	20000994 	.word	0x20000994

08001348 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (hBootCapDelayCounterM1 == 0)
 8001348:	4b03      	ldr	r3, [pc, #12]	; (8001358 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800134a:	8818      	ldrh	r0, [r3, #0]
 800134c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800134e:	fab0 f080 	clz	r0, r0
 8001352:	0940      	lsrs	r0, r0, #5
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000994 	.word	0x20000994

0800135c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800135c:	4b01      	ldr	r3, [pc, #4]	; (8001364 <TSK_SetStopPermanencyTimeM1+0x8>)
 800135e:	8018      	strh	r0, [r3, #0]
}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000998 	.word	0x20000998

08001368 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (hStopPermanencyCounterM1 == 0)
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800136a:	8818      	ldrh	r0, [r3, #0]
 800136c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800136e:	fab0 f080 	clz	r0, r0
 8001372:	0940      	lsrs	r0, r0, #5
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000998 	.word	0x20000998

0800137c <TSK_MediumFrequencyTaskM1>:
{
 800137c:	b510      	push	{r4, lr}
  PQD_CalcElMotorPower( pMPM[M1] );
 800137e:	4c92      	ldr	r4, [pc, #584]	; (80015c8 <TSK_MediumFrequencyTaskM1+0x24c>)
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001380:	4892      	ldr	r0, [pc, #584]	; (80015cc <TSK_MediumFrequencyTaskM1+0x250>)
{
 8001382:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001384:	2300      	movs	r3, #0
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 8001386:	f10d 0106 	add.w	r1, sp, #6
  int16_t wAux = 0;
 800138a:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void) ENC_CalcAvrgMecSpeedUnit( &ENCODER_M1, &wAux );
 800138e:	f005 f9fb 	bl	8006788 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower( pMPM[M1] );
 8001392:	6820      	ldr	r0, [r4, #0]
 8001394:	f005 fc24 	bl	8006be0 <PQD_CalcElMotorPower>
  StateM1 = STM_GetState( &STM[M1] );
 8001398:	488d      	ldr	r0, [pc, #564]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 800139a:	f006 ff7d 	bl	8008298 <STM_GetState>
  switch ( StateM1 )
 800139e:	2812      	cmp	r0, #18
 80013a0:	d818      	bhi.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
 80013a2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80013a6:	002a      	.short	0x002a
 80013a8:	00440038 	.word	0x00440038
 80013ac:	00620053 	.word	0x00620053
 80013b0:	007e006b 	.word	0x007e006b
 80013b4:	009d008a 	.word	0x009d008a
 80013b8:	00170013 	.word	0x00170013
 80013bc:	00170017 	.word	0x00170017
 80013c0:	00b600a7 	.word	0x00b600a7
 80013c4:	00d700c3 	.word	0x00d700c3
 80013c8:	001900e6 	.word	0x001900e6
    STM_NextState( &STM[M1], IDLE );
 80013cc:	4880      	ldr	r0, [pc, #512]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	f006 feee 	bl	80081b0 <STM_NextState>
}
 80013d4:	b002      	add	sp, #8
 80013d6:	bd10      	pop	{r4, pc}
    ENC_Clear( &ENCODER_M1 );
 80013d8:	487c      	ldr	r0, [pc, #496]	; (80015cc <TSK_MediumFrequencyTaskM1+0x250>)
 80013da:	f005 f9a7 	bl	800672c <ENC_Clear>
    if ( STM_NextState( &STM[M1], START ) == true )
 80013de:	487c      	ldr	r0, [pc, #496]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 80013e0:	2104      	movs	r1, #4
 80013e2:	f006 fee5 	bl	80081b0 <STM_NextState>
 80013e6:	2800      	cmp	r0, #0
 80013e8:	d0f4      	beq.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      FOC_Clear( M1 );
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff fe2c 	bl	8001048 <FOC_Clear>
      R3_2_SwitchOnPWM( pwmcHandle[M1] );
 80013f0:	4b78      	ldr	r3, [pc, #480]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 80013f2:	6818      	ldr	r0, [r3, #0]
 80013f4:	f005 ffd4 	bl	80073a0 <R3_2_SwitchOnPWM>
 80013f8:	e7ec      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_GetRestartState( &EncAlignCtrlM1 ) )
 80013fa:	4877      	ldr	r0, [pc, #476]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 80013fc:	f005 f95a 	bl	80066b4 <EAC_GetRestartState>
 8001400:	2800      	cmp	r0, #0
 8001402:	d0e7      	beq.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      EAC_SetRestartState( &EncAlignCtrlM1,false );
 8001404:	4874      	ldr	r0, [pc, #464]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001406:	2100      	movs	r1, #0
 8001408:	f005 f952 	bl	80066b0 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_START );
 800140c:	2103      	movs	r1, #3
 800140e:	4870      	ldr	r0, [pc, #448]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001410:	f006 fece 	bl	80081b0 <STM_NextState>
 8001414:	e7de      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 8001416:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	f005 ff97 	bl	800734c <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 800141e:	2014      	movs	r0, #20
 8001420:	f7ff ff8c 	bl	800133c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], ALIGN_CHARGE_BOOT_CAP );
 8001424:	210d      	movs	r1, #13
 8001426:	486a      	ldr	r0, [pc, #424]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001428:	f006 fec2 	bl	80081b0 <STM_NextState>
    break;
 800142c:	e7d2      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( !EAC_Exec( &EncAlignCtrlM1 ) )
 800142e:	486a      	ldr	r0, [pc, #424]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001430:	f005 f924 	bl	800667c <EAC_Exec>
 8001434:	4604      	mov	r4, r0
 8001436:	2800      	cmp	r0, #0
 8001438:	f040 80b4 	bne.w	80015a4 <TSK_MediumFrequencyTaskM1+0x228>
      IqdRef.d = STC_CalcTorqueReference( pSTC[M1] );
 800143c:	4b67      	ldr	r3, [pc, #412]	; (80015dc <TSK_MediumFrequencyTaskM1+0x260>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	f006 fe42 	bl	80080c8 <STC_CalcTorqueReference>
      FOCVars[M1].Iqdref = IqdRef;
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x264>)
 8001446:	821c      	strh	r4, [r3, #16]
 8001448:	8258      	strh	r0, [r3, #18]
 800144a:	e7c3      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( EAC_IsAligned( &EncAlignCtrlM1 ) == false )
 800144c:	4862      	ldr	r0, [pc, #392]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 800144e:	f005 f92d 	bl	80066ac <EAC_IsAligned>
 8001452:	2800      	cmp	r0, #0
 8001454:	f040 809a 	bne.w	800158c <TSK_MediumFrequencyTaskM1+0x210>
      EAC_SetRestartState( &EncAlignCtrlM1, true );
 8001458:	485f      	ldr	r0, [pc, #380]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 800145a:	2101      	movs	r1, #1
 800145c:	f005 f928 	bl	80066b0 <EAC_SetRestartState>
      STM_NextState( &STM[M1], IDLE_ALIGNMENT );
 8001460:	2101      	movs	r1, #1
 8001462:	485b      	ldr	r0, [pc, #364]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001464:	f006 fea4 	bl	80081b0 <STM_NextState>
      break;
 8001468:	e7b4      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
        TC_EncAlignmentCommand(pPosCtrl[M1]);
 800146a:	4b5e      	ldr	r3, [pc, #376]	; (80015e4 <TSK_MediumFrequencyTaskM1+0x268>)
 800146c:	6818      	ldr	r0, [r3, #0]
 800146e:	f007 f8dd 	bl	800862c <TC_EncAlignmentCommand>
        STM_NextState( &STM[M1], START_RUN ); /* only for sensored*/
 8001472:	2105      	movs	r1, #5
 8001474:	4856      	ldr	r0, [pc, #344]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001476:	f006 fe9b 	bl	80081b0 <STM_NextState>
    break;
 800147a:	e7ab      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
	  FOC_InitAdditionalMethods(M1);
 800147c:	2000      	movs	r0, #0
 800147e:	f7ff ff45 	bl	800130c <FOC_InitAdditionalMethods>
      FOC_CalcCurrRef( M1 );
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff ff44 	bl	8001310 <FOC_CalcCurrRef>
      STM_NextState( &STM[M1], RUN );
 8001488:	2106      	movs	r1, #6
 800148a:	4851      	ldr	r0, [pc, #324]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 800148c:	f006 fe90 	bl	80081b0 <STM_NextState>
    STC_ForceSpeedReferenceToCurrentSpeed( pSTC[M1] ); /* Init the reference speed to current speed */
 8001490:	4b52      	ldr	r3, [pc, #328]	; (80015dc <TSK_MediumFrequencyTaskM1+0x260>)
 8001492:	6818      	ldr	r0, [r3, #0]
 8001494:	f006 fe62 	bl	800815c <STC_ForceSpeedReferenceToCurrentSpeed>
    MCI_ExecBufferedCommands( oMCInterface[M1] ); /* Exec the speed ramp after changing of the speed sensor */
 8001498:	4b53      	ldr	r3, [pc, #332]	; (80015e8 <TSK_MediumFrequencyTaskM1+0x26c>)
 800149a:	6818      	ldr	r0, [r3, #0]
 800149c:	f7ff fc64 	bl	8000d68 <MCI_ExecBufferedCommands>
    break;
 80014a0:	e798      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    TC_PositionRegulation(pPosCtrl[M1]);
 80014a2:	4b50      	ldr	r3, [pc, #320]	; (80015e4 <TSK_MediumFrequencyTaskM1+0x268>)
 80014a4:	6818      	ldr	r0, [r3, #0]
 80014a6:	f007 f87f 	bl	80085a8 <TC_PositionRegulation>
    MCI_ExecBufferedCommands( oMCInterface[M1] );
 80014aa:	4b4f      	ldr	r3, [pc, #316]	; (80015e8 <TSK_MediumFrequencyTaskM1+0x26c>)
 80014ac:	6818      	ldr	r0, [r3, #0]
 80014ae:	f7ff fc5b 	bl	8000d68 <MCI_ExecBufferedCommands>
    FOC_CalcCurrRef( M1 );
 80014b2:	2000      	movs	r0, #0
 80014b4:	f7ff ff2c 	bl	8001310 <FOC_CalcCurrRef>
    break;
 80014b8:	e78c      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80014ba:	4b46      	ldr	r3, [pc, #280]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 80014bc:	6818      	ldr	r0, [r3, #0]
 80014be:	f005 ffbb 	bl	8007438 <R3_2_SwitchOffPWM>
    FOC_Clear( M1 );
 80014c2:	2000      	movs	r0, #0
 80014c4:	f7ff fdc0 	bl	8001048 <FOC_Clear>
    MPM_Clear( (MotorPowMeas_Handle_t*) pMPM[M1] );
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	f005 fa7b 	bl	80069c4 <MPM_Clear>
    TSK_SetStopPermanencyTimeM1( STOPPERMANENCY_TICKS );
 80014ce:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014d2:	f7ff ff43 	bl	800135c <TSK_SetStopPermanencyTimeM1>
    STM_NextState( &STM[M1], STOP );
 80014d6:	2108      	movs	r1, #8
 80014d8:	483d      	ldr	r0, [pc, #244]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 80014da:	f006 fe69 	bl	80081b0 <STM_NextState>
    break;
 80014de:	e779      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_StopPermanencyTimeHasElapsedM1() )
 80014e0:	f7ff ff42 	bl	8001368 <TSK_StopPermanencyTimeHasElapsedM1>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	f43f af75 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], STOP_IDLE );
 80014ea:	2109      	movs	r1, #9
 80014ec:	4838      	ldr	r0, [pc, #224]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 80014ee:	f006 fe5f 	bl	80081b0 <STM_NextState>
 80014f2:	e76f      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 80014f4:	f7ff ff28 	bl	8001348 <TSK_ChargeBootCapDelayHasElapsedM1>
 80014f8:	2800      	cmp	r0, #0
 80014fa:	f43f af6b 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 80014fe:	4b35      	ldr	r3, [pc, #212]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 8001500:	2100      	movs	r1, #0
 8001502:	6818      	ldr	r0, [r3, #0]
 8001504:	f005 fd3c 	bl	8006f80 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],ALIGN_OFFSET_CALIB);
 8001508:	210e      	movs	r1, #14
 800150a:	4831      	ldr	r0, [pc, #196]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 800150c:	f006 fe50 	bl	80081b0 <STM_NextState>
 8001510:	e760      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001512:	4b30      	ldr	r3, [pc, #192]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 8001514:	2101      	movs	r1, #1
 8001516:	6818      	ldr	r0, [r3, #0]
 8001518:	f005 fd32 	bl	8006f80 <PWMC_CurrentReadingCalibr>
 800151c:	2800      	cmp	r0, #0
 800151e:	f43f af59 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], ALIGN_CLEAR );
 8001522:	210f      	movs	r1, #15
 8001524:	482a      	ldr	r0, [pc, #168]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001526:	f006 fe43 	bl	80081b0 <STM_NextState>
 800152a:	e753      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800152c:	4a2b      	ldr	r2, [pc, #172]	; (80015dc <TSK_MediumFrequencyTaskM1+0x260>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 800152e:	4b2c      	ldr	r3, [pc, #176]	; (80015e0 <TSK_MediumFrequencyTaskM1+0x264>)
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001530:	6810      	ldr	r0, [r2, #0]
 8001532:	492e      	ldr	r1, [pc, #184]	; (80015ec <TSK_MediumFrequencyTaskM1+0x270>)
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001534:	2201      	movs	r2, #1
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800153a:	f006 fd59 	bl	8007ff0 <STC_SetSpeedSensor>
    EAC_StartAlignment( &EncAlignCtrlM1 );
 800153e:	4826      	ldr	r0, [pc, #152]	; (80015d8 <TSK_MediumFrequencyTaskM1+0x25c>)
 8001540:	f005 f874 	bl	800662c <EAC_StartAlignment>
    if ( STM_NextState( &STM[M1], ALIGNMENT ) == true )
 8001544:	4822      	ldr	r0, [pc, #136]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001546:	2102      	movs	r1, #2
 8001548:	f006 fe32 	bl	80081b0 <STM_NextState>
 800154c:	2800      	cmp	r0, #0
 800154e:	f43f af41 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
 8001552:	e74a      	b.n	80013ea <TSK_MediumFrequencyTaskM1+0x6e>
    if ( TSK_ChargeBootCapDelayHasElapsedM1() )
 8001554:	f7ff fef8 	bl	8001348 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001558:	2800      	cmp	r0, #0
 800155a:	f43f af3b 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_START );
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 8001560:	2100      	movs	r1, #0
 8001562:	6818      	ldr	r0, [r3, #0]
 8001564:	f005 fd0c 	bl	8006f80 <PWMC_CurrentReadingCalibr>
      STM_NextState(&STM[M1],OFFSET_CALIB);
 8001568:	2111      	movs	r1, #17
 800156a:	4819      	ldr	r0, [pc, #100]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 800156c:	f006 fe20 	bl	80081b0 <STM_NextState>
 8001570:	e730      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    if ( PWMC_CurrentReadingCalibr( pwmcHandle[M1], CRC_EXEC ) )
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 8001574:	2101      	movs	r1, #1
 8001576:	6818      	ldr	r0, [r3, #0]
 8001578:	f005 fd02 	bl	8006f80 <PWMC_CurrentReadingCalibr>
 800157c:	2800      	cmp	r0, #0
 800157e:	f43f af29 	beq.w	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      STM_NextState( &STM[M1], CLEAR );
 8001582:	2112      	movs	r1, #18
 8001584:	4812      	ldr	r0, [pc, #72]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 8001586:	f006 fe13 	bl	80081b0 <STM_NextState>
 800158a:	e723      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
    R3_2_TurnOnLowSides( pwmcHandle[M1] );
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
 800158e:	6818      	ldr	r0, [r3, #0]
 8001590:	f005 fedc 	bl	800734c <R3_2_TurnOnLowSides>
    TSK_SetChargeBootCapDelayM1( CHARGE_BOOT_CAP_TICKS );
 8001594:	2014      	movs	r0, #20
 8001596:	f7ff fed1 	bl	800133c <TSK_SetChargeBootCapDelayM1>
    STM_NextState( &STM[M1], CHARGE_BOOT_CAP );
 800159a:	2110      	movs	r1, #16
 800159c:	480c      	ldr	r0, [pc, #48]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 800159e:	f006 fe07 	bl	80081b0 <STM_NextState>
    break;
 80015a2:	e717      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80015a4:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <TSK_MediumFrequencyTaskM1+0x258>)
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 80015a6:	4c0d      	ldr	r4, [pc, #52]	; (80015dc <TSK_MediumFrequencyTaskM1+0x260>)
      R3_2_SwitchOffPWM( pwmcHandle[M1] );
 80015a8:	6818      	ldr	r0, [r3, #0]
 80015aa:	f005 ff45 	bl	8007438 <R3_2_SwitchOffPWM>
      STC_SetControlMode( pSTC[M1], STC_SPEED_MODE );
 80015ae:	6820      	ldr	r0, [r4, #0]
 80015b0:	2101      	movs	r1, #1
 80015b2:	f006 fd39 	bl	8008028 <STC_SetControlMode>
      STC_SetSpeedSensor( pSTC[M1], &ENCODER_M1._Super );
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	4904      	ldr	r1, [pc, #16]	; (80015cc <TSK_MediumFrequencyTaskM1+0x250>)
 80015ba:	f006 fd19 	bl	8007ff0 <STC_SetSpeedSensor>
      STM_NextState( &STM[M1], ANY_STOP );
 80015be:	2107      	movs	r1, #7
 80015c0:	4803      	ldr	r0, [pc, #12]	; (80015d0 <TSK_MediumFrequencyTaskM1+0x254>)
 80015c2:	f006 fdf5 	bl	80081b0 <STM_NextState>
 80015c6:	e705      	b.n	80013d4 <TSK_MediumFrequencyTaskM1+0x58>
 80015c8:	200009ac 	.word	0x200009ac
 80015cc:	200000f0 	.word	0x200000f0
 80015d0:	2000098c 	.word	0x2000098c
 80015d4:	200009d0 	.word	0x200009d0
 80015d8:	2000016c 	.word	0x2000016c
 80015dc:	200009c8 	.word	0x200009c8
 80015e0:	200008f0 	.word	0x200008f0
 80015e4:	200009c0 	.word	0x200009c0
 80015e8:	2000099c 	.word	0x2000099c
 80015ec:	20000494 	.word	0x20000494

080015f0 <MC_Scheduler>:
{
 80015f0:	b538      	push	{r3, r4, r5, lr}
  if (bMCBootCompleted == 1)
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MC_Scheduler+0x48>)
 80015f4:	781c      	ldrb	r4, [r3, #0]
 80015f6:	2c01      	cmp	r4, #1
 80015f8:	d000      	beq.n	80015fc <MC_Scheduler+0xc>
}
 80015fa:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 80015fc:	4d0f      	ldr	r5, [pc, #60]	; (800163c <MC_Scheduler+0x4c>)
 80015fe:	882b      	ldrh	r3, [r5, #0]
 8001600:	b29b      	uxth	r3, r3
 8001602:	b1ab      	cbz	r3, 8001630 <MC_Scheduler+0x40>
      hMFTaskCounterM1--;
 8001604:	882b      	ldrh	r3, [r5, #0]
 8001606:	3b01      	subs	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0u)
 800160c:	4a0c      	ldr	r2, [pc, #48]	; (8001640 <MC_Scheduler+0x50>)
 800160e:	8813      	ldrh	r3, [r2, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	b11b      	cbz	r3, 800161c <MC_Scheduler+0x2c>
      hBootCapDelayCounterM1--;
 8001614:	8813      	ldrh	r3, [r2, #0]
 8001616:	3b01      	subs	r3, #1
 8001618:	b29b      	uxth	r3, r3
 800161a:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0u)
 800161c:	4a09      	ldr	r2, [pc, #36]	; (8001644 <MC_Scheduler+0x54>)
 800161e:	8813      	ldrh	r3, [r2, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d0e9      	beq.n	80015fa <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001626:	8813      	ldrh	r3, [r2, #0]
 8001628:	3b01      	subs	r3, #1
 800162a:	b29b      	uxth	r3, r3
 800162c:	8013      	strh	r3, [r2, #0]
}
 800162e:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001630:	f7ff fea4 	bl	800137c <TSK_MediumFrequencyTaskM1>
      hMFTaskCounterM1 = MF_TASK_OCCURENCE_TICKS;
 8001634:	802c      	strh	r4, [r5, #0]
 8001636:	e7e9      	b.n	800160c <MC_Scheduler+0x1c>
 8001638:	20000992 	.word	0x20000992
 800163c:	20000996 	.word	0x20000996
 8001640:	20000994 	.word	0x20000994
 8001644:	20000998 	.word	0x20000998

08001648 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE END HighFrequencyTask 0 */

  uint8_t bMotorNbr = 0;
  uint16_t hFOCreturn;

  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 800164c:	4832      	ldr	r0, [pc, #200]	; (8001718 <TSK_HighFrequencyTask+0xd0>)
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;

  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800164e:	4f33      	ldr	r7, [pc, #204]	; (800171c <TSK_HighFrequencyTask+0xd4>)
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1],
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001650:	4c33      	ldr	r4, [pc, #204]	; (8001720 <TSK_HighFrequencyTask+0xd8>)
{
 8001652:	b086      	sub	sp, #24
  ENC_CalcAngle(&ENCODER_M1);   /* if not sensorless then 2nd parameter is MC_NULL*/
 8001654:	f005 f878 	bl	8006748 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001658:	4b32      	ldr	r3, [pc, #200]	; (8001724 <TSK_HighFrequencyTask+0xdc>)
 800165a:	6818      	ldr	r0, [r3, #0]
 800165c:	f006 fcca 	bl	8007ff4 <STC_GetSpeedSensor>
 8001660:	4605      	mov	r5, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001662:	f006 fc61 	bl	8007f28 <SPD_GetElAngle>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001666:	a903      	add	r1, sp, #12
  hElAngle = SPD_GetElAngle(speedHandle);
 8001668:	4606      	mov	r6, r0
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f005 fb4e 	bl	8006d0c <PWMC_GetPhaseCurrents>
  RCM_ReadOngoingConv();
 8001670:	f000 ffb4 	bl	80025dc <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8001674:	f000 ff5c 	bl	8002530 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8001678:	9803      	ldr	r0, [sp, #12]
 800167a:	f7ff fc3f 	bl	8000efc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800167e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8001680:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001682:	f7ff fc7d 	bl	8000f80 <MCM_Park>
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001686:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800168a:	9001      	str	r0, [sp, #4]
            (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800168c:	b203      	sxth	r3, r0
  Vqd.q = PI_Controller(pPIDIq[M1],
 800168e:	1ac9      	subs	r1, r1, r3
 8001690:	4b25      	ldr	r3, [pc, #148]	; (8001728 <TSK_HighFrequencyTask+0xe0>)
 8001692:	6818      	ldr	r0, [r3, #0]
 8001694:	f005 fa3c 	bl	8006b10 <PI_Controller>

  Vqd.d = PI_Controller(pPIDId[M1],
            (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001698:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800169c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.d = PI_Controller(pPIDId[M1],
 80016a0:	1ac9      	subs	r1, r1, r3
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <TSK_HighFrequencyTask+0xe4>)
  Vqd.q = PI_Controller(pPIDIq[M1],
 80016a4:	4680      	mov	r8, r0
  Vqd.d = PI_Controller(pPIDId[M1],
 80016a6:	6818      	ldr	r0, [r3, #0]
 80016a8:	f005 fa32 	bl	8006b10 <PI_Controller>

  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80016ac:	4b20      	ldr	r3, [pc, #128]	; (8001730 <TSK_HighFrequencyTask+0xe8>)
 80016ae:	f8ad 8008 	strh.w	r8, [sp, #8]
 80016b2:	f8ad 000a 	strh.w	r0, [sp, #10]
 80016b6:	9902      	ldr	r1, [sp, #8]
 80016b8:	6818      	ldr	r0, [r3, #0]
 80016ba:	f004 ff6d 	bl	8006598 <Circle_Limitation>
 80016be:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80016c0:	4628      	mov	r0, r5
  Vqd = Circle_Limitation(pCLM[M1], Vqd);
 80016c2:	fa0f f883 	sxth.w	r8, r3
 80016c6:	141d      	asrs	r5, r3, #16
 80016c8:	9302      	str	r3, [sp, #8]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 80016ca:	f006 fc37 	bl	8007f3c <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80016ce:	4631      	mov	r1, r6
 80016d0:	9802      	ldr	r0, [sp, #8]
 80016d2:	f7ff fc99 	bl	8001008 <MCM_Rev_Park>
 80016d6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80016d8:	6838      	ldr	r0, [r7, #0]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80016da:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80016dc:	f005 fb18 	bl	8006d10 <PWMC_SetPhaseVoltage>
  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80016e0:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80016e2:	9a04      	ldr	r2, [sp, #16]
  FOCVars[M1].Iab = Iab;
 80016e4:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80016e6:	4601      	mov	r1, r0
  FOCVars[M1].Iqd = Iqd;
 80016e8:	9b01      	ldr	r3, [sp, #4]
  FOCVars[M1].Valphabeta = Valphabeta;
 80016ea:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80016ec:	f8a4 8016 	strh.w	r8, [r4, #22]
  if(hFOCreturn == MC_FOC_DURATION)
 80016f0:	2901      	cmp	r1, #1
  FOCVars[M1].Vqd = Vqd;
 80016f2:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80016f4:	6062      	str	r2, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80016f6:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 80016f8:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80016fc:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_FOC_DURATION)
 80016fe:	d003      	beq.n	8001708 <TSK_HighFrequencyTask+0xc0>
}
 8001700:	2000      	movs	r0, #0
 8001702:	b006      	add	sp, #24
 8001704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    STM_FaultProcessing(&STM[M1], MC_FOC_DURATION, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	480a      	ldr	r0, [pc, #40]	; (8001734 <TSK_HighFrequencyTask+0xec>)
 800170c:	f006 fd34 	bl	8008178 <STM_FaultProcessing>
}
 8001710:	2000      	movs	r0, #0
 8001712:	b006      	add	sp, #24
 8001714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001718:	200000f0 	.word	0x200000f0
 800171c:	200009d0 	.word	0x200009d0
 8001720:	200008f0 	.word	0x200008f0
 8001724:	200009c8 	.word	0x200009c8
 8001728:	200009b4 	.word	0x200009b4
 800172c:	200009b0 	.word	0x200009b0
 8001730:	200009a4 	.word	0x200009a4
 8001734:	2000098c 	.word	0x2000098c

08001738 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */

  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 800173a:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <TSK_SafetyTask_PWMOFF+0x90>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800173c:	4e23      	ldr	r6, [pc, #140]	; (80017cc <TSK_SafetyTask_PWMOFF+0x94>)
{
 800173e:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001740:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001744:	f005 f992 	bl	8006a6c <NTC_CalcAvTemp>
 8001748:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800174a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800174e:	f005 fc41 	bl	8006fd4 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001752:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001756:	4328      	orrs	r0, r5
 8001758:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(bMotor == M1)
 800175a:	b36c      	cbz	r4, 80017b8 <TSK_SafetyTask_PWMOFF+0x80>
  {
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
  }

  STM_FaultProcessing(&STM[bMotor], CodeReturn, ~CodeReturn); /* Update the STM according error code */
 800175c:	4f1c      	ldr	r7, [pc, #112]	; (80017d0 <TSK_SafetyTask_PWMOFF+0x98>)
 800175e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8001762:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8001766:	43ea      	mvns	r2, r5
 8001768:	b292      	uxth	r2, r2
 800176a:	4629      	mov	r1, r5
 800176c:	4638      	mov	r0, r7
 800176e:	f006 fd03 	bl	8008178 <STM_FaultProcessing>
  switch (STM_GetState(&STM[bMotor])) /* Acts on PWM outputs in case of faults */
 8001772:	4638      	mov	r0, r7
 8001774:	f006 fd90 	bl	8008298 <STM_GetState>
 8001778:	280a      	cmp	r0, #10
 800177a:	d002      	beq.n	8001782 <TSK_SafetyTask_PWMOFF+0x4a>
 800177c:	280b      	cmp	r0, #11
 800177e:	d015      	beq.n	80017ac <TSK_SafetyTask_PWMOFF+0x74>
    break;
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (pEAC[bMotor] != MC_NULL)
 8001782:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <TSK_SafetyTask_PWMOFF+0x9c>)
 8001784:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8001788:	b110      	cbz	r0, 8001790 <TSK_SafetyTask_PWMOFF+0x58>
      EAC_SetRestartState( pEAC[bMotor], false );
 800178a:	2100      	movs	r1, #0
 800178c:	f004 ff90 	bl	80066b0 <EAC_SetRestartState>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001790:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001794:	f005 fbf2 	bl	8006f7c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001798:	4620      	mov	r0, r4
 800179a:	f7ff fc55 	bl	8001048 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 800179e:	4b0e      	ldr	r3, [pc, #56]	; (80017d8 <TSK_SafetyTask_PWMOFF+0xa0>)
 80017a0:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 80017a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]);
 80017a8:	f005 b90c 	b.w	80069c4 <MPM_Clear>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017ac:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
}
 80017b0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80017b4:	f005 bbe2 	b.w	8006f7c <PWMC_SwitchOffPWM>
    CodeReturn |=  errMask[bMotor] &RVBS_CalcAvVbus(pBusSensorM1);
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <TSK_SafetyTask_PWMOFF+0xa4>)
 80017ba:	6818      	ldr	r0, [r3, #0]
 80017bc:	f006 fb4a 	bl	8007e54 <RVBS_CalcAvVbus>
 80017c0:	f000 000e 	and.w	r0, r0, #14
 80017c4:	4305      	orrs	r5, r0
 80017c6:	e7c9      	b.n	800175c <TSK_SafetyTask_PWMOFF+0x24>
 80017c8:	200009cc 	.word	0x200009cc
 80017cc:	200009d0 	.word	0x200009d0
 80017d0:	2000098c 	.word	0x2000098c
 80017d4:	200009a8 	.word	0x200009a8
 80017d8:	200009ac 	.word	0x200009ac
 80017dc:	200009a0 	.word	0x200009a0

080017e0 <TSK_SafetyTask>:
{
 80017e0:	b508      	push	{r3, lr}
  if (bMCBootCompleted == 1)
 80017e2:	4b06      	ldr	r3, [pc, #24]	; (80017fc <TSK_SafetyTask+0x1c>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	2b01      	cmp	r3, #1
 80017e8:	d000      	beq.n	80017ec <TSK_SafetyTask+0xc>
}
 80017ea:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff ffa3 	bl	8001738 <TSK_SafetyTask_PWMOFF>
}
 80017f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv ();
 80017f6:	f000 be6b 	b.w	80024d0 <RCM_ExecUserConv>
 80017fa:	bf00      	nop
 80017fc:	20000992 	.word	0x20000992

08001800 <MC_RunMotorControlTasks>:
{
 8001800:	b508      	push	{r3, lr}
  if ( bMCBootCompleted ) {
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <MC_RunMotorControlTasks+0x1c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	b903      	cbnz	r3, 800180a <MC_RunMotorControlTasks+0xa>
}
 8001808:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800180a:	f7ff fef1 	bl	80015f0 <MC_Scheduler>
    TSK_SafetyTask();
 800180e:	f7ff ffe7 	bl	80017e0 <TSK_SafetyTask>
}
 8001812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    UI_Scheduler();
 8001816:	f001 ba5b 	b.w	8002cd0 <UI_Scheduler>
 800181a:	bf00      	nop
 800181c:	20000992 	.word	0x20000992

08001820 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001820:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */

  R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8001822:	4b05      	ldr	r3, [pc, #20]	; (8001838 <TSK_HardwareFaultTask+0x18>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	f005 fe07 	bl	8007438 <R3_2_SwitchOffPWM>
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800182a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  STM_FaultProcessing(&STM[M1], MC_SW_ERROR, 0);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <TSK_HardwareFaultTask+0x1c>)
 8001830:	2200      	movs	r2, #0
 8001832:	2180      	movs	r1, #128	; 0x80
 8001834:	f006 bca0 	b.w	8008178 <STM_FaultProcessing>
 8001838:	200009d0 	.word	0x200009d0
 800183c:	2000098c 	.word	0x2000098c

08001840 <mc_lock_pins>:
 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001840:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <mc_lock_pins+0x12c>)
 8001846:	4c4a      	ldr	r4, [pc, #296]	; (8001970 <mc_lock_pins+0x130>)
 8001848:	f04f 1501 	mov.w	r5, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 800184c:	f04f 0e01 	mov.w	lr, #1
 8001850:	b090      	sub	sp, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001852:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001854:	f8c2 e01c 	str.w	lr, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001858:	61d5      	str	r5, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 800185a:	69d3      	ldr	r3, [r2, #28]
 800185c:	930f      	str	r3, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800185e:	2104      	movs	r1, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001860:	4b44      	ldr	r3, [pc, #272]	; (8001974 <mc_lock_pins+0x134>)
  (void) temp;
 8001862:	980f      	ldr	r0, [sp, #60]	; 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001864:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001866:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001868:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800186a:	69d1      	ldr	r1, [r2, #28]
 800186c:	910e      	str	r1, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800186e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001872:	f04f 0c02 	mov.w	ip, #2
  (void) temp;
 8001876:	990e      	ldr	r1, [sp, #56]	; 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001878:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800187a:	f8c3 c01c 	str.w	ip, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800187e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001880:	69d9      	ldr	r1, [r3, #28]
 8001882:	910d      	str	r1, [sp, #52]	; 0x34
  (void) temp;
 8001884:	990d      	ldr	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001886:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800188a:	f44f 31c0 	mov.w	r1, #98304	; 0x18000
 800188e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001890:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001892:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001894:	69d9      	ldr	r1, [r3, #28]
 8001896:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8001898:	990c      	ldr	r1, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800189a:	4937      	ldr	r1, [pc, #220]	; (8001978 <mc_lock_pins+0x138>)
 800189c:	4837      	ldr	r0, [pc, #220]	; (800197c <mc_lock_pins+0x13c>)
 800189e:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018a0:	2608      	movs	r6, #8
 80018a2:	61ce      	str	r6, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018a4:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018a6:	69c8      	ldr	r0, [r1, #28]
 80018a8:	900b      	str	r0, [sp, #44]	; 0x2c
  (void) temp;
 80018aa:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ac:	4834      	ldr	r0, [pc, #208]	; (8001980 <mc_lock_pins+0x140>)
 80018ae:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018b0:	f44f 7680 	mov.w	r6, #256	; 0x100
 80018b4:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018b6:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018b8:	69d8      	ldr	r0, [r3, #28]
 80018ba:	900a      	str	r0, [sp, #40]	; 0x28
  (void) temp;
 80018bc:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018be:	f44f 7600 	mov.w	r6, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018c2:	f44f 3081 	mov.w	r0, #66048	; 0x10200
 80018c6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018c8:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ca:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018cc:	69d8      	ldr	r0, [r3, #28]
 80018ce:	9009      	str	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018d0:	f44f 3684 	mov.w	r6, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018d4:	f44f 6800 	mov.w	r8, #2048	; 0x800
  (void) temp;
 80018d8:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018da:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018dc:	f8c3 801c 	str.w	r8, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018e0:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018e2:	69d8      	ldr	r0, [r3, #28]
 80018e4:	9008      	str	r0, [sp, #32]
  (void) temp;
 80018e6:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018e8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018ec:	f44f 3082 	mov.w	r0, #66560	; 0x10400
 80018f0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80018f2:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80018f4:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80018f6:	f8d3 901c 	ldr.w	r9, [r3, #28]
 80018fa:	f8cd 901c 	str.w	r9, [sp, #28]
  (void) temp;
 80018fe:	f8dd 901c 	ldr.w	r9, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001902:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001906:	f44f 3988 	mov.w	r9, #69632	; 0x11000
 800190a:	f8c2 901c 	str.w	r9, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800190e:	f8c2 a01c 	str.w	sl, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001912:	f8c2 901c 	str.w	r9, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001916:	f8d2 901c 	ldr.w	r9, [r2, #28]
 800191a:	f8cd 9018 	str.w	r9, [sp, #24]
  (void) temp;
 800191e:	f8dd 9018 	ldr.w	r9, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001922:	61c8      	str	r0, [r1, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001924:	61cf      	str	r7, [r1, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001926:	61c8      	str	r0, [r1, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001928:	69c9      	ldr	r1, [r1, #28]
 800192a:	9105      	str	r1, [sp, #20]
  (void) temp;
 800192c:	9905      	ldr	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800192e:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001930:	f8c2 801c 	str.w	r8, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001934:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001936:	69d1      	ldr	r1, [r2, #28]
 8001938:	9104      	str	r1, [sp, #16]
  (void) temp;
 800193a:	9904      	ldr	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800193c:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800193e:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001940:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001942:	69d1      	ldr	r1, [r2, #28]
 8001944:	9103      	str	r1, [sp, #12]
  (void) temp;
 8001946:	9903      	ldr	r1, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001948:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800194a:	f8c3 e01c 	str.w	lr, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800194e:	61dd      	str	r5, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	9302      	str	r3, [sp, #8]
  (void) temp;
 8001954:	9b02      	ldr	r3, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001956:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001958:	f8c2 c01c 	str.w	ip, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800195c:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800195e:	69d3      	ldr	r3, [r2, #28]
 8001960:	9301      	str	r3, [sp, #4]
  (void) temp;
 8001962:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_ENCODER_Z_GPIO_Port, M1_ENCODER_Z_Pin);
LL_GPIO_LockPin(M1_PWM_EN_V_GPIO_Port, M1_PWM_EN_V_Pin);
LL_GPIO_LockPin(M1_PWM_EN_U_GPIO_Port, M1_PWM_EN_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
}
 8001964:	b010      	add	sp, #64	; 0x40
 8001966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800196a:	bf00      	nop
 800196c:	48000800 	.word	0x48000800
 8001970:	00010002 	.word	0x00010002
 8001974:	00010004 	.word	0x00010004
 8001978:	48000400 	.word	0x48000400
 800197c:	00010008 	.word	0x00010008
 8001980:	00010100 	.word	0x00010100

08001984 <MCP_ReceivedFrame>:
* @param  Code code value of frame to send.
* @param  buffer frame data buffer.
* @param  Size size of data frame.
*/
__weak void MCP_ReceivedFrame(MCP_Handle_t *pHandle, uint8_t Code, uint8_t *buffer, uint8_t Size)
{
 8001984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001988:	b08e      	sub	sp, #56	; 0x38
 800198a:	4616      	mov	r6, r2
  bool RequireAck = true;
  bool bNoError = false; // Default is error
 800198c:	2700      	movs	r7, #0
  uint8_t bErrorCode;

  /* Protocol version >3.3 motor selection inside Frame ID */
  uint8_t bMotorSelection = (Code & 0xE0) >> 5; /* Mask: 1110|0000 */
  if (bMotorSelection != 0)
 800198e:	094a      	lsrs	r2, r1, #5
{
 8001990:	460c      	mov	r4, r1
 8001992:	4605      	mov	r5, r0
 8001994:	4698      	mov	r8, r3
  bool bNoError = false; // Default is error
 8001996:	f88d 7011 	strb.w	r7, [sp, #17]
  if (bMotorSelection != 0)
 800199a:	d123      	bne.n	80019e4 <MCP_ReceivedFrame+0x60>
      Code = MC_PROTOCOL_CODE_NONE; /* Error */
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
    }
  }

  switch (Code)
 800199c:	2912      	cmp	r1, #18
 800199e:	d814      	bhi.n	80019ca <MCP_ReceivedFrame+0x46>
 80019a0:	e8df f011 	tbh	[pc, r1, lsl #1]
 80019a4:	027a0016 	.word	0x027a0016
 80019a8:	020400e9 	.word	0x020400e9
 80019ac:	00130013 	.word	0x00130013
 80019b0:	00810057 	.word	0x00810057
 80019b4:	00c70096 	.word	0x00c70096
 80019b8:	023d022c 	.word	0x023d022c
 80019bc:	02c70254 	.word	0x02c70254
 80019c0:	00130013 	.word	0x00130013
 80019c4:	00130013 	.word	0x00130013
 80019c8:	020e      	.short	0x020e
    }
    break;

  default:
    {
      bErrorCode = ERROR_BAD_FRAME_ID;
 80019ca:	2301      	movs	r3, #1
 80019cc:	f88d 3016 	strb.w	r3, [sp, #22]
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
    }
    else
    {
      pHandle->fFcpSend(pHandle->pFCP, ACK_ERROR, &bErrorCode, 1);
 80019d0:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80019d4:	2301      	movs	r3, #1
 80019d6:	f10d 0216 	add.w	r2, sp, #22
 80019da:	21ff      	movs	r1, #255	; 0xff
 80019dc:	47a0      	blx	r4
    }
  }
}
 80019de:	b00e      	add	sp, #56	; 0x38
 80019e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (UI_SetReg(&pHandle->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1))
 80019e4:	3a01      	subs	r2, #1
 80019e6:	4639      	mov	r1, r7
 80019e8:	9203      	str	r2, [sp, #12]
 80019ea:	f001 f9d1 	bl	8002d90 <UI_SetReg>
 80019ee:	b300      	cbz	r0, 8001a32 <MCP_ReceivedFrame+0xae>
      if (pHandle->pDAC)
 80019f0:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
      Code &= 0x1F; /* Mask: 0001|1111 */
 80019f4:	f004 041f 	and.w	r4, r4, #31
      if (pHandle->pDAC)
 80019f8:	b118      	cbz	r0, 8001a02 <MCP_ReceivedFrame+0x7e>
        UI_SetReg(&pHandle->pDAC->_Super, MC_PROTOCOL_REG_TARGET_MOTOR, bMotorSelection - 1);
 80019fa:	9a03      	ldr	r2, [sp, #12]
 80019fc:	4639      	mov	r1, r7
 80019fe:	f001 f9c7 	bl	8002d90 <UI_SetReg>
  switch (Code)
 8001a02:	2c12      	cmp	r4, #18
 8001a04:	f200 82a5 	bhi.w	8001f52 <MCP_ReceivedFrame+0x5ce>
 8001a08:	e8df f014 	tbh	[pc, r4, lsl #1]
 8001a0c:	02460090 	.word	0x02460090
 8001a10:	01d000b5 	.word	0x01d000b5
 8001a14:	02a302a3 	.word	0x02a302a3
 8001a18:	004d0023 	.word	0x004d0023
 8001a1c:	00930062 	.word	0x00930062
 8001a20:	020901f8 	.word	0x020901f8
 8001a24:	02930220 	.word	0x02930220
 8001a28:	02a302a3 	.word	0x02a302a3
 8001a2c:	02a302a3 	.word	0x02a302a3
 8001a30:	01da      	.short	0x01da
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001a32:	230b      	movs	r3, #11
    if (bNoError)
 8001a34:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_MOTOR_SELECTED;
 8001a38:	f88d 3016 	strb.w	r3, [sp, #22]
    if (bNoError)
 8001a3c:	2800      	cmp	r0, #0
 8001a3e:	d0c7      	beq.n	80019d0 <MCP_ReceivedFrame+0x4c>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MC_NULL, 0);
 8001a40:	2300      	movs	r3, #0
 8001a42:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001a46:	461a      	mov	r2, r3
 8001a48:	21f0      	movs	r1, #240	; 0xf0
 8001a4a:	47a0      	blx	r4
}
 8001a4c:	b00e      	add	sp, #56	; 0x38
 8001a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        outBuff[i] = 0;
 8001a52:	ac06      	add	r4, sp, #24
 8001a54:	2100      	movs	r1, #0
 8001a56:	2220      	movs	r2, #32
 8001a58:	4620      	mov	r0, r4
 8001a5a:	f007 f867 	bl	8008b2c <memset>
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a5e:	f8d5 70c0 	ldr.w	r7, [r5, #192]	; 0xc0
 8001a62:	f10d 001a 	add.w	r0, sp, #26
 8001a66:	1e79      	subs	r1, r7, #1
 8001a68:	2300      	movs	r3, #0
 8001a6a:	e004      	b.n	8001a76 <MCP_ReceivedFrame+0xf2>
 8001a6c:	2b1d      	cmp	r3, #29
        outBuff[3+i] = pHandle->s_fwVer[i];
 8001a6e:	f800 2f01 	strb.w	r2, [r0, #1]!
      for (i = 0; (i<29) && (pHandle->s_fwVer[i]!='\t'); i++)
 8001a72:	f000 831a 	beq.w	80020aa <MCP_ReceivedFrame+0x726>
 8001a76:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8001a7a:	2a09      	cmp	r2, #9
 8001a7c:	b2de      	uxtb	r6, r3
 8001a7e:	f103 0301 	add.w	r3, r3, #1
 8001a82:	d1f3      	bne.n	8001a6c <MCP_ReceivedFrame+0xe8>
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a84:	1d72      	adds	r2, r6, #5
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a86:	1df3      	adds	r3, r6, #7
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a88:	3609      	adds	r6, #9
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a8a:	b2d2      	uxtb	r2, r2
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a8c:	b2db      	uxtb	r3, r3
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a8e:	b2f6      	uxtb	r6, r6
      outBuff[0] = pHandle->s_fwVer[i+5];
 8001a90:	5cba      	ldrb	r2, [r7, r2]
 8001a92:	f88d 2018 	strb.w	r2, [sp, #24]
      outBuff[1] = pHandle->s_fwVer[i+7];
 8001a96:	5cfb      	ldrb	r3, [r7, r3]
 8001a98:	f88d 3019 	strb.w	r3, [sp, #25]
      outBuff[2] = pHandle->s_fwVer[i+9];
 8001a9c:	5dbb      	ldrb	r3, [r7, r6]
 8001a9e:	f88d 301a 	strb.w	r3, [sp, #26]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001aa2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001aa4:	e1ea      	b.n	8001e7c <MCP_ReceivedFrame+0x4f8>
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001aa6:	7871      	ldrb	r1, [r6, #1]
 8001aa8:	7833      	ldrb	r3, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001aaa:	7970      	ldrb	r0, [r6, #5]
 8001aac:	7932      	ldrb	r2, [r6, #4]
      int32_t rpm = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001aae:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001ab2:	78b1      	ldrb	r1, [r6, #2]
 8001ab4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001ab8:	78f1      	ldrb	r1, [r6, #3]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001aba:	eb02 2200 	add.w	r2, r2, r0, lsl #8
      bNoError = UI_ExecSpeedRamp(&pHandle->_Super, rpm,duration);
 8001abe:	eb03 6101 	add.w	r1, r3, r1, lsl #24
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	4628      	mov	r0, r5
 8001ac6:	f001 fa8f 	bl	8002fe8 <UI_ExecSpeedRamp>
 8001aca:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001ace:	e7b5      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      UI_GetRevupData(&pHandle->_Super, buffer[0], &Durationms, &FinalMecSpeedUnit, &FinalTorque);
 8001ad0:	f10d 0016 	add.w	r0, sp, #22
 8001ad4:	7831      	ldrb	r1, [r6, #0]
 8001ad6:	9000      	str	r0, [sp, #0]
 8001ad8:	ab05      	add	r3, sp, #20
 8001ada:	f10d 0212 	add.w	r2, sp, #18
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f001 faa8 	bl	8003034 <UI_GetRevupData>
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001ae4:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001ae8:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
      outBuff[6] = (uint8_t)(Durationms);
 8001aec:	f8bd 2012 	ldrh.w	r2, [sp, #18]
      outBuff[4] = (uint8_t)(FinalTorque);
 8001af0:	f88d 101c 	strb.w	r1, [sp, #28]
      rpm = (FinalMecSpeedUnit * _RPM) / SPEED_UNIT;
 8001af4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001af8:	005b      	lsls	r3, r3, #1
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001afa:	1218      	asrs	r0, r3, #8
      outBuff[0] = (uint8_t)(rpm);
 8001afc:	f88d 3018 	strb.w	r3, [sp, #24]
      outBuff[1] = (uint8_t)(rpm >> 8);
 8001b00:	f88d 0019 	strb.w	r0, [sp, #25]
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001b04:	1418      	asrs	r0, r3, #16
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001b06:	161b      	asrs	r3, r3, #24
      outBuff[2] = (uint8_t)(rpm >> 16);
 8001b08:	f88d 001a 	strb.w	r0, [sp, #26]
      outBuff[3] = (uint8_t)(rpm >> 24);
 8001b0c:	f88d 301b 	strb.w	r3, [sp, #27]
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001b10:	1208      	asrs	r0, r1, #8
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001b12:	0a13      	lsrs	r3, r2, #8
      outBuff[5] = (uint8_t)(FinalTorque >> 8);
 8001b14:	f88d 001d 	strb.w	r0, [sp, #29]
      outBuff[6] = (uint8_t)(Durationms);
 8001b18:	f88d 201e 	strb.w	r2, [sp, #30]
      outBuff[7] = (uint8_t)(Durationms >> 8);
 8001b1c:	f88d 301f 	strb.w	r3, [sp, #31]
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 8 );
 8001b20:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8001b22:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001b24:	2308      	movs	r3, #8
 8001b26:	aa06      	add	r2, sp, #24
 8001b28:	21f0      	movs	r1, #240	; 0xf0
 8001b2a:	47a0      	blx	r4
    if (bNoError)
 8001b2c:	f89d 0011 	ldrb.w	r0, [sp, #17]
 8001b30:	e784      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b32:	78b1      	ldrb	r1, [r6, #2]
 8001b34:	7873      	ldrb	r3, [r6, #1]
 8001b36:	78f2      	ldrb	r2, [r6, #3]
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b38:	7970      	ldrb	r0, [r6, #5]
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b3a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001b3e:	7931      	ldrb	r1, [r6, #4]
 8001b40:	eb03 4302 	add.w	r3, r3, r2, lsl #16
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b44:	4ad2      	ldr	r2, [pc, #840]	; (8001e90 <MCP_ReceivedFrame+0x50c>)
      rpm = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001b46:	eb03 6301 	add.w	r3, r3, r1, lsl #24
      hFinalMecSpeedUnit = (rpm * SPEED_UNIT ) / _RPM ;
 8001b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b4e:	eba2 73e3 	sub.w	r3, r2, r3, asr #31
      hDurationms = buffer[7] + (buffer[8] << 8);
 8001b52:	7a31      	ldrb	r1, [r6, #8]
 8001b54:	79f2      	ldrb	r2, [r6, #7]
 8001b56:	eb02 2201 	add.w	r2, r2, r1, lsl #8
      hFinalTorque = buffer[5] + (buffer[6] << 8);
 8001b5a:	79b1      	ldrb	r1, [r6, #6]
 8001b5c:	eb00 2001 	add.w	r0, r0, r1, lsl #8
      bNoError = UI_SetRevupData( &pHandle->_Super, bStage, hDurationms, hFinalMecSpeedUnit, hFinalTorque );
 8001b60:	b200      	sxth	r0, r0
 8001b62:	7831      	ldrb	r1, [r6, #0]
 8001b64:	9000      	str	r0, [sp, #0]
 8001b66:	b21b      	sxth	r3, r3
 8001b68:	b292      	uxth	r2, r2
 8001b6a:	4628      	mov	r0, r5
 8001b6c:	f001 fa80 	bl	8003070 <UI_SetRevupData>
 8001b70:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001b74:	e762      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001b76:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_GET_WRITE_ONLY;
 8001b78:	2303      	movs	r3, #3
 8001b7a:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001b7e:	2988      	cmp	r1, #136	; 0x88
 8001b80:	d8d4      	bhi.n	8001b2c <MCP_ReceivedFrame+0x1a8>
 8001b82:	a301      	add	r3, pc, #4	; (adr r3, 8001b88 <MCP_ReceivedFrame+0x204>)
 8001b84:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8001b88:	08001fe7 	.word	0x08001fe7
 8001b8c:	08001fa3 	.word	0x08001fa3
 8001b90:	08001fe7 	.word	0x08001fe7
 8001b94:	08001fe7 	.word	0x08001fe7
 8001b98:	08001fa3 	.word	0x08001fa3
 8001b9c:	08001f5f 	.word	0x08001f5f
 8001ba0:	08001f5f 	.word	0x08001f5f
 8001ba4:	08001f5f 	.word	0x08001f5f
 8001ba8:	08001f5f 	.word	0x08001f5f
 8001bac:	08001f5f 	.word	0x08001f5f
 8001bb0:	08001f5f 	.word	0x08001f5f
 8001bb4:	08001f5f 	.word	0x08001f5f
 8001bb8:	08001f5f 	.word	0x08001f5f
 8001bbc:	08001f5f 	.word	0x08001f5f
 8001bc0:	08001f5f 	.word	0x08001f5f
 8001bc4:	08001f5f 	.word	0x08001f5f
 8001bc8:	08001f5f 	.word	0x08001f5f
 8001bcc:	08001f5f 	.word	0x08001f5f
 8001bd0:	08001f5f 	.word	0x08001f5f
 8001bd4:	08001f5f 	.word	0x08001f5f
 8001bd8:	08001f5f 	.word	0x08001f5f
 8001bdc:	08001f5f 	.word	0x08001f5f
 8001be0:	08001f5f 	.word	0x08001f5f
 8001be4:	08001f5f 	.word	0x08001f5f
 8001be8:	08001f5f 	.word	0x08001f5f
 8001bec:	08001f5f 	.word	0x08001f5f
 8001bf0:	08001f5f 	.word	0x08001f5f
 8001bf4:	08001f5f 	.word	0x08001f5f
 8001bf8:	08002087 	.word	0x08002087
 8001bfc:	0800205f 	.word	0x0800205f
 8001c00:	08001fa3 	.word	0x08001fa3
 8001c04:	08001f5f 	.word	0x08001f5f
 8001c08:	08001f5f 	.word	0x08001f5f
 8001c0c:	08001f5f 	.word	0x08001f5f
 8001c10:	08001fe7 	.word	0x08001fe7
 8001c14:	08001b2d 	.word	0x08001b2d
 8001c18:	08001b2d 	.word	0x08001b2d
 8001c1c:	08001b2d 	.word	0x08001b2d
 8001c20:	08001b2d 	.word	0x08001b2d
 8001c24:	08001b2d 	.word	0x08001b2d
 8001c28:	08001b2d 	.word	0x08001b2d
 8001c2c:	08001b2d 	.word	0x08001b2d
 8001c30:	08001b2d 	.word	0x08001b2d
 8001c34:	08001b2d 	.word	0x08001b2d
 8001c38:	08001b2d 	.word	0x08001b2d
 8001c3c:	08001b2d 	.word	0x08001b2d
 8001c40:	08001b2d 	.word	0x08001b2d
 8001c44:	08001b2d 	.word	0x08001b2d
 8001c48:	08001b2d 	.word	0x08001b2d
 8001c4c:	08001b2d 	.word	0x08001b2d
 8001c50:	08001b2d 	.word	0x08001b2d
 8001c54:	08001b2d 	.word	0x08001b2d
 8001c58:	08001b2d 	.word	0x08001b2d
 8001c5c:	08001b2d 	.word	0x08001b2d
 8001c60:	08001b2d 	.word	0x08001b2d
 8001c64:	08001b2d 	.word	0x08001b2d
 8001c68:	08001b2d 	.word	0x08001b2d
 8001c6c:	08001b2d 	.word	0x08001b2d
 8001c70:	08001b2d 	.word	0x08001b2d
 8001c74:	08001b2d 	.word	0x08001b2d
 8001c78:	08001b2d 	.word	0x08001b2d
 8001c7c:	08001b2d 	.word	0x08001b2d
 8001c80:	08001b2d 	.word	0x08001b2d
 8001c84:	08001b2d 	.word	0x08001b2d
 8001c88:	08001b2d 	.word	0x08001b2d
 8001c8c:	08001f5f 	.word	0x08001f5f
 8001c90:	08001b2d 	.word	0x08001b2d
 8001c94:	08001b2d 	.word	0x08001b2d
 8001c98:	08001b2d 	.word	0x08001b2d
 8001c9c:	08001b2d 	.word	0x08001b2d
 8001ca0:	08001fa3 	.word	0x08001fa3
 8001ca4:	08001fa3 	.word	0x08001fa3
 8001ca8:	08001fa3 	.word	0x08001fa3
 8001cac:	08001f5f 	.word	0x08001f5f
 8001cb0:	08001f5f 	.word	0x08001f5f
 8001cb4:	08001f5f 	.word	0x08001f5f
 8001cb8:	08001f5f 	.word	0x08001f5f
 8001cbc:	08001fe7 	.word	0x08001fe7
 8001cc0:	08001fa3 	.word	0x08001fa3
 8001cc4:	08001f5f 	.word	0x08001f5f
 8001cc8:	08001f5f 	.word	0x08001f5f
 8001ccc:	08001f5f 	.word	0x08001f5f
 8001cd0:	08001f5f 	.word	0x08001f5f
 8001cd4:	08001f5f 	.word	0x08001f5f
 8001cd8:	08001f5f 	.word	0x08001f5f
 8001cdc:	08001f5f 	.word	0x08001f5f
 8001ce0:	08001f5f 	.word	0x08001f5f
 8001ce4:	08001f5f 	.word	0x08001f5f
 8001ce8:	08001f5f 	.word	0x08001f5f
 8001cec:	08001f5f 	.word	0x08001f5f
 8001cf0:	08001fe7 	.word	0x08001fe7
 8001cf4:	08001fa3 	.word	0x08001fa3
 8001cf8:	08001b2d 	.word	0x08001b2d
 8001cfc:	08001f5f 	.word	0x08001f5f
 8001d00:	08001f5f 	.word	0x08001f5f
 8001d04:	08001f5f 	.word	0x08001f5f
 8001d08:	08001f5f 	.word	0x08001f5f
 8001d0c:	08001f5f 	.word	0x08001f5f
 8001d10:	08001b2d 	.word	0x08001b2d
 8001d14:	08001b2d 	.word	0x08001b2d
 8001d18:	08001f5f 	.word	0x08001f5f
 8001d1c:	08001f5f 	.word	0x08001f5f
 8001d20:	08001fe7 	.word	0x08001fe7
 8001d24:	08001fe7 	.word	0x08001fe7
 8001d28:	08001fa3 	.word	0x08001fa3
 8001d2c:	08001fa3 	.word	0x08001fa3
 8001d30:	08001fa3 	.word	0x08001fa3
 8001d34:	08001fa3 	.word	0x08001fa3
 8001d38:	08001fa3 	.word	0x08001fa3
 8001d3c:	08001fe7 	.word	0x08001fe7
 8001d40:	08001f5f 	.word	0x08001f5f
 8001d44:	08001f5f 	.word	0x08001f5f
 8001d48:	08001fa3 	.word	0x08001fa3
 8001d4c:	08001b2d 	.word	0x08001b2d
 8001d50:	08001f5f 	.word	0x08001f5f
 8001d54:	08001f5f 	.word	0x08001f5f
 8001d58:	08001fe7 	.word	0x08001fe7
 8001d5c:	08001fa3 	.word	0x08001fa3
 8001d60:	08001fa3 	.word	0x08001fa3
 8001d64:	08001fa3 	.word	0x08001fa3
 8001d68:	08001fa3 	.word	0x08001fa3
 8001d6c:	08001fa3 	.word	0x08001fa3
 8001d70:	08001fa3 	.word	0x08001fa3
 8001d74:	08001fa3 	.word	0x08001fa3
 8001d78:	08001fa3 	.word	0x08001fa3
 8001d7c:	08001fa3 	.word	0x08001fa3
 8001d80:	08001fa3 	.word	0x08001fa3
 8001d84:	08001fa3 	.word	0x08001fa3
 8001d88:	08001fe7 	.word	0x08001fe7
 8001d8c:	08001b2d 	.word	0x08001b2d
 8001d90:	08001fe7 	.word	0x08001fe7
 8001d94:	08001fa3 	.word	0x08001fa3
 8001d98:	08001fa3 	.word	0x08001fa3
 8001d9c:	08001fa3 	.word	0x08001fa3
 8001da0:	08001f5f 	.word	0x08001f5f
 8001da4:	08001f5f 	.word	0x08001f5f
 8001da8:	08001f5f 	.word	0x08001f5f
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001dac:	2307      	movs	r3, #7
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001dae:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_CMD;
 8001db0:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_ExecCmd(&pHandle->_Super,bCmdID);
 8001db4:	4628      	mov	r0, r5
 8001db6:	f001 f8d9 	bl	8002f6c <UI_ExecCmd>
 8001dba:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001dbe:	e63d      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001dc0:	7970      	ldrb	r0, [r6, #5]
 8001dc2:	7932      	ldrb	r2, [r6, #4]
 8001dc4:	79b3      	ldrb	r3, [r6, #6]
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001dc6:	7871      	ldrb	r1, [r6, #1]
      Duration.U32_Val = buffer[4] + (buffer[5] << 8) + (buffer[6] << 16) + (buffer[7] << 24);
 8001dc8:	eb02 2200 	add.w	r2, r2, r0, lsl #8
 8001dcc:	eb02 4203 	add.w	r2, r2, r3, lsl #16
 8001dd0:	79f3      	ldrb	r3, [r6, #7]
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8001dd2:	eb02 6303 	add.w	r3, r2, r3, lsl #24
 8001dd6:	ee00 3a90 	vmov	s1, r3
      Position.U32_Val = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001dda:	7833      	ldrb	r3, [r6, #0]
 8001ddc:	78f2      	ldrb	r2, [r6, #3]
 8001dde:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8001de2:	78b1      	ldrb	r1, [r6, #2]
 8001de4:	eb03 4301 	add.w	r3, r3, r1, lsl #16
      bNoError = UI_ExecPositionCmd(&pHandle->_Super, Position.Float_Val, Duration.Float_Val);
 8001de8:	eb03 6302 	add.w	r3, r3, r2, lsl #24
 8001dec:	ee00 3a10 	vmov	s0, r3
 8001df0:	4628      	mov	r0, r5
 8001df2:	f001 f915 	bl	8003020 <UI_ExecPositionCmd>
 8001df6:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001dfa:	e61f      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001dfc:	78f3      	ldrb	r3, [r6, #3]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001dfe:	7870      	ldrb	r0, [r6, #1]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e00:	78b2      	ldrb	r2, [r6, #2]
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001e02:	7831      	ldrb	r1, [r6, #0]
      hIdRef = buffer[2] + (buffer[3] << 8);
 8001e04:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      hIqRef = buffer[0] + (buffer[1] << 8);
 8001e08:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      UI_SetCurrentReferences(&pHandle->_Super, hIqRef, hIdRef);
 8001e0c:	b212      	sxth	r2, r2
 8001e0e:	b209      	sxth	r1, r1
 8001e10:	4628      	mov	r0, r5
 8001e12:	f001 f949 	bl	80030a8 <UI_SetCurrentReferences>
      bNoError = true;
 8001e16:	2301      	movs	r3, #1
 8001e18:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e1c:	e610      	b.n	8001a40 <MCP_ReceivedFrame+0xbc>
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e1e:	4c1d      	ldr	r4, [pc, #116]	; (8001e94 <MCP_ReceivedFrame+0x510>)
      stepList.data = buffer;
 8001e20:	9606      	str	r6, [sp, #24]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001e22:	230c      	movs	r3, #12
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e24:	4621      	mov	r1, r4
 8001e26:	a806      	add	r0, sp, #24
      stepList.len = Size;
 8001e28:	f88d 801c 	strb.w	r8, [sp, #28]
      bErrorCode = ERROR_MP_NOT_ENABLED;
 8001e2c:	f88d 3016 	strb.w	r3, [sp, #22]
      bNoError = UI_GetMPInfo(&stepList, &MPInfo);
 8001e30:	f001 f948 	bl	80030c4 <UI_GetMPInfo>
 8001e34:	f88d 0011 	strb.w	r0, [sp, #17]
      if (bNoError)
 8001e38:	2800      	cmp	r0, #0
 8001e3a:	f43f adc9 	beq.w	80019d0 <MCP_ReceivedFrame+0x4c>
        pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, MPInfo.data, MPInfo.len);
 8001e3e:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001e40:	7923      	ldrb	r3, [r4, #4]
 8001e42:	6822      	ldr	r2, [r4, #0]
 8001e44:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e46:	21f0      	movs	r1, #240	; 0xf0
 8001e48:	47b0      	blx	r6
  if (RequireAck)
 8001e4a:	e5c8      	b.n	80019de <MCP_ReceivedFrame+0x5a>
 8001e4c:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
 8001e50:	ac06      	add	r4, sp, #24
 8001e52:	3b01      	subs	r3, #1
 8001e54:	4622      	mov	r2, r4
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001e56:	2000      	movs	r0, #0
 8001e58:	e004      	b.n	8001e64 <MCP_ReceivedFrame+0x4e0>
 8001e5a:	3001      	adds	r0, #1
 8001e5c:	2820      	cmp	r0, #32
        outBuff[i] = pHandle->s_fwVer[i];
 8001e5e:	f802 1b01 	strb.w	r1, [r2], #1
      for (i = 0; (i<32) && (pHandle->s_fwVer[i]!=0); i++)
 8001e62:	d00a      	beq.n	8001e7a <MCP_ReceivedFrame+0x4f6>
 8001e64:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8001e68:	b2c6      	uxtb	r6, r0
 8001e6a:	2900      	cmp	r1, #0
 8001e6c:	d1f5      	bne.n	8001e5a <MCP_ReceivedFrame+0x4d6>
        outBuff[i] = 0;
 8001e6e:	f1c6 0220 	rsb	r2, r6, #32
 8001e72:	b2d2      	uxtb	r2, r2
 8001e74:	4420      	add	r0, r4
 8001e76:	f006 fe59 	bl	8008b2c <memset>
      pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, outBuff, 32 );
 8001e7a:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 8001e7c:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8001e7e:	2320      	movs	r3, #32
 8001e80:	4622      	mov	r2, r4
 8001e82:	21f0      	movs	r1, #240	; 0xf0
 8001e84:	47b0      	blx	r6
      bNoError = true;
 8001e86:	2301      	movs	r3, #1
 8001e88:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8001e8c:	e5d8      	b.n	8001a40 <MCP_ReceivedFrame+0xbc>
 8001e8e:	bf00      	nop
 8001e90:	2aaaaaab 	.word	0x2aaaaaab
 8001e94:	200009d4 	.word	0x200009d4
      MC_Protocol_REG_t bRegID = (MC_Protocol_REG_t)buffer[0];
 8001e98:	7831      	ldrb	r1, [r6, #0]
      bErrorCode = ERROR_CODE_WRONG_SET;
 8001e9a:	2305      	movs	r3, #5
 8001e9c:	f88d 3016 	strb.w	r3, [sp, #22]
      switch (bRegID)
 8001ea0:	2988      	cmp	r1, #136	; 0x88
 8001ea2:	d86e      	bhi.n	8001f82 <MCP_ReceivedFrame+0x5fe>
 8001ea4:	e8df f001 	tbb	[pc, r1]
 8001ea8:	b16d6dcc 	.word	0xb16d6dcc
 8001eac:	7373736d 	.word	0x7373736d
 8001eb0:	73737373 	.word	0x73737373
 8001eb4:	73737373 	.word	0x73737373
 8001eb8:	6d6d8f8f 	.word	0x6d6d8f8f
 8001ebc:	73737373 	.word	0x73737373
 8001ec0:	6d6d6d73 	.word	0x6d6d6d73
 8001ec4:	6d6db8c2 	.word	0x6d6db8c2
 8001ec8:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ecc:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ed0:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ed4:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ed8:	6d6d6d6d 	.word	0x6d6d6d6d
 8001edc:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ee0:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ee4:	6d6d6d6d 	.word	0x6d6d6d6d
 8001ee8:	6d6d736d 	.word	0x6d6d736d
 8001eec:	8f8f6d6d 	.word	0x8f8f6d6d
 8001ef0:	6d6d6d8f 	.word	0x6d6d6d8f
 8001ef4:	736d6d6d 	.word	0x736d6d6d
 8001ef8:	736d6d6d 	.word	0x736d6d6d
 8001efc:	73737373 	.word	0x73737373
 8001f00:	8f6d7373 	.word	0x8f6d7373
 8001f04:	6d6d6d6d 	.word	0x6d6d6d6d
 8001f08:	6d6d736d 	.word	0x6d6d736d
 8001f0c:	6d6d7373 	.word	0x6d6d7373
 8001f10:	6d6d6d6d 	.word	0x6d6d6d6d
 8001f14:	6d6d6d6d 	.word	0x6d6d6d6d
 8001f18:	6d6d6d6d 	.word	0x6d6d6d6d
 8001f1c:	8f8f8fb1 	.word	0x8f8f8fb1
 8001f20:	6d6d8f8f 	.word	0x6d6d8f8f
 8001f24:	6d8f8f6d 	.word	0x6d8f8f6d
 8001f28:	6d6d6d6d 	.word	0x6d6d6d6d
 8001f2c:	73736d6d 	.word	0x73736d6d
 8001f30:	73          	.byte	0x73
 8001f31:	00          	.byte	0x00
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f32:	7870      	ldrb	r0, [r6, #1]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f34:	7973      	ldrb	r3, [r6, #5]
 8001f36:	7932      	ldrb	r2, [r6, #4]
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f38:	7831      	ldrb	r1, [r6, #0]
      uint16_t duration = buffer[4] + (buffer[5] << 8);
 8001f3a:	eb02 2203 	add.w	r2, r2, r3, lsl #8
      int32_t torque = buffer[0] + (buffer[1] << 8) + (buffer[2] << 16) + (buffer[3] << 24);
 8001f3e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
      bNoError = UI_ExecTorqueRamp(&pHandle->_Super, torque,duration);
 8001f42:	b292      	uxth	r2, r2
 8001f44:	b209      	sxth	r1, r1
 8001f46:	4628      	mov	r0, r5
 8001f48:	f001 f860 	bl	800300c <UI_ExecTorqueRamp>
 8001f4c:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001f50:	e574      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f52:	2301      	movs	r3, #1
    if (bNoError)
 8001f54:	f89d 0011 	ldrb.w	r0, [sp, #17]
      bErrorCode = ERROR_BAD_FRAME_ID;
 8001f58:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001f5c:	e56e      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f5e:	f10d 0211 	add.w	r2, sp, #17
 8001f62:	4628      	mov	r0, r5
 8001f64:	f001 f8c2 	bl	80030ec <UI_GetReg>
          if ( bNoError == true )
 8001f68:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001f6c:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f43f ad2e 	beq.w	80019d0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 2);
 8001f74:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001f78:	2302      	movs	r3, #2
 8001f7a:	aa06      	add	r2, sp, #24
 8001f7c:	21f0      	movs	r1, #240	; 0xf0
 8001f7e:	47a0      	blx	r4
  if (RequireAck)
 8001f80:	e52d      	b.n	80019de <MCP_ReceivedFrame+0x5a>
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f82:	2302      	movs	r3, #2
    if (bNoError)
 8001f84:	f89d 0011 	ldrb.w	r0, [sp, #17]
          bErrorCode = ERROR_CODE_SET_READ_ONLY;
 8001f88:	f88d 3016 	strb.w	r3, [sp, #22]
  if (RequireAck)
 8001f8c:	e556      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          int32_t wValue = buffer[1] + (buffer[2] << 8);
 8001f8e:	78b2      	ldrb	r2, [r6, #2]
 8001f90:	7873      	ldrb	r3, [r6, #1]
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001f92:	4628      	mov	r0, r5
 8001f94:	eb03 2202 	add.w	r2, r3, r2, lsl #8
 8001f98:	f000 fefa 	bl	8002d90 <UI_SetReg>
 8001f9c:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001fa0:	e54c      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001fa2:	f10d 0211 	add.w	r2, sp, #17
 8001fa6:	4628      	mov	r0, r5
 8001fa8:	f001 f8a0 	bl	80030ec <UI_GetReg>
          if ( bNoError == true )
 8001fac:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError);
 8001fb0:	9006      	str	r0, [sp, #24]
          if ( bNoError == true )
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f43f ad0c 	beq.w	80019d0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 4);
 8001fb8:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8001fbc:	2304      	movs	r3, #4
 8001fbe:	aa06      	add	r2, sp, #24
 8001fc0:	21f0      	movs	r1, #240	; 0xf0
 8001fc2:	47a0      	blx	r4
  if (RequireAck)
 8001fc4:	e50b      	b.n	80019de <MCP_ReceivedFrame+0x5a>
          int32_t wValue = buffer[1] + (buffer[2] << 8) + (buffer[3] << 16) + (buffer[4] << 24);
 8001fc6:	78b2      	ldrb	r2, [r6, #2]
 8001fc8:	7873      	ldrb	r3, [r6, #1]
 8001fca:	78f0      	ldrb	r0, [r6, #3]
 8001fcc:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8001fd0:	7932      	ldrb	r2, [r6, #4]
 8001fd2:	eb03 4300 	add.w	r3, r3, r0, lsl #16
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 8001fd6:	eb03 6202 	add.w	r2, r3, r2, lsl #24
 8001fda:	4628      	mov	r0, r5
 8001fdc:	f000 fed8 	bl	8002d90 <UI_SetReg>
 8001fe0:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8001fe4:	e52a      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001fe6:	f10d 0211 	add.w	r2, sp, #17
 8001fea:	4628      	mov	r0, r5
 8001fec:	f001 f87e 	bl	80030ec <UI_GetReg>
           if ( bNoError == true )
 8001ff0:	f89d 3011 	ldrb.w	r3, [sp, #17]
          int32_t value = UI_GetReg( &pHandle->_Super, bRegID, &bNoError );
 8001ff4:	9006      	str	r0, [sp, #24]
           if ( bNoError == true )
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	f43f acea 	beq.w	80019d0 <MCP_ReceivedFrame+0x4c>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8001ffc:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 8002000:	2301      	movs	r3, #1
 8002002:	aa06      	add	r2, sp, #24
 8002004:	21f0      	movs	r1, #240	; 0xf0
 8002006:	47a0      	blx	r4
  if (RequireAck)
 8002008:	e4e9      	b.n	80019de <MCP_ReceivedFrame+0x5a>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, (int32_t)(buffer[1]));
 800200a:	7872      	ldrb	r2, [r6, #1]
 800200c:	4628      	mov	r0, r5
 800200e:	f000 febf 	bl	8002d90 <UI_SetReg>
 8002012:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 8002016:	e511      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH1, (MC_Protocol_REG_t)(buffer[1]));
 8002018:	7872      	ldrb	r2, [r6, #1]
 800201a:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800201e:	2101      	movs	r1, #1
 8002020:	f001 f85a 	bl	80030d8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8002024:	2301      	movs	r3, #1
 8002026:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 800202a:	e509      	b.n	8001a40 <MCP_ReceivedFrame+0xbc>
          UI_SetDAC(&pHandle->pDAC->_Super, DAC_CH0, (MC_Protocol_REG_t)(buffer[1]));
 800202c:	7872      	ldrb	r2, [r6, #1]
 800202e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8002032:	2100      	movs	r1, #0
 8002034:	f001 f850 	bl	80030d8 <UI_SetDAC>
          bNoError = true; /* No check inside class return always true*/
 8002038:	2301      	movs	r3, #1
 800203a:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 800203e:	e4ff      	b.n	8001a40 <MCP_ReceivedFrame+0xbc>
          int32_t wValue = (int32_t)(buffer[1]);
 8002040:	7872      	ldrb	r2, [r6, #1]
          UI_SetReg(&pHandle->pDAC->_Super, bRegID, wValue);
 8002042:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8002046:	9203      	str	r2, [sp, #12]
 8002048:	2100      	movs	r1, #0
 800204a:	f000 fea1 	bl	8002d90 <UI_SetReg>
          bNoError = UI_SetReg(&pHandle->_Super, bRegID, wValue);
 800204e:	9a03      	ldr	r2, [sp, #12]
 8002050:	2100      	movs	r1, #0
 8002052:	4628      	mov	r0, r5
 8002054:	f000 fe9c 	bl	8002d90 <UI_SetReg>
 8002058:	f88d 0011 	strb.w	r0, [sp, #17]
  if (RequireAck)
 800205c:	e4ee      	b.n	8001a3c <MCP_ReceivedFrame+0xb8>
          if (pHandle->pDAC)
 800205e:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 8002062:	2800      	cmp	r0, #0
 8002064:	f43f ad62 	beq.w	8001b2c <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002068:	2101      	movs	r1, #1
 800206a:	f001 f839 	bl	80030e0 <UI_GetDAC>
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800206e:	2301      	movs	r3, #1
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH1);
 8002070:	f88d 0018 	strb.w	r0, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 8002074:	6b6c      	ldr	r4, [r5, #52]	; 0x34
 8002076:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8002078:	aa06      	add	r2, sp, #24
 800207a:	21f0      	movs	r1, #240	; 0xf0
 800207c:	47a0      	blx	r4
            bNoError = true;
 800207e:	2301      	movs	r3, #1
 8002080:	f88d 3011 	strb.w	r3, [sp, #17]
  if (RequireAck)
 8002084:	e4dc      	b.n	8001a40 <MCP_ReceivedFrame+0xbc>
          if (pHandle->pDAC)
 8002086:	f8d5 00c4 	ldr.w	r0, [r5, #196]	; 0xc4
 800208a:	2800      	cmp	r0, #0
 800208c:	f43f ad4e 	beq.w	8001b2c <MCP_ReceivedFrame+0x1a8>
            MC_Protocol_REG_t value = UI_GetDAC(&pHandle->pDAC->_Super, DAC_CH0);
 8002090:	2100      	movs	r1, #0
 8002092:	f001 f825 	bl	80030e0 <UI_GetDAC>
 8002096:	4603      	mov	r3, r0
 8002098:	f88d 3018 	strb.w	r3, [sp, #24]
            pHandle->fFcpSend(pHandle->pFCP, ACK_NOERROR, (uint8_t*)(&value), 1);
 800209c:	e9d5 040c 	ldrd	r0, r4, [r5, #48]	; 0x30
 80020a0:	2301      	movs	r3, #1
 80020a2:	aa06      	add	r2, sp, #24
 80020a4:	21f0      	movs	r1, #240	; 0xf0
 80020a6:	47a0      	blx	r4
  if (RequireAck)
 80020a8:	e499      	b.n	80019de <MCP_ReceivedFrame+0x5a>
 80020aa:	2626      	movs	r6, #38	; 0x26
 80020ac:	2324      	movs	r3, #36	; 0x24
 80020ae:	2222      	movs	r2, #34	; 0x22
 80020b0:	e4ee      	b.n	8001a90 <MCP_ReceivedFrame+0x10c>
 80020b2:	bf00      	nop

080020b4 <MCP_WaitNextFrame>:
{
 80020b4:	b510      	push	{r4, lr}
 80020b6:	4604      	mov	r4, r0
  pHandle->fFcpAbortReceive(pHandle->pFCP);
 80020b8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80020ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80020bc:	4798      	blx	r3
  pHandle->BufferSize = FCP_MAX_PAYLOAD_SIZE;
 80020be:	2280      	movs	r2, #128	; 0x80
 80020c0:	f884 20c8 	strb.w	r2, [r4, #200]	; 0xc8
  pHandle->fFcpReceive(pHandle->pFCP);
 80020c4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020c6:	6b20      	ldr	r0, [r4, #48]	; 0x30
}
 80020c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  pHandle->fFcpReceive(pHandle->pFCP);
 80020cc:	4718      	bx	r3
 80020ce:	bf00      	nop

080020d0 <MCP_Init>:
{
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	4604      	mov	r4, r0
 80020d6:	461d      	mov	r5, r3
 80020d8:	9b07      	ldr	r3, [sp, #28]
  pHandle->pDAC = pDAC;
 80020da:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
{
 80020de:	9b08      	ldr	r3, [sp, #32]
  pHandle->s_fwVer = s_fwVer;
 80020e0:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
  FCP_SetClient( pFCP, pHandle,
 80020e4:	4b09      	ldr	r3, [pc, #36]	; (800210c <MCP_Init+0x3c>)
  pHandle->pFCP = pFCP;
 80020e6:	6321      	str	r1, [r4, #48]	; 0x30
{
 80020e8:	4608      	mov	r0, r1
 80020ea:	4616      	mov	r6, r2
  FCP_SetClient( pFCP, pHandle,
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	4a08      	ldr	r2, [pc, #32]	; (8002110 <MCP_Init+0x40>)
 80020f0:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MCP_Init+0x44>)
 80020f2:	4621      	mov	r1, r4
 80020f4:	f004 fc48 	bl	8006988 <FCP_SetClient>
  pHandle->fFcpAbortReceive = fFcpAbortReceive;
 80020f8:	9b06      	ldr	r3, [sp, #24]
 80020fa:	63e3      	str	r3, [r4, #60]	; 0x3c
  pHandle->fFcpReceive = fFcpReceive;
 80020fc:	e9c4 650d 	strd	r6, r5, [r4, #52]	; 0x34
  MCP_WaitNextFrame(pHandle);
 8002100:	4620      	mov	r0, r4
 8002102:	f7ff ffd7 	bl	80020b4 <MCP_WaitNextFrame>
}
 8002106:	b002      	add	sp, #8
 8002108:	bd70      	pop	{r4, r5, r6, pc}
 800210a:	bf00      	nop
 800210c:	08002119 	.word	0x08002119
 8002110:	08002121 	.word	0x08002121
 8002114:	08001985 	.word	0x08001985

08002118 <MCP_OnTimeOut>:
{
 8002118:	b508      	push	{r3, lr}
     MCP_WaitNextFrame(pHandle);
 800211a:	f7ff ffcb 	bl	80020b4 <MCP_WaitNextFrame>
}
 800211e:	bd08      	pop	{r3, pc}

08002120 <MCP_SentFrame>:
{
 8002120:	b508      	push	{r3, lr}
    MCP_WaitNextFrame(pHandle);
 8002122:	f7ff ffc7 	bl	80020b4 <MCP_WaitNextFrame>
}
 8002126:	bd08      	pop	{r3, pc}

08002128 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002128:	b530      	push	{r4, r5, lr}
 800212a:	b083      	sub	sp, #12
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 800212c:	f003 f81e 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <MX_MotorControl_Init+0x38>)
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI,pMCT);
 8002132:	4d0c      	ldr	r5, [pc, #48]	; (8002164 <MX_MotorControl_Init+0x3c>)
 8002134:	4c0c      	ldr	r4, [pc, #48]	; (8002168 <MX_MotorControl_Init+0x40>)
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/SYS_TICK_FREQUENCY);
 8002136:	fba3 3000 	umull	r3, r0, r3, r0
 800213a:	09c0      	lsrs	r0, r0, #7
 800213c:	f002 f9e2 	bl	8004504 <HAL_SYSTICK_Config>
  MCboot(pMCI,pMCT);
 8002140:	4629      	mov	r1, r5
 8002142:	4620      	mov	r0, r4
 8002144:	f7fe ffba 	bl	80010bc <MCboot>
  mc_lock_pins();
 8002148:	f7ff fb7a 	bl	8001840 <mc_lock_pins>

  /* Initialize the MC User Interface */
  UI_TaskInit(wConfig,NBR_OF_MOTORS,pMCI,pMCT,s_fwVer);
 800214c:	4b07      	ldr	r3, [pc, #28]	; (800216c <MX_MotorControl_Init+0x44>)
 800214e:	9300      	str	r3, [sp, #0]
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <MX_MotorControl_Init+0x48>)
 8002152:	462b      	mov	r3, r5
 8002154:	4622      	mov	r2, r4
 8002156:	2101      	movs	r1, #1
 8002158:	f000 fd4a 	bl	8002bf0 <UI_TaskInit>
}
 800215c:	b003      	add	sp, #12
 800215e:	bd30      	pop	{r4, r5, pc}
 8002160:	10624dd3 	.word	0x10624dd3
 8002164:	200009e0 	.word	0x200009e0
 8002168:	200009dc 	.word	0x200009dc
 800216c:	08008c18 	.word	0x08008c18
 8002170:	20000678 	.word	0x20000678

08002174 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002174:	4a6f      	ldr	r2, [pc, #444]	; (8002334 <RCM_RegisterRegConv+0x1c0>)
{
 8002176:	b530      	push	{r4, r5, lr}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002178:	6814      	ldr	r4, [r2, #0]
{
 800217a:	4601      	mov	r1, r0
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800217c:	2c00      	cmp	r4, #0
 800217e:	f000 8088 	beq.w	8002292 <RCM_RegisterRegConv+0x11e>
        handle = i; /* First location available, but still looping to check that this config does not already exist*/
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (  RCM_handle_array [i] != 0 )
      {
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002182:	f890 c004 	ldrb.w	ip, [r0, #4]
 8002186:	7923      	ldrb	r3, [r4, #4]
 8002188:	459c      	cmp	ip, r3
 800218a:	d01f      	beq.n	80021cc <RCM_RegisterRegConv+0x58>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 800218c:	6853      	ldr	r3, [r2, #4]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8097 	beq.w	80022c2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 8002194:	791c      	ldrb	r4, [r3, #4]
 8002196:	4564      	cmp	r4, ip
  uint8_t handle=255;
 8002198:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800219c:	f000 8083 	beq.w	80022a6 <RCM_RegisterRegConv+0x132>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021a0:	6894      	ldr	r4, [r2, #8]
 80021a2:	2c00      	cmp	r4, #0
 80021a4:	f000 80ad 	beq.w	8002302 <RCM_RegisterRegConv+0x18e>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021a8:	7923      	ldrb	r3, [r4, #4]
 80021aa:	4563      	cmp	r3, ip
 80021ac:	f000 8082 	beq.w	80022b4 <RCM_RegisterRegConv+0x140>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80021b0:	68d3      	ldr	r3, [r2, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 80ae 	beq.w	8002314 <RCM_RegisterRegConv+0x1a0>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021b8:	791c      	ldrb	r4, [r3, #4]
 80021ba:	4564      	cmp	r4, ip
 80021bc:	f000 808c 	beq.w	80022d8 <RCM_RegisterRegConv+0x164>
           i = RCM_MAX_CONV; /* we can skip the rest of the loop*/
          }
      }
      i++;
    }
    if (handle < RCM_MAX_CONV )
 80021c0:	2803      	cmp	r0, #3
 80021c2:	bf88      	it	hi
 80021c4:	20ff      	movhi	r0, #255	; 0xff
 80021c6:	f240 80b1 	bls.w	800232c <RCM_RegisterRegConv+0x1b8>
    else
    {
      /* Nothing to do handle is already set to error value : 255 */
    }
  return handle;
}
 80021ca:	bd30      	pop	{r4, r5, pc}
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80021cc:	6803      	ldr	r3, [r0, #0]
 80021ce:	6820      	ldr	r0, [r4, #0]
 80021d0:	4283      	cmp	r3, r0
 80021d2:	d1db      	bne.n	800218c <RCM_RegisterRegConv+0x18>
  uint8_t i=0;
 80021d4:	2000      	movs	r0, #0
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021d6:	4c58      	ldr	r4, [pc, #352]	; (8002338 <RCM_RegisterRegConv+0x1c4>)
      RCM_handle_array [handle] = regConv;
 80021d8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80021dc:	689a      	ldr	r2, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80021de:	2500      	movs	r5, #0
 80021e0:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (LL_ADC_IsEnabled(regConv->regADC) == 0 )
 80021e4:	07d5      	lsls	r5, r2, #31
 80021e6:	d422      	bmi.n	800222e <RCM_RegisterRegConv+0xba>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80021e8:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021ea:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80021f2:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021f4:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021f6:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80021f8:	f022 0220 	bic.w	r2, r2, #32
 80021fc:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80021fe:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8002206:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800220a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800220e:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	2a00      	cmp	r2, #0
 8002214:	dbfc      	blt.n	8002210 <RCM_RegisterRegConv+0x9c>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002216:	681a      	ldr	r2, [r3, #0]
        while (  LL_ADC_IsActiveFlag_ADRDY( regConv->regADC ) == 0)
 8002218:	07d4      	lsls	r4, r2, #31
 800221a:	d408      	bmi.n	800222e <RCM_RegisterRegConv+0xba>
  MODIFY_REG(ADCx->CR,
 800221c:	4c47      	ldr	r4, [pc, #284]	; (800233c <RCM_RegisterRegConv+0x1c8>)
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	4022      	ands	r2, r4
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	07d2      	lsls	r2, r2, #31
 800222c:	d5f7      	bpl.n	800221e <RCM_RegisterRegConv+0xaa>
      RCM_NoInj_array [handle].enable = false;
 800222e:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 8002232:	4c43      	ldr	r4, [pc, #268]	; (8002340 <RCM_RegisterRegConv+0x1cc>)
 8002234:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 8002238:	2200      	movs	r2, #0
 800223a:	f804 200c 	strb.w	r2, [r4, ip]
      RCM_NoInj_array [handle].prev = handle;
 800223e:	4464      	add	r4, ip
 8002240:	f360 0207 	bfi	r2, r0, #0, #8
 8002244:	f360 220f 	bfi	r2, r0, #8, #8
 8002248:	80a2      	strh	r2, [r4, #4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800224a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800224c:	f022 020f 	bic.w	r2, r2, #15
 8002250:	631a      	str	r2, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 8002252:	790c      	ldrb	r4, [r1, #4]
 8002254:	2c09      	cmp	r4, #9
 8002256:	d846      	bhi.n	80022e6 <RCM_RegisterRegConv+0x172>
 8002258:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800225c:	06a2      	lsls	r2, r4, #26
 800225e:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 8002262:	2501      	movs	r5, #1
 8002264:	fa05 f404 	lsl.w	r4, r5, r4
 8002268:	4322      	orrs	r2, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800226a:	0dd4      	lsrs	r4, r2, #23
  MODIFY_REG(*preg,
 800226c:	6889      	ldr	r1, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800226e:	f004 0404 	and.w	r4, r4, #4
 8002272:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8002274:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8002278:	fa01 fc02 	lsl.w	ip, r1, r2
 800227c:	f04f 0e07 	mov.w	lr, #7
 8002280:	58e1      	ldr	r1, [r4, r3]
 8002282:	fa0e f202 	lsl.w	r2, lr, r2
 8002286:	ea21 0202 	bic.w	r2, r1, r2
 800228a:	ea42 020c 	orr.w	r2, r2, ip
 800228e:	50e2      	str	r2, [r4, r3]
}
 8002290:	bd30      	pop	{r4, r5, pc}
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002292:	6853      	ldr	r3, [r2, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d041      	beq.n	800231c <RCM_RegisterRegConv+0x1a8>
 8002298:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 800229c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800229e:	791c      	ldrb	r4, [r3, #4]
 80022a0:	4564      	cmp	r4, ip
 80022a2:	f47f af7d 	bne.w	80021a0 <RCM_RegisterRegConv+0x2c>
 80022a6:	681c      	ldr	r4, [r3, #0]
 80022a8:	680b      	ldr	r3, [r1, #0]
 80022aa:	429c      	cmp	r4, r3
 80022ac:	f47f af78 	bne.w	80021a0 <RCM_RegisterRegConv+0x2c>
      i++;
 80022b0:	2001      	movs	r0, #1
 80022b2:	e790      	b.n	80021d6 <RCM_RegisterRegConv+0x62>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022b4:	6824      	ldr	r4, [r4, #0]
 80022b6:	680b      	ldr	r3, [r1, #0]
 80022b8:	429c      	cmp	r4, r3
 80022ba:	f47f af79 	bne.w	80021b0 <RCM_RegisterRegConv+0x3c>
      i++;
 80022be:	2002      	movs	r0, #2
 80022c0:	e789      	b.n	80021d6 <RCM_RegisterRegConv+0x62>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022c2:	6894      	ldr	r4, [r2, #8]
      i++;
 80022c4:	2001      	movs	r0, #1
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	f47f af6e 	bne.w	80021a8 <RCM_RegisterRegConv+0x34>
 80022cc:	68d3      	ldr	r3, [r2, #12]
 80022ce:	b36b      	cbz	r3, 800232c <RCM_RegisterRegConv+0x1b8>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 80022d0:	791d      	ldrb	r5, [r3, #4]
 80022d2:	790c      	ldrb	r4, [r1, #4]
 80022d4:	42a5      	cmp	r5, r4
 80022d6:	d129      	bne.n	800232c <RCM_RegisterRegConv+0x1b8>
 80022d8:	681c      	ldr	r4, [r3, #0]
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	429c      	cmp	r4, r3
 80022de:	f47f af6f 	bne.w	80021c0 <RCM_RegisterRegConv+0x4c>
      i++;
 80022e2:	2003      	movs	r0, #3
 80022e4:	e777      	b.n	80021d6 <RCM_RegisterRegConv+0x62>
      LL_ADC_SetChannelSamplingTime ( regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel) ,regConv->samplingTime);
 80022e6:	2203      	movs	r2, #3
 80022e8:	f06f 051d 	mvn.w	r5, #29
 80022ec:	fb12 5504 	smlabb	r5, r2, r4, r5
 80022f0:	2201      	movs	r2, #1
 80022f2:	40a2      	lsls	r2, r4
 80022f4:	ea42 5205 	orr.w	r2, r2, r5, lsl #20
 80022f8:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
 80022fc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002300:	e7b3      	b.n	800226a <RCM_RegisterRegConv+0xf6>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002302:	2804      	cmp	r0, #4
 8002304:	d910      	bls.n	8002328 <RCM_RegisterRegConv+0x1b4>
 8002306:	68d3      	ldr	r3, [r2, #12]
 8002308:	b113      	cbz	r3, 8002310 <RCM_RegisterRegConv+0x19c>
        if ((RCM_handle_array [i]->channel == regConv->channel) &&
 800230a:	7918      	ldrb	r0, [r3, #4]
 800230c:	4584      	cmp	ip, r0
 800230e:	d00f      	beq.n	8002330 <RCM_RegisterRegConv+0x1bc>
 8002310:	680b      	ldr	r3, [r1, #0]
 8002312:	e7d4      	b.n	80022be <RCM_RegisterRegConv+0x14a>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002314:	2804      	cmp	r0, #4
 8002316:	680b      	ldr	r3, [r1, #0]
 8002318:	d8e3      	bhi.n	80022e2 <RCM_RegisterRegConv+0x16e>
 800231a:	e75c      	b.n	80021d6 <RCM_RegisterRegConv+0x62>
 800231c:	6894      	ldr	r4, [r2, #8]
 800231e:	b11c      	cbz	r4, 8002328 <RCM_RegisterRegConv+0x1b4>
 8002320:	f890 c004 	ldrb.w	ip, [r0, #4]
  uint8_t i=0;
 8002324:	4618      	mov	r0, r3
 8002326:	e73f      	b.n	80021a8 <RCM_RegisterRegConv+0x34>
      if (  RCM_handle_array [i] == 0 && handle > RCM_MAX_CONV)
 8002328:	4620      	mov	r0, r4
 800232a:	e7cf      	b.n	80022cc <RCM_RegisterRegConv+0x158>
 800232c:	680b      	ldr	r3, [r1, #0]
 800232e:	e752      	b.n	80021d6 <RCM_RegisterRegConv+0x62>
      i++;
 8002330:	2002      	movs	r0, #2
 8002332:	e7d1      	b.n	80022d8 <RCM_RegisterRegConv+0x164>
 8002334:	20000a24 	.word	0x20000a24
 8002338:	200009e4 	.word	0x200009e4
 800233c:	7fffffc0 	.word	0x7fffffc0
 8002340:	20000a04 	.word	0x20000a04

08002344 <RCM_ExecRegularConv>:
  uint16_t retVal;
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (RCM_NoInj_array [handle].enable == false)
 8002344:	4b5e      	ldr	r3, [pc, #376]	; (80024c0 <RCM_ExecRegularConv+0x17c>)
 8002346:	eb00 0240 	add.w	r2, r0, r0, lsl #1
{
 800234a:	b510      	push	{r4, lr}
  if (RCM_NoInj_array [handle].enable == false)
 800234c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8002350:	ea4f 0c40 	mov.w	ip, r0, lsl #1
 8002354:	2a00      	cmp	r2, #0
 8002356:	d13c      	bne.n	80023d2 <RCM_ExecRegularConv+0x8e>
  {
    /* find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (RCM_NoInj_array [i].enable == true)
 8002358:	7819      	ldrb	r1, [r3, #0]
 800235a:	b9a9      	cbnz	r1, 8002388 <RCM_ExecRegularConv+0x44>
  uint8_t LastEnable = RCM_MAX_CONV;
 800235c:	2204      	movs	r2, #4
      if (RCM_NoInj_array [i].enable == true)
 800235e:	7999      	ldrb	r1, [r3, #6]
 8002360:	2900      	cmp	r1, #0
 8002362:	d07e      	beq.n	8002462 <RCM_ExecRegularConv+0x11e>
      {
        if (RCM_NoInj_array [i].next > handle)
 8002364:	7ad9      	ldrb	r1, [r3, #11]
 8002366:	4288      	cmp	r0, r1
 8002368:	f0c0 809a 	bcc.w	80024a0 <RCM_ExecRegularConv+0x15c>
      if (RCM_NoInj_array [i].enable == true)
 800236c:	7b1a      	ldrb	r2, [r3, #12]
 800236e:	2a00      	cmp	r2, #0
 8002370:	f000 8099 	beq.w	80024a6 <RCM_ExecRegularConv+0x162>
        if (RCM_NoInj_array [i].next > handle)
 8002374:	7c59      	ldrb	r1, [r3, #17]
 8002376:	4288      	cmp	r0, r1
 8002378:	f0c0 809f 	bcc.w	80024ba <RCM_ExecRegularConv+0x176>
      if (RCM_NoInj_array [i].enable == true)
 800237c:	7c9a      	ldrb	r2, [r3, #18]
 800237e:	2a00      	cmp	r2, #0
 8002380:	f040 8095 	bne.w	80024ae <RCM_ExecRegularConv+0x16a>
        }
      }
      else
      { /* nothing to do */
      }
      i++;
 8002384:	2202      	movs	r2, #2
 8002386:	e073      	b.n	8002470 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 8002388:	7959      	ldrb	r1, [r3, #5]
 800238a:	4281      	cmp	r1, r0
 800238c:	d9e7      	bls.n	800235e <RCM_ExecRegularConv+0x1a>
      if (RCM_NoInj_array [i].enable == true)
 800238e:	4696      	mov	lr, r2
          RCM_NoInj_array [handle].next = formerNext;
 8002390:	eb0c 0400 	add.w	r4, ip, r0
 8002394:	eb03 0444 	add.w	r4, r3, r4, lsl #1
          RCM_NoInj_array [i].next = handle;
 8002398:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
          RCM_NoInj_array [handle].prev = i;
 800239c:	7122      	strb	r2, [r4, #4]
          RCM_NoInj_array [handle].next = formerNext;
 800239e:	7161      	strb	r1, [r4, #5]
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array [handle].enable = true;
    RCM_NoInj_array [handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023a0:	4c48      	ldr	r4, [pc, #288]	; (80024c4 <RCM_ExecRegularConv+0x180>)
          RCM_NoInj_array [formerNext].prev = handle;
 80023a2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array [i].next = handle;
 80023a6:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
          RCM_NoInj_array [formerNext].prev = handle;
 80023aa:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023ae:	7822      	ldrb	r2, [r4, #0]
          RCM_NoInj_array [i].next = handle;
 80023b0:	f88e 0005 	strb.w	r0, [lr, #5]
          RCM_NoInj_array [formerNext].prev = handle;
 80023b4:	7108      	strb	r0, [r1, #4]
    RCM_NoInj_array [handle].enable = true;
 80023b6:	eb0c 0100 	add.w	r1, ip, r0
 80023ba:	f04f 0e01 	mov.w	lr, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023be:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    RCM_NoInj_array [handle].enable = true;
 80023c2:	f823 e011 	strh.w	lr, [r3, r1, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 80023c6:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80023ca:	7852      	ldrb	r2, [r2, #1]
 80023cc:	4572      	cmp	r2, lr
    {/* select the new conversion to be the next scheduled only if a conversion is not ongoing*/
      RCM_currentHandle = handle;
 80023ce:	bf18      	it	ne
 80023d0:	7020      	strbne	r0, [r4, #0]
  }
  else
  {
  /* Nothing to do the current handle is already scheduled */
  }
  if (PWM_Handle_M1.ADCRegularLocked == false)
 80023d2:	4a3d      	ldr	r2, [pc, #244]	; (80024c8 <RCM_ExecRegularConv+0x184>)
 80023d4:	f892 2078 	ldrb.w	r2, [r2, #120]	; 0x78
 80023d8:	2a00      	cmp	r2, #0
 80023da:	d132      	bne.n	8002442 <RCM_ExecRegularConv+0xfe>
  /* The ADC is free to be used asynchronously*/
  {
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023dc:	4a3b      	ldr	r2, [pc, #236]	; (80024cc <RCM_ExecRegularConv+0x188>)
 80023de:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023e2:	7914      	ldrb	r4, [r2, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 80023e4:	6811      	ldr	r1, [r2, #0]
 80023e6:	2c09      	cmp	r4, #9
 80023e8:	d930      	bls.n	800244c <RCM_ExecRegularConv+0x108>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 80023ea:	2203      	movs	r2, #3
 80023ec:	f06f 0e1d 	mvn.w	lr, #29
 80023f0:	fb12 ee04 	smlabb	lr, r2, r4, lr
 80023f4:	2201      	movs	r2, #1
 80023f6:	40a2      	lsls	r2, r4
 80023f8:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
 80023fc:	ea42 6284 	orr.w	r2, r2, r4, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002400:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 8002404:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8002406:	0d12      	lsrs	r2, r2, #20
 8002408:	f402 62f8 	and.w	r2, r2, #1984	; 0x7c0
 800240c:	f424 64f8 	bic.w	r4, r4, #1984	; 0x7c0
 8002410:	4322      	orrs	r2, r4
 8002412:	630a      	str	r2, [r1, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002414:	6c0a      	ldr	r2, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002416:	688a      	ldr	r2, [r1, #8]
 8002418:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800241c:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8002420:	f042 0204 	orr.w	r2, r2, #4
 8002424:	608a      	str	r2, [r1, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8002426:	680a      	ldr	r2, [r1, #0]
 8002428:	0752      	lsls	r2, r2, #29
 800242a:	d5fc      	bpl.n	8002426 <RCM_ExecRegularConv+0xe2>
    while ( LL_ADC_IsActiveFlag_EOC( RCM_handle_array[handle]->regADC ) == RESET )
    {
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array [handle].value = LL_ADC_REG_ReadConversionData12( RCM_handle_array[handle]->regADC );
 800242c:	eb0c 0200 	add.w	r2, ip, r0
 8002430:	eb03 0242 	add.w	r2, r3, r2, lsl #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002434:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002436:	8051      	strh	r1, [r2, #2]
    RCM_currentHandle = RCM_NoInj_array [handle].next;
 8002438:	4922      	ldr	r1, [pc, #136]	; (80024c4 <RCM_ExecRegularConv+0x180>)
 800243a:	7954      	ldrb	r4, [r2, #5]
 800243c:	700c      	strb	r4, [r1, #0]
    RCM_NoInj_array [handle].status = valid;
 800243e:	2102      	movs	r1, #2
 8002440:	7051      	strb	r1, [r2, #1]
  }
  retVal = RCM_NoInj_array [handle].value;
 8002442:	4460      	add	r0, ip
 8002444:	eb03 0340 	add.w	r3, r3, r0, lsl #1
return retVal;
}
 8002448:	8858      	ldrh	r0, [r3, #2]
 800244a:	bd10      	pop	{r4, pc}
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 800244c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8002450:	06a2      	lsls	r2, r4, #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 8002452:	ea42 520e 	orr.w	r2, r2, lr, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[handle]->channel ) );
 8002456:	f04f 0e01 	mov.w	lr, #1
 800245a:	fa0e f404 	lsl.w	r4, lr, r4
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[handle]->regADC,
 800245e:	4322      	orrs	r2, r4
 8002460:	e7d0      	b.n	8002404 <RCM_ExecRegularConv+0xc0>
      if (RCM_NoInj_array [i].enable == true)
 8002462:	7b19      	ldrb	r1, [r3, #12]
 8002464:	2900      	cmp	r1, #0
 8002466:	d185      	bne.n	8002374 <RCM_ExecRegularConv+0x30>
 8002468:	7c99      	ldrb	r1, [r3, #18]
 800246a:	bb01      	cbnz	r1, 80024ae <RCM_ExecRegularConv+0x16a>
       if (LastEnable != RCM_MAX_CONV )
 800246c:	2a04      	cmp	r2, #4
 800246e:	d013      	beq.n	8002498 <RCM_ExecRegularConv+0x154>
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002470:	eb02 0142 	add.w	r1, r2, r2, lsl #1
         RCM_NoInj_array [handle].next = formerNext;
 8002474:	eb0c 0400 	add.w	r4, ip, r0
 8002478:	eb03 0444 	add.w	r4, r3, r4, lsl #1
         formerNext = RCM_NoInj_array [LastEnable].next;
 800247c:	eb03 0141 	add.w	r1, r3, r1, lsl #1
         RCM_NoInj_array [handle].prev = LastEnable;
 8002480:	7122      	strb	r2, [r4, #4]
         formerNext = RCM_NoInj_array [LastEnable].next;
 8002482:	794a      	ldrb	r2, [r1, #5]
         RCM_NoInj_array [handle].next = formerNext;
 8002484:	7162      	strb	r2, [r4, #5]
         RCM_NoInj_array [formerNext].prev = handle;
 8002486:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800248a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 800248e:	4c0d      	ldr	r4, [pc, #52]	; (80024c4 <RCM_ExecRegularConv+0x180>)
         RCM_NoInj_array [formerNext].prev = handle;
 8002490:	7110      	strb	r0, [r2, #4]
         RCM_NoInj_array [LastEnable].next = handle;
 8002492:	7148      	strb	r0, [r1, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing )
 8002494:	7822      	ldrb	r2, [r4, #0]
 8002496:	e78e      	b.n	80023b6 <RCM_ExecRegularConv+0x72>
         RCM_currentHandle = handle;
 8002498:	4c0a      	ldr	r4, [pc, #40]	; (80024c4 <RCM_ExecRegularConv+0x180>)
 800249a:	4602      	mov	r2, r0
 800249c:	7020      	strb	r0, [r4, #0]
    while (i < RCM_MAX_CONV)
 800249e:	e78a      	b.n	80023b6 <RCM_ExecRegularConv+0x72>
      i++;
 80024a0:	2201      	movs	r2, #1
      if (RCM_NoInj_array [i].enable == true)
 80024a2:	4696      	mov	lr, r2
 80024a4:	e774      	b.n	8002390 <RCM_ExecRegularConv+0x4c>
 80024a6:	7c9a      	ldrb	r2, [r3, #18]
 80024a8:	b90a      	cbnz	r2, 80024ae <RCM_ExecRegularConv+0x16a>
      i++;
 80024aa:	2201      	movs	r2, #1
 80024ac:	e7e0      	b.n	8002470 <RCM_ExecRegularConv+0x12c>
        if (RCM_NoInj_array [i].next > handle)
 80024ae:	7dd9      	ldrb	r1, [r3, #23]
 80024b0:	4281      	cmp	r1, r0
      i++;
 80024b2:	f04f 0203 	mov.w	r2, #3
        if (RCM_NoInj_array [i].next > handle)
 80024b6:	d9db      	bls.n	8002470 <RCM_ExecRegularConv+0x12c>
 80024b8:	e769      	b.n	800238e <RCM_ExecRegularConv+0x4a>
      i++;
 80024ba:	2202      	movs	r2, #2
 80024bc:	e767      	b.n	800238e <RCM_ExecRegularConv+0x4a>
 80024be:	bf00      	nop
 80024c0:	20000a04 	.word	0x20000a04
 80024c4:	20000a20 	.word	0x20000a20
 80024c8:	2000034c 	.word	0x2000034c
 80024cc:	20000a24 	.word	0x20000a24

080024d0 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv ()
{
 80024d0:	b570      	push	{r4, r5, r6, lr}
  if (RCM_UserConvState == RCM_USERCONV_REQUESTED)
 80024d2:	4c12      	ldr	r4, [pc, #72]	; (800251c <RCM_ExecUserConv+0x4c>)
 80024d4:	7823      	ldrb	r3, [r4, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d000      	beq.n	80024dc <RCM_ExecUserConv+0xc>
    {
      RCM_UserConvState = RCM_USERCONV_IDLE;
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
    }
  }
}
 80024da:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024dc:	4d10      	ldr	r5, [pc, #64]	; (8002520 <RCM_ExecUserConv+0x50>)
 80024de:	7828      	ldrb	r0, [r5, #0]
 80024e0:	f7ff ff30 	bl	8002344 <RCM_ExecRegularConv>
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024e4:	782b      	ldrb	r3, [r5, #0]
 80024e6:	4a0f      	ldr	r2, [pc, #60]	; (8002524 <RCM_ExecUserConv+0x54>)
 80024e8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80024ec:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024f0:	490d      	ldr	r1, [pc, #52]	; (8002528 <RCM_ExecUserConv+0x58>)
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024f2:	7852      	ldrb	r2, [r2, #1]
    RCM_UserConvValue = RCM_ExecRegularConv (RCM_UserConvHandle);
 80024f4:	8008      	strh	r0, [r1, #0]
    if (RCM_NoInj_array [RCM_UserConvHandle].status != notvalid)
 80024f6:	b10a      	cbz	r2, 80024fc <RCM_ExecUserConv+0x2c>
      RCM_UserConvState = RCM_USERCONV_EOC;
 80024f8:	2202      	movs	r2, #2
 80024fa:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array [RCM_UserConvHandle].cb != NULL)
 80024fc:	4a0b      	ldr	r2, [pc, #44]	; (800252c <RCM_ExecUserConv+0x5c>)
 80024fe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002502:	2d00      	cmp	r5, #0
 8002504:	d0e9      	beq.n	80024da <RCM_ExecUserConv+0xa>
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002506:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800250a:	4601      	mov	r1, r0
 800250c:	4618      	mov	r0, r3
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800250e:	2300      	movs	r3, #0
 8002510:	7023      	strb	r3, [r4, #0]
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 8002512:	6852      	ldr	r2, [r2, #4]
 8002514:	462b      	mov	r3, r5
}
 8002516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array [RCM_UserConvHandle].cb (RCM_UserConvHandle, RCM_UserConvValue ,RCM_CB_array [RCM_UserConvHandle].data);
 800251a:	4718      	bx	r3
 800251c:	20000a1d 	.word	0x20000a1d
 8002520:	20000a1c 	.word	0x20000a1c
 8002524:	20000a04 	.word	0x20000a04
 8002528:	20000a1e 	.word	0x20000a1e
 800252c:	200009e4 	.word	0x200009e4

08002530 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv (void)
{
  if (RCM_NoInj_array [RCM_currentHandle].enable == true)
 8002530:	4a27      	ldr	r2, [pc, #156]	; (80025d0 <RCM_ExecNextConv+0xa0>)
 8002532:	4928      	ldr	r1, [pc, #160]	; (80025d4 <RCM_ExecNextConv+0xa4>)
 8002534:	7813      	ldrb	r3, [r2, #0]
 8002536:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800253a:	f811 0010 	ldrb.w	r0, [r1, r0, lsl #1]
 800253e:	2800      	cmp	r0, #0
 8002540:	d038      	beq.n	80025b4 <RCM_ExecNextConv+0x84>
{
 8002542:	b410      	push	{r4}
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped.*/

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC );
 8002544:	4c24      	ldr	r4, [pc, #144]	; (80025d8 <RCM_ExecNextConv+0xa8>)
 8002546:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800254a:	681b      	ldr	r3, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800254c:	2004      	movs	r0, #4
 800254e:	6018      	str	r0, [r3, #0]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 8002550:	7810      	ldrb	r0, [r2, #0]
 8002552:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
                                LL_ADC_REG_RANK_1,
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002556:	f893 c004 	ldrb.w	ip, [r3, #4]
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f1bc 0f09 	cmp.w	ip, #9
 8002560:	d929      	bls.n	80025b6 <RCM_ExecNextConv+0x86>
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 8002562:	2303      	movs	r3, #3
 8002564:	f06f 041d 	mvn.w	r4, #29
 8002568:	fb13 440c 	smlabb	r4, r3, ip, r4
 800256c:	2301      	movs	r3, #1
 800256e:	fa03 f30c 	lsl.w	r3, r3, ip
 8002572:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8002576:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 800257a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  MODIFY_REG(*preg,
 800257e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8002580:	0d1b      	lsrs	r3, r3, #20
 8002582:	f424 6cf8 	bic.w	ip, r4, #1984	; 0x7c0
 8002586:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800258a:	ea43 030c 	orr.w	r3, r3, ip
 800258e:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002590:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8002592:	6893      	ldr	r3, [r2, #8]

    LL_ADC_REG_ReadConversionData12( RCM_handle_array[RCM_currentHandle]->regADC );

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion( RCM_handle_array[RCM_currentHandle]->regADC );
    RCM_NoInj_array [RCM_currentHandle].status = ongoing;
 8002594:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002598:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800259c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80025a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025a4:	f043 0304 	orr.w	r3, r3, #4
 80025a8:	2001      	movs	r0, #1
 80025aa:	6093      	str	r3, [r2, #8]
 80025ac:	7048      	strb	r0, [r1, #1]
  }
  else
  {
  /* nothing to do, conversion not enabled have already notvalid status */
  }
}
 80025ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	4770      	bx	lr
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80025b6:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80025ba:	ea4f 638c 	mov.w	r3, ip, lsl #26
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80025be:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
                                __LL_ADC_DECIMAL_NB_TO_CHANNEL( RCM_handle_array[RCM_currentHandle]->channel ) );
 80025c2:	2401      	movs	r4, #1
 80025c4:	fa04 fc0c 	lsl.w	ip, r4, ip
    LL_ADC_REG_SetSequencerRanks( RCM_handle_array[RCM_currentHandle]->regADC,
 80025c8:	ea43 030c 	orr.w	r3, r3, ip
 80025cc:	e7d7      	b.n	800257e <RCM_ExecNextConv+0x4e>
 80025ce:	bf00      	nop
 80025d0:	20000a20 	.word	0x20000a20
 80025d4:	20000a04 	.word	0x20000a04
 80025d8:	20000a24 	.word	0x20000a24

080025dc <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv (void)
{
 80025dc:	b470      	push	{r4, r5, r6}
  if ( RCM_NoInj_array [RCM_currentHandle].status == ongoing &&
 80025de:	4c10      	ldr	r4, [pc, #64]	; (8002620 <RCM_ReadOngoingConv+0x44>)
 80025e0:	4a10      	ldr	r2, [pc, #64]	; (8002624 <RCM_ReadOngoingConv+0x48>)
 80025e2:	7823      	ldrb	r3, [r4, #0]
 80025e4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80025e8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80025ec:	0058      	lsls	r0, r3, #1
 80025ee:	f891 c001 	ldrb.w	ip, [r1, #1]
 80025f2:	f1bc 0f01 	cmp.w	ip, #1
 80025f6:	d006      	beq.n	8002606 <RCM_ReadOngoingConv+0x2a>
    RCM_NoInj_array [RCM_currentHandle].status = valid;
    /* Restore back DMA configuration. */
  }

  /* Prepare next conversion */
  RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80025f8:	4403      	add	r3, r0
 80025fa:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80025fe:	7953      	ldrb	r3, [r2, #5]
 8002600:	7023      	strb	r3, [r4, #0]
}
 8002602:	bc70      	pop	{r4, r5, r6}
 8002604:	4770      	bx	lr
      LL_ADC_IsActiveFlag_EOC( RCM_handle_array[RCM_currentHandle]->regADC ))
 8002606:	4d08      	ldr	r5, [pc, #32]	; (8002628 <RCM_ReadOngoingConv+0x4c>)
 8002608:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
 800260c:	682d      	ldr	r5, [r5, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800260e:	682e      	ldr	r6, [r5, #0]
 8002610:	0776      	lsls	r6, r6, #29
 8002612:	d5f1      	bpl.n	80025f8 <RCM_ReadOngoingConv+0x1c>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 8002614:	6c2d      	ldr	r5, [r5, #64]	; 0x40
 8002616:	804d      	strh	r5, [r1, #2]
    RCM_NoInj_array [RCM_currentHandle].status = valid;
 8002618:	2502      	movs	r5, #2
 800261a:	704d      	strb	r5, [r1, #1]
 800261c:	e7ec      	b.n	80025f8 <RCM_ReadOngoingConv+0x1c>
 800261e:	bf00      	nop
 8002620:	20000a20 	.word	0x20000a20
 8002624:	20000a04 	.word	0x20000a04
 8002628:	20000a24 	.word	0x20000a24

0800262c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800262c:	4b0e      	ldr	r3, [pc, #56]	; (8002668 <HAL_MspInit+0x3c>)
{
 800262e:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
 8002638:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 800263a:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800263c:	f002 0201 	and.w	r2, r2, #1
 8002640:	9200      	str	r2, [sp, #0]
 8002642:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002644:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800264a:	659a      	str	r2, [r3, #88]	; 0x58
 800264c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002654:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8002656:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002658:	f001 fef6 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800265c:	b003      	add	sp, #12
 800265e:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8002662:	f002 b9e5 	b.w	8004a30 <HAL_PWREx_DisableUCPDDeadBattery>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	00000000 	.word	0x00000000

08002670 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002670:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8002672:	6802      	ldr	r2, [r0, #0]
{
 8002674:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002676:	2300      	movs	r3, #0
  if(hadc->Instance==ADC1)
 8002678:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800267c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002680:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002684:	930a      	str	r3, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8002686:	d034      	beq.n	80026f2 <HAL_ADC_MspInit+0x82>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8002688:	4b3b      	ldr	r3, [pc, #236]	; (8002778 <HAL_ADC_MspInit+0x108>)
 800268a:	429a      	cmp	r2, r3
 800268c:	d002      	beq.n	8002694 <HAL_ADC_MspInit+0x24>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800268e:	b00d      	add	sp, #52	; 0x34
 8002690:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002694:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_ADC_MspInit+0x10c>)
 8002696:	6813      	ldr	r3, [r2, #0]
 8002698:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800269a:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800269c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800269e:	d057      	beq.n	8002750 <HAL_ADC_MspInit+0xe0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a0:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_ADC_MspInit+0x110>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	4838      	ldr	r0, [pc, #224]	; (8002784 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026a6:	f042 0204 	orr.w	r2, r2, #4
 80026aa:	64da      	str	r2, [r3, #76]	; 0x4c
 80026ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026ae:	f002 0204 	and.w	r2, r2, #4
 80026b2:	9204      	str	r2, [sp, #16]
 80026b4:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80026b8:	f042 0201 	orr.w	r2, r2, #1
 80026bc:	64da      	str	r2, [r3, #76]	; 0x4c
 80026be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c0:	f003 0301 	and.w	r3, r3, #1
 80026c4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80026c6:	2207      	movs	r2, #7
 80026c8:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80026cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026d0:	9b05      	ldr	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d2:	f002 f831 	bl	8004738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80026d6:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8002768 <HAL_ADC_MspInit+0xf8>
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026da:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80026dc:	a906      	add	r1, sp, #24
 80026de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin;
 80026e2:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_BUS_VOLTAGE_GPIO_Port, &GPIO_InitStruct);
 80026e8:	f002 f826 	bl	8004738 <HAL_GPIO_Init>
}
 80026ec:	b00d      	add	sp, #52	; 0x34
 80026ee:	f85d fb04 	ldr.w	pc, [sp], #4
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026f2:	4a22      	ldr	r2, [pc, #136]	; (800277c <HAL_ADC_MspInit+0x10c>)
 80026f4:	6813      	ldr	r3, [r2, #0]
 80026f6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026f8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80026fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80026fc:	d01d      	beq.n	800273a <HAL_ADC_MspInit+0xca>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_ADC_MspInit+0x110>)
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002700:	4820      	ldr	r0, [pc, #128]	; (8002784 <HAL_ADC_MspInit+0x114>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002702:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002704:	f042 0204 	orr.w	r2, r2, #4
 8002708:	64da      	str	r2, [r3, #76]	; 0x4c
 800270a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800270c:	f002 0204 	and.w	r2, r2, #4
 8002710:	9201      	str	r2, [sp, #4]
 8002712:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002714:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	64da      	str	r2, [r3, #76]	; 0x4c
 800271c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 8002724:	2202      	movs	r2, #2
 8002726:	2303      	movs	r3, #3
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002728:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_CURR_AMPL_V_Pin;
 800272a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800272e:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_AMPL_V_GPIO_Port, &GPIO_InitStruct);
 8002730:	f002 f802 	bl	8004738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin;
 8002734:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002770 <HAL_ADC_MspInit+0x100>
 8002738:	e7cf      	b.n	80026da <HAL_ADC_MspInit+0x6a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800273a:	4b11      	ldr	r3, [pc, #68]	; (8002780 <HAL_ADC_MspInit+0x110>)
 800273c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800273e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002742:	64da      	str	r2, [r3, #76]	; 0x4c
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	9b00      	ldr	r3, [sp, #0]
 800274e:	e7d6      	b.n	80026fe <HAL_ADC_MspInit+0x8e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_ADC_MspInit+0x110>)
 8002752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002754:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002758:	64da      	str	r2, [r3, #76]	; 0x4c
 800275a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002760:	9303      	str	r3, [sp, #12]
 8002762:	9b03      	ldr	r3, [sp, #12]
 8002764:	e79c      	b.n	80026a0 <HAL_ADC_MspInit+0x30>
 8002766:	bf00      	nop
 8002768:	00000002 	.word	0x00000002
 800276c:	00000003 	.word	0x00000003
 8002770:	00000001 	.word	0x00000001
 8002774:	00000003 	.word	0x00000003
 8002778:	50000100 	.word	0x50000100
 800277c:	20000a34 	.word	0x20000a34
 8002780:	40021000 	.word	0x40021000
 8002784:	48000800 	.word	0x48000800

08002788 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8002788:	4b0a      	ldr	r3, [pc, #40]	; (80027b4 <HAL_CORDIC_MspInit+0x2c>)
 800278a:	6802      	ldr	r2, [r0, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d000      	beq.n	8002792 <HAL_CORDIC_MspInit+0xa>
 8002790:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8002792:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 8002796:	f042 0208 	orr.w	r2, r2, #8
 800279a:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 800279e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 80027a2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80027a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CORDIC_MspInit 1 */

  /* USER CODE END CORDIC_MspInit 1 */
  }

}
 80027ae:	b002      	add	sp, #8
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40020c00 	.word	0x40020c00

080027b8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80027b8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC1)
 80027ba:	4a1b      	ldr	r2, [pc, #108]	; (8002828 <HAL_DAC_MspInit+0x70>)
 80027bc:	6801      	ldr	r1, [r0, #0]
{
 80027be:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	2300      	movs	r3, #0
  if(hdac->Instance==DAC1)
 80027c2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027c8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027cc:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC1)
 80027ce:	d002      	beq.n	80027d6 <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80027d0:	b009      	add	sp, #36	; 0x24
 80027d2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027d6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027da:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 80027de:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002820 <HAL_DAC_MspInit+0x68>
    __HAL_RCC_DAC1_CLK_ENABLE();
 80027e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027e4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80027ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027ec:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 80027f0:	9200      	str	r2, [sp, #0]
 80027f2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80027f6:	f042 0201 	orr.w	r2, r2, #1
 80027fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002804:	a902      	add	r1, sp, #8
 8002806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = DBG_DAC_CH1_Pin;
 800280a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DBG_DAC_CH1_GPIO_Port, &GPIO_InitStruct);
 8002810:	f001 ff92 	bl	8004738 <HAL_GPIO_Init>
}
 8002814:	b009      	add	sp, #36	; 0x24
 8002816:	f85d fb04 	ldr.w	pc, [sp], #4
 800281a:	bf00      	nop
 800281c:	f3af 8000 	nop.w
 8002820:	00000010 	.word	0x00000010
 8002824:	00000003 	.word	0x00000003
 8002828:	50000800 	.word	0x50000800
 800282c:	00000000 	.word	0x00000000

08002830 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002830:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002832:	4a1b      	ldr	r2, [pc, #108]	; (80028a0 <HAL_TIM_Base_MspInit+0x70>)
 8002834:	6801      	ldr	r1, [r0, #0]
{
 8002836:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800283a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800283c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002840:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002844:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8002846:	d001      	beq.n	800284c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002848:	b008      	add	sp, #32
 800284a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800284c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002850:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002854:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002898 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002858:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800285a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800285e:	661a      	str	r2, [r3, #96]	; 0x60
 8002860:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002862:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002866:	9200      	str	r2, [sp, #0]
 8002868:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800286c:	f042 0201 	orr.w	r2, r2, #1
 8002870:	64da      	str	r2, [r3, #76]	; 0x4c
 8002872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800287a:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800287c:	230c      	movs	r3, #12
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800287e:	a902      	add	r1, sp, #8
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002884:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002888:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800288a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF12_TIM1_COMP1;
 800288c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800288e:	f001 ff53 	bl	8004738 <HAL_GPIO_Init>
}
 8002892:	b008      	add	sp, #32
 8002894:	bd10      	pop	{r4, pc}
 8002896:	bf00      	nop
 8002898:	00000800 	.word	0x00000800
 800289c:	00000012 	.word	0x00000012
 80028a0:	40012c00 	.word	0x40012c00

080028a4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80028a4:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 80028a6:	6802      	ldr	r2, [r0, #0]
{
 80028a8:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028aa:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM2)
 80028ac:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80028b4:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80028b8:	9308      	str	r3, [sp, #32]
  if(htim_encoder->Instance==TIM2)
 80028ba:	d001      	beq.n	80028c0 <HAL_TIM_Encoder_MspInit+0x1c>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028bc:	b00a      	add	sp, #40	; 0x28
 80028be:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028c0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028c4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028c8:	2401      	movs	r4, #1
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028cc:	4322      	orrs	r2, r4
 80028ce:	659a      	str	r2, [r3, #88]	; 0x58
 80028d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028d2:	4022      	ands	r2, r4
 80028d4:	9201      	str	r2, [sp, #4]
 80028d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028da:	4322      	orrs	r2, r4
 80028dc:	64da      	str	r2, [r3, #76]	; 0x4c
 80028de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e0:	4022      	ands	r2, r4
 80028e2:	9202      	str	r2, [sp, #8]
 80028e4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80028e8:	f042 0202 	orr.w	r2, r2, #2
 80028ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80028ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028f0:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80028f8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 80028fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80028fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 8002902:	2302      	movs	r3, #2
 8002904:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002908:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 800290a:	f001 ff15 	bl	8004738 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 800290e:	2208      	movs	r2, #8
 8002910:	2302      	movs	r3, #2
 8002912:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002916:	4805      	ldr	r0, [pc, #20]	; (800292c <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002918:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 800291a:	2200      	movs	r2, #0
 800291c:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800291e:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 8002920:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 8002924:	f001 ff08 	bl	8004738 <HAL_GPIO_Init>
}
 8002928:	b00a      	add	sp, #40	; 0x28
 800292a:	bd10      	pop	{r4, pc}
 800292c:	48000400 	.word	0x48000400

08002930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002930:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_TIM_MspPostInit+0x70>)
 8002934:	6801      	ldr	r1, [r0, #0]
{
 8002936:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800293a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800293c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002940:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002944:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8002946:	d002      	beq.n	800294e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002948:	b009      	add	sp, #36	; 0x24
 800294a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002952:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002956:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8002990 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800295c:	f042 0201 	orr.w	r2, r2, #1
 8002960:	64da      	str	r2, [r3, #76]	; 0x4c
 8002962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8002964:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002968:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002998 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002972:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002974:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800297a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002980:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002982:	f001 fed9 	bl	8004738 <HAL_GPIO_Init>
}
 8002986:	b009      	add	sp, #36	; 0x24
 8002988:	f85d fb04 	ldr.w	pc, [sp], #4
 800298c:	f3af 8000 	nop.w
 8002990:	00000700 	.word	0x00000700
 8002994:	00000002 	.word	0x00000002
 8002998:	00000002 	.word	0x00000002
 800299c:	00000002 	.word	0x00000002
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	00000000 	.word	0x00000000

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 80029aa:	4a1b      	ldr	r2, [pc, #108]	; (8002a18 <HAL_UART_MspInit+0x70>)
 80029ac:	6801      	ldr	r1, [r0, #0]
{
 80029ae:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	2300      	movs	r3, #0
  if(huart->Instance==USART2)
 80029b2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80029b8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80029bc:	9306      	str	r3, [sp, #24]
  if(huart->Instance==USART2)
 80029be:	d002      	beq.n	80029c6 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029c0:	b009      	add	sp, #36	; 0x24
 80029c2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 80029c6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029ca:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80029ce:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002a10 <HAL_UART_MspInit+0x68>
    __HAL_RCC_USART2_CLK_ENABLE();
 80029d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029d4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80029d8:	659a      	str	r2, [r3, #88]	; 0x58
 80029da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80029dc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80029e0:	9200      	str	r2, [sp, #0]
 80029e2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	64da      	str	r2, [r3, #76]	; 0x4c
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029f6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80029fc:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a00:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a02:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a04:	f001 fe98 	bl	8004738 <HAL_GPIO_Init>
}
 8002a08:	b009      	add	sp, #36	; 0x24
 8002a0a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a0e:	bf00      	nop
 8002a10:	0000000c 	.word	0x0000000c
 8002a14:	00000002 	.word	0x00000002
 8002a18:	40004400 	.word	0x40004400

08002a1c <ADC1_2_IRQHandler>:
  * @brief  This function handles ADC1/ADC2 interrupt request.
  * @param  None
  * @retval None
  */
void ADC1_2_IRQHandler(void)
{
 8002a1c:	b508      	push	{r3, lr}
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8002a1e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a22:	2240      	movs	r2, #64	; 0x40
 8002a24:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  UI_DACUpdate(TSK_HighFrequencyTask());
 8002a26:	f7fe fe0f 	bl	8001648 <TSK_HighFrequencyTask>
 /* USER CODE END HighFreq  */

 /* USER CODE BEGIN ADC1_2_IRQn 1 */

 /* USER CODE END ADC1_2_IRQn 1 */
}
 8002a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  UI_DACUpdate(TSK_HighFrequencyTask());
 8002a2e:	f000 b971 	b.w	8002d14 <UI_DACUpdate>
 8002a32:	bf00      	nop

08002a34 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8002a36:	4804      	ldr	r0, [pc, #16]	; (8002a48 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8002a38:	f06f 0201 	mvn.w	r2, #1
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	f005 b813 	b.w	8007a68 <R3_2_TIMx_UP_IRQHandler>
 8002a42:	bf00      	nop
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	2000034c 	.word	0x2000034c

08002a4c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002a4c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002a50:	691a      	ldr	r2, [r3, #16]
 8002a52:	0611      	lsls	r1, r2, #24
 8002a54:	d505      	bpl.n	8002a62 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8002a56:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_2_BRK_IRQHandler(&PWM_Handle_M1);
 8002a5a:	480a      	ldr	r0, [pc, #40]	; (8002a84 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a5c:	611a      	str	r2, [r3, #16]
 8002a5e:	f005 f85f 	bl	8007b20 <R3_2_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002a62:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	05d2      	lsls	r2, r2, #23
 8002a68:	d505      	bpl.n	8002a76 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8002a6a:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_2_BRK2_IRQHandler(&PWM_Handle_M1);
 8002a6e:	4805      	ldr	r0, [pc, #20]	; (8002a84 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002a70:	611a      	str	r2, [r3, #16]
 8002a72:	f005 f835 	bl	8007ae0 <R3_2_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8002a76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8002a7a:	f7fe bdb9 	b.w	80015f0 <MC_Scheduler>
 8002a7e:	bf00      	nop
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	2000034c 	.word	0x2000034c

08002a88 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

 /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE (ENCODER_M1.TIMx) && LL_TIM_IsActiveFlag_UPDATE (ENCODER_M1.TIMx))
 8002a88:	4806      	ldr	r0, [pc, #24]	; (8002aa4 <TIM2_IRQHandler+0x1c>)
 8002a8a:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsEnabledIT_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	07d1      	lsls	r1, r2, #31
 8002a90:	d502      	bpl.n	8002a98 <TIM2_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	07d2      	lsls	r2, r2, #31
 8002a96:	d400      	bmi.n	8002a9a <TIM2_IRQHandler+0x12>
  /* No other IT to manage for encoder config */
  }
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8002a98:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002a9a:	f06f 0201 	mvn.w	r2, #1
 8002a9e:	611a      	str	r2, [r3, #16]
    ENC_IRQHandler(&ENCODER_M1);
 8002aa0:	f003 bf5c 	b.w	800695c <ENC_IRQHandler>
 8002aa4:	200000f0 	.word	0x200000f0

08002aa8 <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USART_IRQHandler(void)
{
 8002aa8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART_IRQn 0 */

  /* USER CODE END USART_IRQn 0 */
  if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002aaa:	4c18      	ldr	r4, [pc, #96]	; (8002b0c <USART2_IRQHandler+0x64>)
 8002aac:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002ab0:	69da      	ldr	r2, [r3, #28]
 8002ab2:	0691      	lsls	r1, r2, #26
 8002ab4:	d50b      	bpl.n	8002ace <USART2_IRQHandler+0x26>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002ab6:	6a59      	ldr	r1, [r3, #36]	; 0x24
  {
    uint16_t retVal;
    retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx))); /* Flag 0 = RX */
 8002ab8:	4620      	mov	r0, r4
 8002aba:	b2c9      	uxtb	r1, r1
 8002abc:	f005 ff3a 	bl	8008934 <UFCP_RX_IRQ_Handler>
 8002ac0:	8803      	ldrh	r3, [r0, #0]
    if (retVal == 1)
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d01a      	beq.n	8002afc <USART2_IRQHandler+0x54>
    {
      UI_SerialCommunicationTimeOutStart();
    }
    if (retVal == 2)
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d01d      	beq.n	8002b06 <USART2_IRQHandler+0x5e>
  /* USER CODE BEGIN USART_RXNE */

  /* USER CODE END USART_RXNE  */
  }

  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002aca:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002ace:	69da      	ldr	r2, [r3, #28]
 8002ad0:	0612      	lsls	r2, r2, #24
 8002ad2:	d504      	bpl.n	8002ade <USART2_IRQHandler+0x36>
  {
    UFCP_TX_IRQ_Handler(&pUSART);
 8002ad4:	480d      	ldr	r0, [pc, #52]	; (8002b0c <USART2_IRQHandler+0x64>)
 8002ad6:	f005 fe89 	bl	80087ec <UFCP_TX_IRQ_Handler>
    /* USER CODE BEGIN USART_TXE */

    /* USER CODE END USART_TXE   */
  }

  if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002ada:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	071b      	lsls	r3, r3, #28
 8002ae2:	d50a      	bpl.n	8002afa <USART2_IRQHandler+0x52>
  {
    /* Send Overrun message */
    UFCP_OVR_IRQ_Handler(&pUSART);
 8002ae4:	4809      	ldr	r0, [pc, #36]	; (8002b0c <USART2_IRQHandler+0x64>)
 8002ae6:	f005 ff8f 	bl	8008a08 <UFCP_OVR_IRQ_Handler>
    LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002aea:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002aee:	2208      	movs	r2, #8
    /* USER CODE END USART_ORE   */
  }
  /* USER CODE BEGIN USART_IRQn 1 */

  /* USER CODE END USART_IRQn 1 */
}
 8002af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002af4:	621a      	str	r2, [r3, #32]
    UI_SerialCommunicationTimeOutStop();
 8002af6:	f000 b91d 	b.w	8002d34 <UI_SerialCommunicationTimeOutStop>
}
 8002afa:	bd10      	pop	{r4, pc}
      UI_SerialCommunicationTimeOutStart();
 8002afc:	f000 f920 	bl	8002d40 <UI_SerialCommunicationTimeOutStart>
  if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002b00:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 8002b04:	e7e3      	b.n	8002ace <USART2_IRQHandler+0x26>
      UI_SerialCommunicationTimeOutStop();
 8002b06:	f000 f915 	bl	8002d34 <UI_SerialCommunicationTimeOutStop>
 8002b0a:	e7de      	b.n	8002aca <USART2_IRQHandler+0x22>
 8002b0c:	2000053c 	.word	0x2000053c

08002b10 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8002b10:	b538      	push	{r3, r4, r5, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8002b12:	f7fe fe85 	bl	8001820 <TSK_HardwareFaultTask>
 8002b16:	4c18      	ldr	r4, [pc, #96]	; (8002b78 <HardFault_Handler+0x68>)
 8002b18:	2508      	movs	r5, #8

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
    {
      if (LL_USART_IsActiveFlag_ORE(pUSART.USARTx)) /* Overrun error occurs */
 8002b1a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	0711      	lsls	r1, r2, #28
      {
        /* Send Overrun message */
        UFCP_OVR_IRQ_Handler(&pUSART);
 8002b22:	4620      	mov	r0, r4
 8002b24:	d508      	bpl.n	8002b38 <HardFault_Handler+0x28>
 8002b26:	f005 ff6f 	bl	8008a08 <UFCP_OVR_IRQ_Handler>
        LL_USART_ClearFlag_ORE(pUSART.USARTx); /* Clear overrun flag */
 8002b2a:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  WRITE_REG(USARTx->ICR, USART_ICR_ORECF);
 8002b2e:	621d      	str	r5, [r3, #32]
        UI_SerialCommunicationTimeOutStop();
 8002b30:	f000 f900 	bl	8002d34 <UI_SerialCommunicationTimeOutStop>
      }

      if (LL_USART_IsActiveFlag_TXE(pUSART.USARTx))
 8002b34:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8002b38:	69da      	ldr	r2, [r3, #28]
 8002b3a:	0612      	lsls	r2, r2, #24
      {
        UFCP_TX_IRQ_Handler(&pUSART);
 8002b3c:	4620      	mov	r0, r4
 8002b3e:	d513      	bpl.n	8002b68 <HardFault_Handler+0x58>
 8002b40:	f005 fe54 	bl	80087ec <UFCP_TX_IRQ_Handler>
      }

      if (LL_USART_IsActiveFlag_RXNE(pUSART.USARTx)) /* Valid data have been received */
 8002b44:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b48:	69da      	ldr	r2, [r3, #28]
 8002b4a:	0691      	lsls	r1, r2, #26
 8002b4c:	d5e7      	bpl.n	8002b1e <HardFault_Handler+0xe>
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8002b4e:	6a59      	ldr	r1, [r3, #36]	; 0x24
      {
        uint16_t retVal;
        retVal = *(uint16_t*)(UFCP_RX_IRQ_Handler(&pUSART,LL_USART_ReceiveData8(pUSART.USARTx)));
 8002b50:	4620      	mov	r0, r4
 8002b52:	b2c9      	uxtb	r1, r1
 8002b54:	f005 feee 	bl	8008934 <UFCP_RX_IRQ_Handler>
 8002b58:	8803      	ldrh	r3, [r0, #0]
        if (retVal == 1)
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d008      	beq.n	8002b70 <HardFault_Handler+0x60>
        {
          UI_SerialCommunicationTimeOutStart();
        }
        if (retVal == 2)
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d1db      	bne.n	8002b1a <HardFault_Handler+0xa>
        {
          UI_SerialCommunicationTimeOutStop();
 8002b62:	f000 f8e7 	bl	8002d34 <UI_SerialCommunicationTimeOutStop>
 8002b66:	e7d8      	b.n	8002b1a <HardFault_Handler+0xa>
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8002b68:	69da      	ldr	r2, [r3, #28]
 8002b6a:	0692      	lsls	r2, r2, #26
 8002b6c:	d5d7      	bpl.n	8002b1e <HardFault_Handler+0xe>
 8002b6e:	e7ee      	b.n	8002b4e <HardFault_Handler+0x3e>
          UI_SerialCommunicationTimeOutStart();
 8002b70:	f000 f8e6 	bl	8002d40 <UI_SerialCommunicationTimeOutStart>
        if (retVal == 2)
 8002b74:	e7d1      	b.n	8002b1a <HardFault_Handler+0xa>
 8002b76:	bf00      	nop
 8002b78:	2000053c 	.word	0x2000053c

08002b7c <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8002b7c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8002b7e:	4c0a      	ldr	r4, [pc, #40]	; (8002ba8 <SysTick_Handler+0x2c>)
 8002b80:	7823      	ldrb	r3, [r4, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d009      	beq.n	8002b9a <SysTick_Handler+0x1e>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	7023      	strb	r3, [r4, #0]
#endif /* MC_HAL_IS_USED */

  /* USER CODE BEGIN SysTick_IRQn 1 */
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();
 8002b8c:	f7fe fe38 	bl	8001800 <MC_RunMotorControlTasks>
    TC_IncTick(&pPosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8002b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&pPosCtrlM1);
 8002b94:	4805      	ldr	r0, [pc, #20]	; (8002bac <SysTick_Handler+0x30>)
 8002b96:	f005 be23 	b.w	80087e0 <TC_IncTick>
    HAL_IncTick();
 8002b9a:	f000 fd47 	bl	800362c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8002b9e:	f001 fccd 	bl	800453c <HAL_SYSTICK_IRQHandler>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e7f1      	b.n	8002b8a <SysTick_Handler+0xe>
 8002ba6:	bf00      	nop
 8002ba8:	2000067c 	.word	0x2000067c
 8002bac:	200004cc 	.word	0x200004cc

08002bb0 <EXTI15_10_IRQHandler>:
/**
  * @brief  This function handles Button IRQ on PIN PC13.
  *                 and M1 Encoder Index IRQ on PIN PB10.
  */
void EXTI15_10_IRQHandler (void)
{
 8002bb0:	b508      	push	{r3, lr}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002bb2:	4b0d      	ldr	r3, [pc, #52]	; (8002be8 <EXTI15_10_IRQHandler+0x38>)
 8002bb4:	695a      	ldr	r2, [r3, #20]
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8002bb6:	0491      	lsls	r1, r2, #18
 8002bb8:	d404      	bmi.n	8002bc4 <EXTI15_10_IRQHandler+0x14>
 8002bba:	4b0b      	ldr	r3, [pc, #44]	; (8002be8 <EXTI15_10_IRQHandler+0x38>)
 8002bbc:	695a      	ldr	r2, [r3, #20]
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

	/* USER CODE BEGIN ENCODER Z INDEX M1 */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8002bbe:	0552      	lsls	r2, r2, #21
 8002bc0:	d409      	bmi.n	8002bd6 <EXTI15_10_IRQHandler+0x26>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_10);
    TC_EncoderReset(&pPosCtrlM1);
  }

}
 8002bc2:	bd08      	pop	{r3, pc}
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002bc4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bc8:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8002bca:	f000 f8bf 	bl	8002d4c <UI_HandleStartStopButton_cb>
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8002bce:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <EXTI15_10_IRQHandler+0x38>)
 8002bd0:	695a      	ldr	r2, [r3, #20]
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8002bd2:	0552      	lsls	r2, r2, #21
 8002bd4:	d5f5      	bpl.n	8002bc2 <EXTI15_10_IRQHandler+0x12>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002bd6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bda:	615a      	str	r2, [r3, #20]
    TC_EncoderReset(&pPosCtrlM1);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <EXTI15_10_IRQHandler+0x3c>)
}
 8002bde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    TC_EncoderReset(&pPosCtrlM1);
 8002be2:	f005 bdc1 	b.w	8008768 <TC_EncoderReset>
 8002be6:	bf00      	nop
 8002be8:	40010400 	.word	0x40010400
 8002bec:	200004cc 	.word	0x200004cc

08002bf0 <UI_TaskInit>:
static volatile uint16_t  bCOMTimeoutCounter;
static volatile uint16_t  bCOMATRTimeCounter = SERIALCOM_ATR_TIME_TICKS;

void UI_TaskInit( uint32_t* pUICfg, uint8_t bMCNum, MCI_Handle_t* pMCIList[],
                  MCT_Handle_t* pMCTList[],const char* s_fwVer )
{
 8002bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pDAC = &DAC_UI_Params;
      pDAC->_Super = UI_Params;
 8002bf4:	4d2d      	ldr	r5, [pc, #180]	; (8002cac <UI_TaskInit+0xbc>)
      pDAC = &DAC_UI_Params;
 8002bf6:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 8002cc4 <UI_TaskInit+0xd4>
 8002bfa:	4e2d      	ldr	r6, [pc, #180]	; (8002cb0 <UI_TaskInit+0xc0>)
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );

    pMCP = &MCP_UI_Params;
 8002bfc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8002cc8 <UI_TaskInit+0xd8>
      pDAC = &DAC_UI_Params;
 8002c00:	f8c6 e000 	str.w	lr, [r6]
{
 8002c04:	b087      	sub	sp, #28
 8002c06:	4690      	mov	r8, r2
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002c08:	9000      	str	r0, [sp, #0]
{
 8002c0a:	9a10      	ldr	r2, [sp, #64]	; 0x40
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002c0c:	9004      	str	r0, [sp, #16]
      pDAC->_Super = UI_Params;
 8002c0e:	462c      	mov	r4, r5
{
 8002c10:	460f      	mov	r7, r1
 8002c12:	4699      	mov	r9, r3
 8002c14:	9205      	str	r2, [sp, #20]
      pDAC->_Super = UI_Params;
 8002c16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c18:	46f4      	mov	ip, lr
 8002c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c24:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
      UI_Init( &pDAC->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Init UI and link MC obj */
 8002c2c:	4670      	mov	r0, lr
 8002c2e:	464b      	mov	r3, r9
 8002c30:	4642      	mov	r2, r8
 8002c32:	4639      	mov	r1, r7
 8002c34:	f000 f896 	bl	8002d64 <UI_Init>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002c38:	6830      	ldr	r0, [r6, #0]
    pMCP->_Super = UI_Params;

    UFCP_Init( & pUSART );
 8002c3a:	f8df b090 	ldr.w	fp, [pc, #144]	; 8002ccc <UI_TaskInit+0xdc>
      UI_DACInit( &pDAC->_Super ); /* Init DAC */
 8002c3e:	f000 fa43 	bl	80030c8 <UI_DACInit>
      UI_SetDAC( &pDAC->_Super, DAC_CH0, MC_PROTOCOL_REG_I_A );
 8002c42:	6830      	ldr	r0, [r6, #0]
 8002c44:	2223      	movs	r2, #35	; 0x23
 8002c46:	2100      	movs	r1, #0
 8002c48:	f000 fa46 	bl	80030d8 <UI_SetDAC>
      UI_SetDAC( &pDAC->_Super, DAC_CH1, MC_PROTOCOL_REG_I_B );
 8002c4c:	6830      	ldr	r0, [r6, #0]
 8002c4e:	2224      	movs	r2, #36	; 0x24
 8002c50:	2101      	movs	r1, #1
 8002c52:	f000 fa41 	bl	80030d8 <UI_SetDAC>
    pMCP = &MCP_UI_Params;
 8002c56:	4b17      	ldr	r3, [pc, #92]	; (8002cb4 <UI_TaskInit+0xc4>)
 8002c58:	f8ca 3000 	str.w	r3, [sl]
    pMCP->_Super = UI_Params;
 8002c5c:	469c      	mov	ip, r3
 8002c5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c60:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c66:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8002c6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002c6e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    UFCP_Init( & pUSART );
 8002c72:	4658      	mov	r0, fp
 8002c74:	f005 fdb8 	bl	80087e8 <UFCP_Init>
    MCP_Init(pMCP, (FCP_Handle_t *) & pUSART, & UFCP_Send, & UFCP_Receive, & UFCP_AbortReceive, pDAC, s_fwVer);
 8002c78:	6833      	ldr	r3, [r6, #0]
 8002c7a:	9a05      	ldr	r2, [sp, #20]
 8002c7c:	9301      	str	r3, [sp, #4]
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <UI_TaskInit+0xc8>)
 8002c80:	f8da 0000 	ldr.w	r0, [sl]
 8002c84:	9202      	str	r2, [sp, #8]
 8002c86:	4659      	mov	r1, fp
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	4a0c      	ldr	r2, [pc, #48]	; (8002cbc <UI_TaskInit+0xcc>)
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <UI_TaskInit+0xd0>)
 8002c8e:	f7ff fa1f 	bl	80020d0 <MCP_Init>
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002c92:	9b04      	ldr	r3, [sp, #16]
 8002c94:	f8da 0000 	ldr.w	r0, [sl]
 8002c98:	9310      	str	r3, [sp, #64]	; 0x40
 8002c9a:	4642      	mov	r2, r8
 8002c9c:	464b      	mov	r3, r9
 8002c9e:	4639      	mov	r1, r7

}
 8002ca0:	b007      	add	sp, #28
 8002ca2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    UI_Init( &pMCP->_Super, bMCNum, pMCIList, pMCTList, pUICfg ); /* Initialize UI and link MC components */
 8002ca6:	f000 b85d 	b.w	8002d64 <UI_Init>
 8002caa:	bf00      	nop
 8002cac:	20000464 	.word	0x20000464
 8002cb0:	20000b08 	.word	0x20000b08
 8002cb4:	20000a38 	.word	0x20000a38
 8002cb8:	08008a29 	.word	0x08008a29
 8002cbc:	0800887d 	.word	0x0800887d
 8002cc0:	08008855 	.word	0x08008855
 8002cc4:	200000b4 	.word	0x200000b4
 8002cc8:	20000b0c 	.word	0x20000b0c
 8002ccc:	2000053c 	.word	0x2000053c

08002cd0 <UI_Scheduler>:

__weak void UI_Scheduler(void)
{
  if(bUITaskCounter > 0u)
 8002cd0:	4a0d      	ldr	r2, [pc, #52]	; (8002d08 <UI_Scheduler+0x38>)
 8002cd2:	8813      	ldrh	r3, [r2, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	b11b      	cbz	r3, 8002ce0 <UI_Scheduler+0x10>
  {
    bUITaskCounter--;
 8002cd8:	8813      	ldrh	r3, [r2, #0]
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMTimeoutCounter > 1u)
 8002ce0:	4a0a      	ldr	r2, [pc, #40]	; (8002d0c <UI_Scheduler+0x3c>)
 8002ce2:	8813      	ldrh	r3, [r2, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d903      	bls.n	8002cf2 <UI_Scheduler+0x22>
  {
    bCOMTimeoutCounter--;
 8002cea:	8813      	ldrh	r3, [r2, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	8013      	strh	r3, [r2, #0]
  }

  if(bCOMATRTimeCounter > 1u)
 8002cf2:	4a07      	ldr	r2, [pc, #28]	; (8002d10 <UI_Scheduler+0x40>)
 8002cf4:	8813      	ldrh	r3, [r2, #0]
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d903      	bls.n	8002d04 <UI_Scheduler+0x34>
  {
    bCOMATRTimeCounter--;
 8002cfc:	8813      	ldrh	r3, [r2, #0]
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	8013      	strh	r3, [r2, #0]
  }
}
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	20000b06 	.word	0x20000b06
 8002d0c:	20000b04 	.word	0x20000b04
 8002d10:	2000067e 	.word	0x2000067e

08002d14 <UI_DACUpdate>:

__weak void UI_DACUpdate(uint8_t bMotorNbr)
{
 8002d14:	b538      	push	{r3, r4, r5, lr}
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002d16:	4d06      	ldr	r5, [pc, #24]	; (8002d30 <UI_DACUpdate+0x1c>)
{
 8002d18:	4604      	mov	r4, r0
  if (UI_GetSelectedMC(&pDAC->_Super) == bMotorNbr)
 8002d1a:	6828      	ldr	r0, [r5, #0]
 8002d1c:	f000 f834 	bl	8002d88 <UI_GetSelectedMC>
 8002d20:	42a0      	cmp	r0, r4
 8002d22:	d000      	beq.n	8002d26 <UI_DACUpdate+0x12>
  {
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
  }
}
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002d26:	6828      	ldr	r0, [r5, #0]
}
 8002d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    UI_DACExec(&pDAC->_Super); /* Exec DAC update */
 8002d2c:	f000 b9d0 	b.w	80030d0 <UI_DACExec>
 8002d30:	20000b08 	.word	0x20000b08

08002d34 <UI_SerialCommunicationTimeOutStop>:
  return (retVal);
}

__weak void UI_SerialCommunicationTimeOutStop(void)
{
  bCOMTimeoutCounter = 0u;
 8002d34:	4b01      	ldr	r3, [pc, #4]	; (8002d3c <UI_SerialCommunicationTimeOutStop+0x8>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	801a      	strh	r2, [r3, #0]
}
 8002d3a:	4770      	bx	lr
 8002d3c:	20000b04 	.word	0x20000b04

08002d40 <UI_SerialCommunicationTimeOutStart>:

__weak void UI_SerialCommunicationTimeOutStart(void)
{
  bCOMTimeoutCounter = SERIALCOM_TIMEOUT_OCCURENCE_TICKS;
 8002d40:	4b01      	ldr	r3, [pc, #4]	; (8002d48 <UI_SerialCommunicationTimeOutStart+0x8>)
 8002d42:	224f      	movs	r2, #79	; 0x4f
 8002d44:	801a      	strh	r2, [r3, #0]
}
 8002d46:	4770      	bx	lr
 8002d48:	20000b04 	.word	0x20000b04

08002d4c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d4c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (MC_GetSTMStateMotor1() == IDLE)
 8002d4e:	f7fd ff85 	bl	8000c5c <MC_GetSTMStateMotor1>
 8002d52:	b918      	cbnz	r0, 8002d5c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StartMotor1();
 8002d58:	f7fd bf6e 	b.w	8000c38 <MC_StartMotor1>
}
 8002d5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    MC_StopMotor1();
 8002d60:	f7fd bf70 	b.w	8000c44 <MC_StopMotor1>

08002d64 <UI_Init>:
  */
__weak void UI_Init(UI_Handle_t *pHandle, uint8_t bMCNum, MCI_Handle_t ** pMCI, MCT_Handle_t** pMCT, uint32_t* pUICfg)
{
  pHandle->bDriveNum = bMCNum;
  pHandle->pMCI = pMCI;
  pHandle->pMCT = pMCT;
 8002d64:	e9c0 2308 	strd	r2, r3, [r0, #32]
  pHandle->bDriveNum = bMCNum;
 8002d68:	7701      	strb	r1, [r0, #28]
  pHandle->bSelectedDrive = 0u;
  pHandle->pUICfg = pUICfg;
 8002d6a:	9b00      	ldr	r3, [sp, #0]
 8002d6c:	6283      	str	r3, [r0, #40]	; 0x28
  pHandle->bSelectedDrive = 0u;
 8002d6e:	2100      	movs	r1, #0
 8002d70:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
}
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop

08002d78 <UI_SelectMC>:
  * @retval Boolean set to true if the bSelectMC is valid oterwise return false.
  */
__weak bool UI_SelectMC(UI_Handle_t *pHandle,uint8_t bSelectMC)
{
  bool retVal = true;
  if (bSelectMC  >= pHandle->bDriveNum)
 8002d78:	7f03      	ldrb	r3, [r0, #28]
 8002d7a:	428b      	cmp	r3, r1
  {
    retVal = false;
  }
  else
  {
    pHandle->bSelectedDrive = bSelectMC;
 8002d7c:	bf86      	itte	hi
 8002d7e:	f880 102c 	strbhi.w	r1, [r0, #44]	; 0x2c
  bool retVal = true;
 8002d82:	2001      	movhi	r0, #1
    retVal = false;
 8002d84:	2000      	movls	r0, #0
  }
  return retVal;
}
 8002d86:	4770      	bx	lr

08002d88 <UI_GetSelectedMC>:
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak uint8_t UI_GetSelectedMC(UI_Handle_t *pHandle)
{
  return (pHandle->bSelectedDrive);
}
 8002d88:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <UI_SetReg>:
  *         See MC_PROTOCOL_REG_xxx for code definition.
  * @param  wValue: New value to set.
  * @retval Return the currently selected MC, zero based, on which UI operates.
  */
__weak bool UI_SetReg(UI_Handle_t *pHandle, MC_Protocol_REG_t bRegID, int32_t wValue)
{
 8002d90:	b530      	push	{r4, r5, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002d92:	6a04      	ldr	r4, [r0, #32]
 8002d94:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002d98:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
{
 8002d9c:	4614      	mov	r4, r2
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002d9e:	6a42      	ldr	r2, [r0, #36]	; 0x24
{
 8002da0:	b083      	sub	sp, #12
  MCT_Handle_t * pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 8002da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]

  bool retVal = true;
  switch (bRegID)
 8002da6:	2988      	cmp	r1, #136	; 0x88
 8002da8:	d846      	bhi.n	8002e38 <UI_SetReg+0xa8>
 8002daa:	e8df f001 	tbb	[pc, r1]
 8002dae:	454f      	.short	0x454f
 8002db0:	5a455345 	.word	0x5a455345
 8002db4:	786c6660 	.word	0x786c6660
 8002db8:	968a847e 	.word	0x968a847e
 8002dbc:	4545a29c 	.word	0x4545a29c
 8002dc0:	45454545 	.word	0x45454545
 8002dc4:	45454545 	.word	0x45454545
 8002dc8:	45454545 	.word	0x45454545
 8002dcc:	45454545 	.word	0x45454545
 8002dd0:	45454545 	.word	0x45454545
 8002dd4:	45454545 	.word	0x45454545
 8002dd8:	45454545 	.word	0x45454545
 8002ddc:	45454545 	.word	0x45454545
 8002de0:	45454545 	.word	0x45454545
 8002de4:	45454545 	.word	0x45454545
 8002de8:	45454545 	.word	0x45454545
 8002dec:	a8454545 	.word	0xa8454545
 8002df0:	45454545 	.word	0x45454545
 8002df4:	45454545 	.word	0x45454545
 8002df8:	45454545 	.word	0x45454545
 8002dfc:	45454545 	.word	0x45454545
 8002e00:	45454545 	.word	0x45454545
 8002e04:	45454545 	.word	0x45454545
 8002e08:	4545ae45 	.word	0x4545ae45
 8002e0c:	45454545 	.word	0x45454545
 8002e10:	45454545 	.word	0x45454545
 8002e14:	45454545 	.word	0x45454545
 8002e18:	45454545 	.word	0x45454545
 8002e1c:	45454545 	.word	0x45454545
 8002e20:	45454545 	.word	0x45454545
 8002e24:	45454545 	.word	0x45454545
 8002e28:	45454545 	.word	0x45454545
 8002e2c:	45454545 	.word	0x45454545
 8002e30:	45454545 	.word	0x45454545
 8002e34:	c1ba      	.short	0xc1ba
 8002e36:	48          	.byte	0x48
 8002e37:	00          	.byte	0x00
 8002e38:	2000      	movs	r0, #0
    retVal = false;
    break;
  }

  return retVal;
}
 8002e3a:	b003      	add	sp, #12
 8002e3c:	bd30      	pop	{r4, r5, pc}
      PID_SetKD(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e40:	b221      	sxth	r1, r4
 8002e42:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002e44:	f003 fe5e 	bl	8006b04 <PID_SetKD>
  bool retVal = true;
 8002e48:	2001      	movs	r0, #1
    break;
 8002e4a:	e7f6      	b.n	8002e3a <UI_SetReg+0xaa>
      retVal = UI_SelectMC(pHandle,(uint8_t)wValue);
 8002e4c:	b2e1      	uxtb	r1, r4
 8002e4e:	f7ff ff93 	bl	8002d78 <UI_SelectMC>
    break;
 8002e52:	e7f2      	b.n	8002e3a <UI_SetReg+0xaa>
      if ((STC_Modality_t)wValue == STC_TORQUE_MODE)
 8002e54:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8002e58:	d071      	beq.n	8002f3e <UI_SetReg+0x1ae>
      if ((STC_Modality_t)wValue == STC_SPEED_MODE)
 8002e5a:	2c01      	cmp	r4, #1
 8002e5c:	d079      	beq.n	8002f52 <UI_SetReg+0x1c2>
  bool retVal = true;
 8002e5e:	2001      	movs	r0, #1
 8002e60:	e7eb      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e62:	6818      	ldr	r0, [r3, #0]
 8002e64:	b221      	sxth	r1, r4
 8002e66:	f003 fe3b 	bl	8006ae0 <PID_SetKP>
  bool retVal = true;
 8002e6a:	2001      	movs	r0, #1
    break;
 8002e6c:	e7e5      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	b221      	sxth	r1, r4
 8002e72:	f003 fe37 	bl	8006ae4 <PID_SetKI>
  bool retVal = true;
 8002e76:	2001      	movs	r0, #1
    break;
 8002e78:	e7df      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDSpeed,(int16_t)wValue);
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	b221      	sxth	r1, r4
 8002e7e:	f003 fe41 	bl	8006b04 <PID_SetKD>
  bool retVal = true;
 8002e82:	2001      	movs	r0, #1
    break;
 8002e84:	e7d9      	b.n	8002e3a <UI_SetReg+0xaa>
      currComp = MCI_GetIqdref(pMCI);
 8002e86:	4628      	mov	r0, r5
 8002e88:	f7fd fff6 	bl	8000e78 <MCI_GetIqdref>
 8002e8c:	9001      	str	r0, [sp, #4]
      currComp.q = (int16_t)wValue;
 8002e8e:	f8ad 4004 	strh.w	r4, [sp, #4]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002e92:	4628      	mov	r0, r5
 8002e94:	9901      	ldr	r1, [sp, #4]
 8002e96:	f7fd ff0d 	bl	8000cb4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002e9a:	2001      	movs	r0, #1
    break;
 8002e9c:	e7cd      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDIq,(int16_t)wValue);
 8002e9e:	6858      	ldr	r0, [r3, #4]
 8002ea0:	b221      	sxth	r1, r4
 8002ea2:	f003 fe1d 	bl	8006ae0 <PID_SetKP>
  bool retVal = true;
 8002ea6:	2001      	movs	r0, #1
    break;
 8002ea8:	e7c7      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDIq,(int16_t)wValue);
 8002eaa:	6858      	ldr	r0, [r3, #4]
 8002eac:	b221      	sxth	r1, r4
 8002eae:	f003 fe19 	bl	8006ae4 <PID_SetKI>
  bool retVal = true;
 8002eb2:	2001      	movs	r0, #1
    break;
 8002eb4:	e7c1      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDIq,(int16_t)wValue);
 8002eb6:	6858      	ldr	r0, [r3, #4]
 8002eb8:	b221      	sxth	r1, r4
 8002eba:	f003 fe23 	bl	8006b04 <PID_SetKD>
  bool retVal = true;
 8002ebe:	2001      	movs	r0, #1
    break;
 8002ec0:	e7bb      	b.n	8002e3a <UI_SetReg+0xaa>
      currComp = MCI_GetIqdref(pMCI);
 8002ec2:	4628      	mov	r0, r5
 8002ec4:	f7fd ffd8 	bl	8000e78 <MCI_GetIqdref>
 8002ec8:	9001      	str	r0, [sp, #4]
      currComp.d = (int16_t)wValue;
 8002eca:	f8ad 4006 	strh.w	r4, [sp, #6]
      MCI_SetCurrentReferences(pMCI,currComp);
 8002ece:	4628      	mov	r0, r5
 8002ed0:	9901      	ldr	r1, [sp, #4]
 8002ed2:	f7fd feef 	bl	8000cb4 <MCI_SetCurrentReferences>
  bool retVal = true;
 8002ed6:	2001      	movs	r0, #1
    break;
 8002ed8:	e7af      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPIDId,(int16_t)wValue);
 8002eda:	6898      	ldr	r0, [r3, #8]
 8002edc:	b221      	sxth	r1, r4
 8002ede:	f003 fdff 	bl	8006ae0 <PID_SetKP>
  bool retVal = true;
 8002ee2:	2001      	movs	r0, #1
    break;
 8002ee4:	e7a9      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPIDId,(int16_t)wValue);
 8002ee6:	6898      	ldr	r0, [r3, #8]
 8002ee8:	b221      	sxth	r1, r4
 8002eea:	f003 fdfb 	bl	8006ae4 <PID_SetKI>
  bool retVal = true;
 8002eee:	2001      	movs	r0, #1
    break;
 8002ef0:	e7a3      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKD(pMCT->pPIDId,(int16_t)wValue);
 8002ef2:	6898      	ldr	r0, [r3, #8]
 8002ef4:	b221      	sxth	r1, r4
 8002ef6:	f003 fe05 	bl	8006b04 <PID_SetKD>
  bool retVal = true;
 8002efa:	2001      	movs	r0, #1
    break;
 8002efc:	e79d      	b.n	8002e3a <UI_SetReg+0xaa>
      MCI_SetIdref(pMCI,(int16_t)wValue);
 8002efe:	4628      	mov	r0, r5
 8002f00:	b221      	sxth	r1, r4
 8002f02:	f7fd ffe7 	bl	8000ed4 <MCI_SetIdref>
  bool retVal = true;
 8002f06:	2001      	movs	r0, #1
    break;
 8002f08:	e797      	b.n	8002e3a <UI_SetReg+0xaa>
      MCI_ExecSpeedRamp(pMCI,(int16_t)((wValue*SPEED_UNIT)/_RPM),0);
 8002f0a:	4917      	ldr	r1, [pc, #92]	; (8002f68 <UI_SetReg+0x1d8>)
 8002f0c:	fb81 3104 	smull	r3, r1, r1, r4
 8002f10:	eba1 71e4 	sub.w	r1, r1, r4, asr #31
 8002f14:	4628      	mov	r0, r5
 8002f16:	2200      	movs	r2, #0
 8002f18:	b209      	sxth	r1, r1
 8002f1a:	f7fd feb7 	bl	8000c8c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f1e:	2001      	movs	r0, #1
    break;
 8002f20:	e78b      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKP(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002f22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f24:	b221      	sxth	r1, r4
 8002f26:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f28:	f003 fdda 	bl	8006ae0 <PID_SetKP>
  bool retVal = true;
 8002f2c:	2001      	movs	r0, #1
    break;
 8002f2e:	e784      	b.n	8002e3a <UI_SetReg+0xaa>
      PID_SetKI(pMCT->pPosCtrl->PIDPosRegulator,(int16_t)wValue);
 8002f30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f32:	b221      	sxth	r1, r4
 8002f34:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8002f36:	f003 fdd5 	bl	8006ae4 <PID_SetKI>
  bool retVal = true;
 8002f3a:	2001      	movs	r0, #1
    break;
 8002f3c:	e77d      	b.n	8002e3a <UI_SetReg+0xaa>
        MCI_ExecTorqueRamp(pMCI, MCI_GetTeref(pMCI),0);
 8002f3e:	4628      	mov	r0, r5
 8002f40:	f7fd ffc4 	bl	8000ecc <MCI_GetTeref>
 8002f44:	4622      	mov	r2, r4
 8002f46:	4601      	mov	r1, r0
 8002f48:	4628      	mov	r0, r5
 8002f4a:	f7fd fea9 	bl	8000ca0 <MCI_ExecTorqueRamp>
  bool retVal = true;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e773      	b.n	8002e3a <UI_SetReg+0xaa>
        MCI_ExecSpeedRamp(pMCI, MCI_GetMecSpeedRefUnit(pMCI),0);
 8002f52:	4628      	mov	r0, r5
 8002f54:	f7fd ff62 	bl	8000e1c <MCI_GetMecSpeedRefUnit>
 8002f58:	2200      	movs	r2, #0
 8002f5a:	4601      	mov	r1, r0
 8002f5c:	4628      	mov	r0, r5
 8002f5e:	f7fd fe95 	bl	8000c8c <MCI_ExecSpeedRamp>
  bool retVal = true;
 8002f62:	4620      	mov	r0, r4
 8002f64:	e769      	b.n	8002e3a <UI_SetReg+0xaa>
 8002f66:	bf00      	nop
 8002f68:	2aaaaaab 	.word	0x2aaaaaab

08002f6c <UI_ExecCmd>:
  * @param  bCmdID: Code of command to execute.
  *         See MC_PROTOCOL_CMD_xxx for code definition.
  *  @retval Return true if the command executed succesfully, otherwise false.
*/
__weak bool UI_ExecCmd(UI_Handle_t *pHandle, uint8_t bCmdID)
{
 8002f6c:	b510      	push	{r4, lr}
  bool retVal = true;

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f6e:	6a03      	ldr	r3, [r0, #32]
 8002f70:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  switch (bCmdID)
 8002f74:	3901      	subs	r1, #1
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002f76:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
  switch (bCmdID)
 8002f7a:	290d      	cmp	r1, #13
 8002f7c:	d808      	bhi.n	8002f90 <UI_ExecCmd+0x24>
 8002f7e:	e8df f001 	tbb	[pc, r1]
 8002f82:	1419      	.short	0x1419
 8002f84:	100e0e09 	.word	0x100e0e09
 8002f88:	0728231e 	.word	0x0728231e
 8002f8c:	14070707 	.word	0x14070707
 8002f90:	2000      	movs	r0, #0
    retVal = false;
	}
    break;
  }
  return retVal;
}
 8002f92:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == RUN)
 8002f94:	4620      	mov	r0, r4
 8002f96:	f7fd ff23 	bl	8000de0 <MCI_GetSTMState>
 8002f9a:	2806      	cmp	r0, #6
 8002f9c:	d01e      	beq.n	8002fdc <UI_ExecCmd+0x70>
  bool retVal = true;
 8002f9e:	2001      	movs	r0, #1
}
 8002fa0:	bd10      	pop	{r4, pc}
      if (MCI_GetSTMState(pMCI) == IDLE)
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f7fd ff1c 	bl	8000de0 <MCI_GetSTMState>
 8002fa8:	b120      	cbz	r0, 8002fb4 <UI_ExecCmd+0x48>
        MCI_StopMotor(pMCI);
 8002faa:	4620      	mov	r0, r4
 8002fac:	f7fd fed0 	bl	8000d50 <MCI_StopMotor>
  bool retVal = true;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	bd10      	pop	{r4, pc}
        MCI_StartMotor(pMCI);
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7fd fec1 	bl	8000d3c <MCI_StartMotor>
  bool retVal = true;
 8002fba:	2001      	movs	r0, #1
}
 8002fbc:	bd10      	pop	{r4, pc}
      MCI_FaultAcknowledged(pMCI);
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	f7fd feca 	bl	8000d58 <MCI_FaultAcknowledged>
  bool retVal = true;
 8002fc4:	2001      	movs	r0, #1
}
 8002fc6:	bd10      	pop	{r4, pc}
      MCI_EncoderAlign(pMCI);
 8002fc8:	4620      	mov	r0, r4
 8002fca:	f7fd fec9 	bl	8000d60 <MCI_EncoderAlign>
  bool retVal = true;
 8002fce:	2001      	movs	r0, #1
}
 8002fd0:	bd10      	pop	{r4, pc}
      MCI_Clear_Iqdref(pMCI);
 8002fd2:	4620      	mov	r0, r4
 8002fd4:	f7fd ff88 	bl	8000ee8 <MCI_Clear_Iqdref>
  bool retVal = true;
 8002fd8:	2001      	movs	r0, #1
}
 8002fda:	bd10      	pop	{r4, pc}
        MCI_StopRamp(pMCI);
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7fd ff11 	bl	8000e04 <MCI_StopRamp>
  bool retVal = true;
 8002fe2:	2001      	movs	r0, #1
}
 8002fe4:	bd10      	pop	{r4, pc}
 8002fe6:	bf00      	nop

08002fe8 <UI_ExecSpeedRamp>:
  * @param  hDurationms: Duration of the ramp expressed in milliseconds.
  *         It is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecSpeedRamp(UI_Handle_t *pHandle, int32_t wFinalMecSpeedUnit, uint16_t hDurationms)
{
 8002fe8:	b508      	push	{r3, lr}
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];

  /* Call MCI Exec Ramp */
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002fea:	4b07      	ldr	r3, [pc, #28]	; (8003008 <UI_ExecSpeedRamp+0x20>)
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8002fec:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 8002ff0:	6a00      	ldr	r0, [r0, #32]
  MCI_ExecSpeedRamp(pMCI,(int16_t)((wFinalMecSpeedUnit*SPEED_UNIT)/_RPM),hDurationms);
 8002ff2:	f850 002c 	ldr.w	r0, [r0, ip, lsl #2]
 8002ff6:	fb83 c301 	smull	ip, r3, r3, r1
 8002ffa:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8002ffe:	b209      	sxth	r1, r1
 8003000:	f7fd fe44 	bl	8000c8c <MCI_ExecSpeedRamp>
  return true;
}
 8003004:	2001      	movs	r0, #1
 8003006:	bd08      	pop	{r3, pc}
 8003008:	2aaaaaab 	.word	0x2aaaaaab

0800300c <UI_ExecTorqueRamp>:
  * @param  hDurationms: the duration of the ramp expressed in milliseconds. It
  *         is possible to set 0 to perform an instantaneous change in the value.
  *  @retval Return true if the command executed succesfully, otherwise false.
  */
__weak bool UI_ExecTorqueRamp(UI_Handle_t *pHandle, int16_t hTargetFinal, uint16_t hDurationms)
{
 800300c:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 800300e:	6a03      	ldr	r3, [r0, #32]
 8003010:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c

  /* Call MCI Exec Ramp */
  MCI_ExecTorqueRamp(pMCI,hTargetFinal,hDurationms);
 8003014:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8003018:	f7fd fe42 	bl	8000ca0 <MCI_ExecTorqueRamp>
  return true;
}
 800301c:	2001      	movs	r0, #1
 800301e:	bd08      	pop	{r3, pc}

08003020 <UI_ExecPositionCmd>:
  * @param  fTargetPosition: final position value.
  * @param  fDuration: duration alllowed to complete the positioning (expressed in seconds).
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_ExecPositionCmd(UI_Handle_t *pHandle, float fTargetPosition, float fDuration)
{
 8003020:	b508      	push	{r3, lr}

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 8003022:	6a03      	ldr	r3, [r0, #32]
 8003024:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c

  /* Call MCI Position Command */
  MCI_ExecPositionCommand(pMCI,fTargetPosition,fDuration);
 8003028:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800302c:	f7fd fe4c 	bl	8000cc8 <MCI_ExecPositionCommand>
  return true;
}
 8003030:	2001      	movs	r0, #1
 8003032:	bd08      	pop	{r3, pc}

08003034 <UI_GetRevupData>:
  *
  *  @retval Returns true if the command executed successfully, false otherwise.
  */
__weak bool UI_GetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t* pDurationms,
                     int16_t* pFinalMecSpeedUnit, int16_t* pFinalTorque )
{
 8003034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003036:	4617      	mov	r7, r2
 8003038:	461e      	mov	r6, r3
  bool hRetVal = true;

  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800303a:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 800303e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003044:	695c      	ldr	r4, [r3, #20]
  if (pRevupCtrl)
 8003046:	b18c      	cbz	r4, 800306c <UI_GetRevupData+0x38>
  {
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003048:	4620      	mov	r0, r4
 800304a:	460d      	mov	r5, r1
 800304c:	f004 ff52 	bl	8007ef4 <RUC_GetPhaseDurationms>
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003050:	4629      	mov	r1, r5
    *pDurationms = RUC_GetPhaseDurationms(pRevupCtrl, bStage);
 8003052:	8038      	strh	r0, [r7, #0]
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 8003054:	4620      	mov	r0, r4
 8003056:	f004 ff53 	bl	8007f00 <RUC_GetPhaseFinalMecSpeedUnit>
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800305a:	4629      	mov	r1, r5
    *pFinalMecSpeedUnit = RUC_GetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage);
 800305c:	8030      	strh	r0, [r6, #0]
    *pFinalTorque = RUC_GetPhaseFinalTorque(pRevupCtrl, bStage);
 800305e:	4620      	mov	r0, r4
 8003060:	f004 ff56 	bl	8007f10 <RUC_GetPhaseFinalTorque>
 8003064:	9b06      	ldr	r3, [sp, #24]
 8003066:	8018      	strh	r0, [r3, #0]
  bool hRetVal = true;
 8003068:	2001      	movs	r0, #1
  else
  {
    hRetVal = false;
  }
  return hRetVal;
}
 800306a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hRetVal = false;
 800306c:	4620      	mov	r0, r4
}
 800306e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003070 <UI_SetRevupData>:
  *         digit.
  *  @retval Return true if the command executed successfully, otherwise false.
  */
__weak bool UI_SetRevupData(UI_Handle_t *pHandle, uint8_t bStage, uint16_t hDurationms,
                     int16_t hFinalMecSpeedUnit, int16_t hFinalTorque )
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	461d      	mov	r5, r3
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003074:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
 8003078:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 800307a:	b082      	sub	sp, #8
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 800307c:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
{
 8003080:	f9bd 6018 	ldrsh.w	r6, [sp, #24]
  RevUpCtrl_Handle_t *pRevupCtrl = pHandle->pMCT[pHandle->bSelectedDrive]->pRevupCtrl;
 8003084:	6958      	ldr	r0, [r3, #20]
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 8003086:	9001      	str	r0, [sp, #4]
{
 8003088:	460c      	mov	r4, r1
  RUC_SetPhaseDurationms(pRevupCtrl, bStage, hDurationms);
 800308a:	f004 ff21 	bl	8007ed0 <RUC_SetPhaseDurationms>
  RUC_SetPhaseFinalMecSpeedUnit(pRevupCtrl, bStage, hFinalMecSpeedUnit);
 800308e:	9801      	ldr	r0, [sp, #4]
 8003090:	462a      	mov	r2, r5
 8003092:	4621      	mov	r1, r4
 8003094:	f004 ff22 	bl	8007edc <RUC_SetPhaseFinalMecSpeedUnit>
  RUC_SetPhaseFinalTorque(pRevupCtrl, bStage, hFinalTorque);
 8003098:	9801      	ldr	r0, [sp, #4]
 800309a:	4632      	mov	r2, r6
 800309c:	4621      	mov	r1, r4
 800309e:	f004 ff23 	bl	8007ee8 <RUC_SetPhaseFinalTorque>
  return true;
}
 80030a2:	2001      	movs	r0, #1
 80030a4:	b002      	add	sp, #8
 80030a6:	bd70      	pop	{r4, r5, r6, pc}

080030a8 <UI_SetCurrentReferences>:
  * @param  hIdRef: Current Id reference on qd reference frame.
  *         This value is expressed in digit. See hIqRef param description.
  * @retval none.
  */
__weak void UI_SetCurrentReferences(UI_Handle_t *pHandle, int16_t hIqRef, int16_t hIdRef)
{
 80030a8:	b082      	sub	sp, #8

  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030aa:	f890 c02c 	ldrb.w	ip, [r0, #44]	; 0x2c
 80030ae:	6a03      	ldr	r3, [r0, #32]
  qd_t currComp;
  currComp.q = hIqRef;
 80030b0:	f8ad 1004 	strh.w	r1, [sp, #4]
  currComp.d = hIdRef;
 80030b4:	f8ad 2006 	strh.w	r2, [sp, #6]
  MCI_SetCurrentReferences(pMCI,currComp);
 80030b8:	9901      	ldr	r1, [sp, #4]
 80030ba:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
}
 80030be:	b002      	add	sp, #8
  MCI_SetCurrentReferences(pMCI,currComp);
 80030c0:	f7fd bdf8 	b.w	8000cb4 <MCI_SetCurrentReferences>

080030c4 <UI_GetMPInfo>:
  * @retval true if MP is enabled, false otherwise.
  */
__weak bool UI_GetMPInfo(pMPInfo_t stepList, pMPInfo_t pMPInfo)
{
    return false;
}
 80030c4:	2000      	movs	r0, #0
 80030c6:	4770      	bx	lr

080030c8 <UI_DACInit>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
__weak void UI_DACInit(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACInit)
 80030c8:	6943      	ldr	r3, [r0, #20]
 80030ca:	b103      	cbz	r3, 80030ce <UI_DACInit+0x6>
  {
	  pHandle->pFct_DACInit(pHandle);
 80030cc:	4718      	bx	r3
  }
}
 80030ce:	4770      	bx	lr

080030d0 <UI_DACExec>:
  * @param  pHandle: Pointer on Handle structure of DACx UI component.
  * @retval none.
  */
void UI_DACExec(UI_Handle_t *pHandle)
{
  if (pHandle->pFct_DACExec)
 80030d0:	6983      	ldr	r3, [r0, #24]
 80030d2:	b103      	cbz	r3, 80030d6 <UI_DACExec+0x6>
  {
    pHandle->pFct_DACExec(pHandle);
 80030d4:	4718      	bx	r3
  }
}
 80030d6:	4770      	bx	lr

080030d8 <UI_SetDAC>:
  * @retval none.
  */
void UI_SetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                         MC_Protocol_REG_t bVariable)
{
  if (pHandle->pFctDACSetChannelConfig)
 80030d8:	6843      	ldr	r3, [r0, #4]
 80030da:	b103      	cbz	r3, 80030de <UI_SetDAC+0x6>
  {
	  pHandle->pFctDACSetChannelConfig(pHandle, bChannel, bVariable);
 80030dc:	4718      	bx	r3
  }
}
 80030de:	4770      	bx	lr

080030e0 <UI_GetDAC>:
  *         It must be one of the exported UI register (Example: MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t UI_GetDAC(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  MC_Protocol_REG_t retVal = MC_PROTOCOL_REG_UNDEFINED;
  if (pHandle->pFctDACGetChannelConfig)
 80030e0:	6883      	ldr	r3, [r0, #8]
 80030e2:	b103      	cbz	r3, 80030e6 <UI_GetDAC+0x6>
  {
    retVal = pHandle->pFctDACGetChannelConfig(pHandle, bChannel);
 80030e4:	4718      	bx	r3
  }
  return retVal;
}
 80030e6:	2089      	movs	r0, #137	; 0x89
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop

080030ec <UI_GetReg>:
{
 80030ec:	b530      	push	{r4, r5, lr}
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80030ee:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80030f0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030f4:	6a05      	ldr	r5, [r0, #32]
  MCT_Handle_t* pMCT = pHandle->pMCT[pHandle->bSelectedDrive];
 80030f6:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
  MCI_Handle_t * pMCI = pHandle->pMCI[pHandle->bSelectedDrive];
 80030fa:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
{
 80030fe:	b08f      	sub	sp, #60	; 0x3c
  if ( success != (bool *) 0 )
 8003100:	2a00      	cmp	r2, #0
 8003102:	f000 8092 	beq.w	800322a <UI_GetReg+0x13e>
    *success = true;
 8003106:	f04f 0c01 	mov.w	ip, #1
 800310a:	f882 c000 	strb.w	ip, [r2]
  switch (bRegID)
 800310e:	2988      	cmp	r1, #136	; 0x88
 8003110:	f200 8121 	bhi.w	8003356 <UI_GetReg+0x26a>
 8003114:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003118:	015b0161 	.word	0x015b0161
 800311c:	01940198 	.word	0x01940198
 8003120:	02250229 	.word	0x02250229
 8003124:	021d0221 	.word	0x021d0221
 8003128:	02140122 	.word	0x02140122
 800312c:	020c0210 	.word	0x020c0210
 8003130:	0203011a 	.word	0x0203011a
 8003134:	01fb01ff 	.word	0x01fb01ff
 8003138:	011f011f 	.word	0x011f011f
 800313c:	011f011f 	.word	0x011f011f
 8003140:	011f011f 	.word	0x011f011f
 8003144:	011f011f 	.word	0x011f011f
 8003148:	01f7011f 	.word	0x01f7011f
 800314c:	01ef01f3 	.word	0x01ef01f3
 8003150:	01e701eb 	.word	0x01e701eb
 8003154:	012701e0 	.word	0x012701e0
 8003158:	011f012c 	.word	0x011f012c
 800315c:	01cf01d4 	.word	0x01cf01d4
 8003160:	01c501ca 	.word	0x01c501ca
 8003164:	012701ab 	.word	0x012701ab
 8003168:	0122012c 	.word	0x0122012c
 800316c:	01db011a 	.word	0x01db011a
 8003170:	01a101a6 	.word	0x01a101a6
 8003174:	0147019c 	.word	0x0147019c
 8003178:	011f0133 	.word	0x011f0133
 800317c:	011f011f 	.word	0x011f011f
 8003180:	011f011f 	.word	0x011f011f
 8003184:	011f011f 	.word	0x011f011f
 8003188:	011f011f 	.word	0x011f011f
 800318c:	011f011f 	.word	0x011f011f
 8003190:	018e011f 	.word	0x018e011f
 8003194:	01810188 	.word	0x01810188
 8003198:	011a017a 	.word	0x011a017a
 800319c:	011f011f 	.word	0x011f011f
 80031a0:	011f011f 	.word	0x011f011f
 80031a4:	011f011f 	.word	0x011f011f
 80031a8:	011f011f 	.word	0x011f011f
 80031ac:	011f011f 	.word	0x011f011f
 80031b0:	011f011f 	.word	0x011f011f
 80031b4:	011f011f 	.word	0x011f011f
 80031b8:	011f011f 	.word	0x011f011f
 80031bc:	011f011f 	.word	0x011f011f
 80031c0:	011f011f 	.word	0x011f011f
 80031c4:	011f011f 	.word	0x011f011f
 80031c8:	011f011f 	.word	0x011f011f
 80031cc:	0168011f 	.word	0x0168011f
 80031d0:	011f011f 	.word	0x011f011f
 80031d4:	011f011f 	.word	0x011f011f
 80031d8:	011f011f 	.word	0x011f011f
 80031dc:	011f011f 	.word	0x011f011f
 80031e0:	011f011f 	.word	0x011f011f
 80031e4:	011f011f 	.word	0x011f011f
 80031e8:	011f011f 	.word	0x011f011f
 80031ec:	011f011f 	.word	0x011f011f
 80031f0:	011f011f 	.word	0x011f011f
 80031f4:	02300234 	.word	0x02300234
 80031f8:	011f0166 	.word	0x011f0166
 80031fc:	01310164 	.word	0x01310164
 8003200:	011f011f 	.word	0x011f011f
 8003204:	011f011f 	.word	0x011f011f
 8003208:	011f011f 	.word	0x011f011f
 800320c:	011f011f 	.word	0x011f011f
 8003210:	011f011f 	.word	0x011f011f
 8003214:	011f011f 	.word	0x011f011f
 8003218:	0117011f 	.word	0x0117011f
 800321c:	01b0011f 	.word	0x01b0011f
 8003220:	01b701be 	.word	0x01b701be
 8003224:	02070175 	.word	0x02070175
 8003228:	0218      	.short	0x0218
 800322a:	2988      	cmp	r1, #136	; 0x88
 800322c:	f200 808b 	bhi.w	8003346 <UI_GetReg+0x25a>
 8003230:	e8df f011 	tbh	[pc, r1, lsl #1]
 8003234:	00cd00d3 	.word	0x00cd00d3
 8003238:	0106010a 	.word	0x0106010a
 800323c:	0197019b 	.word	0x0197019b
 8003240:	018f0193 	.word	0x018f0193
 8003244:	01860094 	.word	0x01860094
 8003248:	017e0182 	.word	0x017e0182
 800324c:	0175008c 	.word	0x0175008c
 8003250:	016d0171 	.word	0x016d0171
 8003254:	00890089 	.word	0x00890089
 8003258:	00890089 	.word	0x00890089
 800325c:	00890089 	.word	0x00890089
 8003260:	00890089 	.word	0x00890089
 8003264:	01690089 	.word	0x01690089
 8003268:	01610165 	.word	0x01610165
 800326c:	0159015d 	.word	0x0159015d
 8003270:	00990152 	.word	0x00990152
 8003274:	0089009e 	.word	0x0089009e
 8003278:	01410146 	.word	0x01410146
 800327c:	0137013c 	.word	0x0137013c
 8003280:	0099011d 	.word	0x0099011d
 8003284:	0094009e 	.word	0x0094009e
 8003288:	014d008c 	.word	0x014d008c
 800328c:	01130118 	.word	0x01130118
 8003290:	00b9010e 	.word	0x00b9010e
 8003294:	008900a5 	.word	0x008900a5
 8003298:	00890089 	.word	0x00890089
 800329c:	00890089 	.word	0x00890089
 80032a0:	00890089 	.word	0x00890089
 80032a4:	00890089 	.word	0x00890089
 80032a8:	00890089 	.word	0x00890089
 80032ac:	01000089 	.word	0x01000089
 80032b0:	00f300fa 	.word	0x00f300fa
 80032b4:	008c00ec 	.word	0x008c00ec
 80032b8:	00890089 	.word	0x00890089
 80032bc:	00890089 	.word	0x00890089
 80032c0:	00890089 	.word	0x00890089
 80032c4:	00890089 	.word	0x00890089
 80032c8:	00890089 	.word	0x00890089
 80032cc:	00890089 	.word	0x00890089
 80032d0:	00890089 	.word	0x00890089
 80032d4:	00890089 	.word	0x00890089
 80032d8:	00890089 	.word	0x00890089
 80032dc:	00890089 	.word	0x00890089
 80032e0:	00890089 	.word	0x00890089
 80032e4:	00890089 	.word	0x00890089
 80032e8:	00da0089 	.word	0x00da0089
 80032ec:	00890089 	.word	0x00890089
 80032f0:	00890089 	.word	0x00890089
 80032f4:	00890089 	.word	0x00890089
 80032f8:	00890089 	.word	0x00890089
 80032fc:	00890089 	.word	0x00890089
 8003300:	00890089 	.word	0x00890089
 8003304:	00890089 	.word	0x00890089
 8003308:	00890089 	.word	0x00890089
 800330c:	00890089 	.word	0x00890089
 8003310:	01a201a6 	.word	0x01a201a6
 8003314:	008900d8 	.word	0x008900d8
 8003318:	00a300d6 	.word	0x00a300d6
 800331c:	00890089 	.word	0x00890089
 8003320:	00890089 	.word	0x00890089
 8003324:	00890089 	.word	0x00890089
 8003328:	00890089 	.word	0x00890089
 800332c:	00890089 	.word	0x00890089
 8003330:	00890089 	.word	0x00890089
 8003334:	00890089 	.word	0x00890089
 8003338:	01220089 	.word	0x01220089
 800333c:	01290130 	.word	0x01290130
 8003340:	017900e7 	.word	0x017900e7
 8003344:	018a      	.short	0x018a
        bRetVal = (uint32_t) 0;
 8003346:	2000      	movs	r0, #0
}
 8003348:	b00f      	add	sp, #60	; 0x3c
 800334a:	bd30      	pop	{r4, r5, pc}
      bRetVal = MCI_GetIqdref(pMCI).d;
 800334c:	4628      	mov	r0, r5
 800334e:	f7fd fd93 	bl	8000e78 <MCI_GetIqdref>
 8003352:	1400      	asrs	r0, r0, #16
    break;
 8003354:	e7f8      	b.n	8003348 <UI_GetReg+0x25c>
        *success = false;
 8003356:	2000      	movs	r0, #0
 8003358:	7010      	strb	r0, [r2, #0]
  return bRetVal;
 800335a:	e7f5      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqdref(pMCI).q;
 800335c:	4628      	mov	r0, r5
 800335e:	f7fd fd8b 	bl	8000e78 <MCI_GetIqdref>
 8003362:	b200      	sxth	r0, r0
    break;
 8003364:	e7f0      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).q;
 8003366:	4628      	mov	r0, r5
 8003368:	f7fd fd78 	bl	8000e5c <MCI_GetIqd>
 800336c:	b200      	sxth	r0, r0
    break;
 800336e:	e7eb      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIqd(pMCI).d;
 8003370:	4628      	mov	r0, r5
 8003372:	f7fd fd73 	bl	8000e5c <MCI_GetIqd>
 8003376:	1400      	asrs	r0, r0, #16
    break;
 8003378:	e7e6      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = PWBDID;
 800337a:	2002      	movs	r0, #2
 800337c:	e7e4      	b.n	8003348 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 800337e:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003384:	0f1a      	lsrs	r2, r3, #28
 8003386:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003388:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800338c:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800338e:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003392:	f240 80fe 	bls.w	8003592 <UI_GetReg+0x4a6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003396:	2b01      	cmp	r3, #1
 8003398:	d8d5      	bhi.n	8003346 <UI_GetReg+0x25a>
        pSPD = pMCT->pSpeedSensorAux;
 800339a:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 800339c:	2800      	cmp	r0, #0
 800339e:	d0d2      	beq.n	8003346 <UI_GetReg+0x25a>
        bRetVal = SPD_GetS16Speed(pSPD);
 80033a0:	f004 fe06 	bl	8007fb0 <SPD_GetS16Speed>
 80033a4:	e7d0      	b.n	8003348 <UI_GetReg+0x25c>
      uint32_t hUICfg = pHandle->pUICfg[pHandle->bSelectedDrive];
 80033a6:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80033a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033ac:	0f1a      	lsrs	r2, r3, #28
 80033ae:	3a01      	subs	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033b0:	f3c3 6303 	ubfx	r3, r3, #24, #4
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033b4:	2a01      	cmp	r2, #1
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033b6:	f103 33ff 	add.w	r3, r3, #4294967295
      if ((MAIN_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033ba:	f240 80e5 	bls.w	8003588 <UI_GetReg+0x49c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d8c1      	bhi.n	8003346 <UI_GetReg+0x25a>
        pSPD = pMCT->pSpeedSensorAux;
 80033c2:	69e0      	ldr	r0, [r4, #28]
      if (pSPD != MC_NULL)
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d0be      	beq.n	8003346 <UI_GetReg+0x25a>
        bRetVal = SPD_GetElAngle(pSPD);
 80033c8:	f004 fdae 	bl	8007f28 <SPD_GetElAngle>
 80033cc:	e7bc      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80033ce:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
 80033d0:	b00f      	add	sp, #60	; 0x3c
 80033d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      bRetVal = (int32_t)STM_GetFaultState(pMCT->pStateMachine);
 80033d6:	f004 bf6d 	b.w	80082b4 <STM_GetFaultState>
      bRetVal = (int32_t)UI_GetSelectedMC(pHandle);
 80033da:	f7ff fcd5 	bl	8002d88 <UI_GetSelectedMC>
    break;
 80033de:	e7b3      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = CTRBDID;
 80033e0:	201d      	movs	r0, #29
 80033e2:	e7b1      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)(MC_UID);
 80033e4:	4870      	ldr	r0, [pc, #448]	; (80035a8 <UI_GetReg+0x4bc>)
 80033e6:	e7af      	b.n	8003348 <UI_GetReg+0x25c>
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80033e8:	4628      	mov	r0, r5
 80033ea:	f7fd fd01 	bl	8000df0 <MCI_GetControlMode>
 80033ee:	2801      	cmp	r0, #1
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 80033f0:	4628      	mov	r0, r5
      if (MCI_GetControlMode(pMCI) == STC_SPEED_MODE)
 80033f2:	f000 80d3 	beq.w	800359c <UI_GetReg+0x4b0>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI) * _RPM)/SPEED_UNIT) ;
 80033f6:	f7fd fd11 	bl	8000e1c <MCI_GetMecSpeedRefUnit>
 80033fa:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80033fe:	0040      	lsls	r0, r0, #1
 8003400:	e7a2      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKP( pMCT->pPosCtrl->PIDPosRegulator );
 8003402:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003404:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8003406:	f003 fb6f 	bl	8006ae8 <PID_GetKP>
      break;
 800340a:	e79d      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMinAppNegativeMecSpeedUnit(pMCT->pSpeednTorqueCtrl)  * _RPM)/SPEED_UNIT ;
 800340c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800340e:	f004 fe93 	bl	8008138 <STC_GetMinAppNegativeMecSpeedUnit>
 8003412:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003416:	0040      	lsls	r0, r0, #1
    break;
 8003418:	e796      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (STC_GetMaxAppPositiveMecSpeedUnit(pMCT->pSpeednTorqueCtrl) * _RPM)/SPEED_UNIT ;
 800341a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800341c:	f004 fe8a 	bl	8008134 <STC_GetMaxAppPositiveMecSpeedUnit>
 8003420:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003424:	0040      	lsls	r0, r0, #1
    break;
 8003426:	e78f      	b.n	8003348 <UI_GetReg+0x25c>
      if (pHandle->pFctDACGetUserChannelValue)
 8003428:	6903      	ldr	r3, [r0, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d08b      	beq.n	8003346 <UI_GetReg+0x25a>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 1);
 800342e:	2101      	movs	r1, #1
 8003430:	4798      	blx	r3
 8003432:	e789      	b.n	8003348 <UI_GetReg+0x25c>
      if (pHandle->pFctDACGetUserChannelValue)
 8003434:	6903      	ldr	r3, [r0, #16]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d085      	beq.n	8003346 <UI_GetReg+0x25a>
        bRetVal = (int32_t) pHandle->pFctDACGetUserChannelValue(pHandle, 0);
 800343a:	2100      	movs	r1, #0
 800343c:	4798      	blx	r3
 800343e:	e783      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)MCI_GetControlMode(pMCI);
 8003440:	4628      	mov	r0, r5
 8003442:	f7fd fcd5 	bl	8000df0 <MCI_GetControlMode>
    break;
 8003446:	e77f      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)STM_GetState(pMCT->pStateMachine);
 8003448:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800344a:	f004 ff25 	bl	8008298 <STM_GetState>
	break;
 800344e:	e77b      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).beta;
 8003450:	4628      	mov	r0, r5
 8003452:	f7fd fd2d 	bl	8000eb0 <MCI_GetValphabeta>
 8003456:	1400      	asrs	r0, r0, #16
    break;
 8003458:	e776      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetValphabeta(pMCI).alpha;
 800345a:	4628      	mov	r0, r5
 800345c:	f7fd fd28 	bl	8000eb0 <MCI_GetValphabeta>
 8003460:	b200      	sxth	r0, r0
    break;
 8003462:	e771      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).d;
 8003464:	4628      	mov	r0, r5
 8003466:	f7fd fd15 	bl	8000e94 <MCI_GetVqd>
 800346a:	1400      	asrs	r0, r0, #16
    break;
 800346c:	e76c      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).beta;
 800346e:	4628      	mov	r0, r5
 8003470:	f7fd fce6 	bl	8000e40 <MCI_GetIalphabeta>
 8003474:	1400      	asrs	r0, r0, #16
    break;
 8003476:	e767      	b.n	8003348 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetCurrentPosition(pMCT->pPosCtrl);
 8003478:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800347a:	f005 f993 	bl	80087a4 <TC_GetCurrentPosition>
 800347e:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 8003482:	9801      	ldr	r0, [sp, #4]
      break;
 8003484:	e760      	b.n	8003348 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetMoveDuration(pMCT->pPosCtrl);
 8003486:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003488:	f005 f9a2 	bl	80087d0 <TC_GetMoveDuration>
 800348c:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 8003490:	9801      	ldr	r0, [sp, #4]
      break;
 8003492:	e759      	b.n	8003348 <UI_GetReg+0x25c>
        ReadVal.Float_Val = TC_GetTargetPosition(pMCT->pPosCtrl);
 8003494:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8003496:	f005 f997 	bl	80087c8 <TC_GetTargetPosition>
 800349a:	ed8d 0a01 	vstr	s0, [sp, #4]
        bRetVal = ReadVal.U32_Val;
 800349e:	9801      	ldr	r0, [sp, #4]
      break;
 80034a0:	e752      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIalphabeta(pMCI).alpha;
 80034a2:	4628      	mov	r0, r5
 80034a4:	f7fd fccc 	bl	8000e40 <MCI_GetIalphabeta>
 80034a8:	b200      	sxth	r0, r0
    break;
 80034aa:	e74d      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).b;
 80034ac:	4628      	mov	r0, r5
 80034ae:	f7fd fcb9 	bl	8000e24 <MCI_GetIab>
 80034b2:	1400      	asrs	r0, r0, #16
    break;
 80034b4:	e748      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetIab(pMCI).a;
 80034b6:	4628      	mov	r0, r5
 80034b8:	f7fd fcb4 	bl	8000e24 <MCI_GetIab>
 80034bc:	b200      	sxth	r0, r0
    break;
 80034be:	e743      	b.n	8003348 <UI_GetReg+0x25c>
      if (pMCT->pRevupCtrl)
 80034c0:	6960      	ldr	r0, [r4, #20]
 80034c2:	2800      	cmp	r0, #0
 80034c4:	f43f af3f 	beq.w	8003346 <UI_GetReg+0x25a>
        bRetVal = (int32_t)RUC_GetNumberOfPhases(pMCT->pRevupCtrl);
 80034c8:	f004 fd2a 	bl	8007f20 <RUC_GetNumberOfPhases>
 80034cc:	e73c      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MCI_GetVqd(pMCI).q;
 80034ce:	4628      	mov	r0, r5
 80034d0:	f7fd fce0 	bl	8000e94 <MCI_GetVqd>
 80034d4:	b200      	sxth	r0, r0
    break;
 80034d6:	e737      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetAvrgMecSpeedUnit(pMCI) * _RPM)/SPEED_UNIT);
 80034d8:	4628      	mov	r0, r5
 80034da:	f7fd fc97 	bl	8000e0c <MCI_GetAvrgMecSpeedUnit>
 80034de:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80034e2:	0040      	lsls	r0, r0, #1
    break;
 80034e4:	e730      	b.n	8003348 <UI_GetReg+0x25c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH1);
 80034e6:	2101      	movs	r1, #1
 80034e8:	f7ff fdfa 	bl	80030e0 <UI_GetDAC>
    break;
 80034ec:	e72c      	b.n	8003348 <UI_GetReg+0x25c>
      MC_Protocol_REG_t value = UI_GetDAC(pHandle, DAC_CH0);
 80034ee:	2100      	movs	r1, #0
 80034f0:	f7ff fdf6 	bl	80030e0 <UI_GetDAC>
    break;
 80034f4:	e728      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = MPM_GetAvrgElMotorPowerW(pMCT->pMPM);
 80034f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80034f8:	f003 fa90 	bl	8006a1c <MPM_GetAvrgElMotorPowerW>
    break;
 80034fc:	e724      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)NTC_GetAvTemp_C(pMCT->pTemperatureSensor);
 80034fe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003500:	f003 fad0 	bl	8006aa4 <NTC_GetAvTemp_C>
    break;
 8003504:	e720      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)VBS_GetAvBusVoltage_V(pMCT->pBusVoltageSensor);
 8003506:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003508:	f003 f840 	bl	800658c <VBS_GetAvBusVoltage_V>
    break;
 800350c:	e71c      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDId);
 800350e:	68a0      	ldr	r0, [r4, #8]
 8003510:	f003 fafa 	bl	8006b08 <PID_GetKD>
    break;
 8003514:	e718      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDId);
 8003516:	68a0      	ldr	r0, [r4, #8]
 8003518:	f003 faea 	bl	8006af0 <PID_GetKI>
    break;
 800351c:	e714      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDId);
 800351e:	68a0      	ldr	r0, [r4, #8]
 8003520:	f003 fae2 	bl	8006ae8 <PID_GetKP>
    break;
 8003524:	e710      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKI( pMCT->pPosCtrl->PIDPosRegulator );
 8003526:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8003528:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800352a:	f003 fae1 	bl	8006af0 <PID_GetKI>
      break;
 800352e:	e70b      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDIq);
 8003530:	6860      	ldr	r0, [r4, #4]
 8003532:	f003 fae9 	bl	8006b08 <PID_GetKD>
    break;
 8003536:	e707      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDIq);
 8003538:	6860      	ldr	r0, [r4, #4]
 800353a:	f003 fad9 	bl	8006af0 <PID_GetKI>
    break;
 800353e:	e703      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDIq);
 8003540:	6860      	ldr	r0, [r4, #4]
 8003542:	f003 fad1 	bl	8006ae8 <PID_GetKP>
    break;
 8003546:	e6ff      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t) PID_GetKD( pMCT->pPosCtrl->PIDPosRegulator );
 8003548:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800354a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800354c:	f003 fadc 	bl	8006b08 <PID_GetKD>
      break;
 8003550:	e6fa      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKD(pMCT->pPIDSpeed);
 8003552:	6820      	ldr	r0, [r4, #0]
 8003554:	f003 fad8 	bl	8006b08 <PID_GetKD>
    break;
 8003558:	e6f6      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKI(pMCT->pPIDSpeed);
 800355a:	6820      	ldr	r0, [r4, #0]
 800355c:	f003 fac8 	bl	8006af0 <PID_GetKI>
    break;
 8003560:	e6f2      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKP(pMCT->pPIDSpeed);
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	f003 fac0 	bl	8006ae8 <PID_GetKP>
    break;
 8003568:	e6ee      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)((MCI_GetMecSpeedRefUnit(pMCI)*_RPM)/SPEED_UNIT);
 800356a:	4628      	mov	r0, r5
 800356c:	f7fd fc56 	bl	8000e1c <MCI_GetMecSpeedRefUnit>
 8003570:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003574:	0040      	lsls	r0, r0, #1
    break;
 8003576:	e6e7      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKIDivisor(pMCT->pPIDSpeed);
 8003578:	6820      	ldr	r0, [r4, #0]
 800357a:	f003 fac1 	bl	8006b00 <PID_GetKIDivisor>
    break;
 800357e:	e6e3      	b.n	8003348 <UI_GetReg+0x25c>
      bRetVal = (int32_t)PID_GetKPDivisor(pMCT->pPIDSpeed);
 8003580:	6820      	ldr	r0, [r4, #0]
 8003582:	f003 fabb 	bl	8006afc <PID_GetKPDivisor>
    break;
 8003586:	e6df      	b.n	8003348 <UI_GetReg+0x25c>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003588:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 800358a:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 800358c:	f63f af1a 	bhi.w	80033c4 <UI_GetReg+0x2d8>
 8003590:	e717      	b.n	80033c2 <UI_GetReg+0x2d6>
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003592:	2b01      	cmp	r3, #1
        pSPD = pMCT->pSpeedSensorMain;
 8003594:	69a0      	ldr	r0, [r4, #24]
      if ((AUX_SCFG_VALUE(hUICfg) == UI_SCODE_ENC) ||
 8003596:	f63f af01 	bhi.w	800339c <UI_GetReg+0x2b0>
 800359a:	e6fe      	b.n	800339a <UI_GetReg+0x2ae>
      bRetVal = (int32_t)((MCI_GetLastRampFinalSpeed(pMCI) * _RPM)/SPEED_UNIT) ;
 800359c:	f7fd fc2a 	bl	8000df4 <MCI_GetLastRampFinalSpeed>
 80035a0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80035a4:	0040      	lsls	r0, r0, #1
 80035a6:	e6cf      	b.n	8003348 <UI_GetReg+0x25c>
 80035a8:	34a6847a 	.word	0x34a6847a

080035ac <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80035ac:	4a03      	ldr	r2, [pc, #12]	; (80035bc <SystemInit+0x10>)
 80035ae:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80035b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035b6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035ba:	4770      	bx	lr
 80035bc:	e000ed00 	.word	0xe000ed00

080035c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035c0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <HAL_InitTick+0x40>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	b90b      	cbnz	r3, 80035cc <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80035c8:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80035ca:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80035cc:	490d      	ldr	r1, [pc, #52]	; (8003604 <HAL_InitTick+0x44>)
 80035ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035d2:	4605      	mov	r5, r0
 80035d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d8:	6808      	ldr	r0, [r1, #0]
 80035da:	fbb0 f0f3 	udiv	r0, r0, r3
 80035de:	f000 ff91 	bl	8004504 <HAL_SYSTICK_Config>
 80035e2:	4604      	mov	r4, r0
 80035e4:	2800      	cmp	r0, #0
 80035e6:	d1ef      	bne.n	80035c8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035e8:	2d0f      	cmp	r5, #15
 80035ea:	d8ed      	bhi.n	80035c8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80035ec:	4602      	mov	r2, r0
 80035ee:	4629      	mov	r1, r5
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295
 80035f4:	f000 ff3a 	bl	800446c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <HAL_InitTick+0x48>)
 80035fa:	4620      	mov	r0, r4
 80035fc:	601d      	str	r5, [r3, #0]
}
 80035fe:	bd38      	pop	{r3, r4, r5, pc}
 8003600:	20000684 	.word	0x20000684
 8003604:	20000680 	.word	0x20000680
 8003608:	20000688 	.word	0x20000688

0800360c <HAL_Init>:
{
 800360c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800360e:	2003      	movs	r0, #3
 8003610:	f000 ff1a 	bl	8004448 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003614:	2004      	movs	r0, #4
 8003616:	f7ff ffd3 	bl	80035c0 <HAL_InitTick>
 800361a:	b110      	cbz	r0, 8003622 <HAL_Init+0x16>
    status = HAL_ERROR;
 800361c:	2401      	movs	r4, #1
}
 800361e:	4620      	mov	r0, r4
 8003620:	bd10      	pop	{r4, pc}
 8003622:	4604      	mov	r4, r0
    HAL_MspInit();
 8003624:	f7ff f802 	bl	800262c <HAL_MspInit>
}
 8003628:	4620      	mov	r0, r4
 800362a:	bd10      	pop	{r4, pc}

0800362c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800362c:	4a03      	ldr	r2, [pc, #12]	; (800363c <HAL_IncTick+0x10>)
 800362e:	4904      	ldr	r1, [pc, #16]	; (8003640 <HAL_IncTick+0x14>)
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	6809      	ldr	r1, [r1, #0]
 8003634:	440b      	add	r3, r1
 8003636:	6013      	str	r3, [r2, #0]
}
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	20000b10 	.word	0x20000b10
 8003640:	20000684 	.word	0x20000684

08003644 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003644:	4b01      	ldr	r3, [pc, #4]	; (800364c <HAL_GetTick+0x8>)
 8003646:	6818      	ldr	r0, [r3, #0]
}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	20000b10 	.word	0x20000b10

08003650 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003650:	b538      	push	{r3, r4, r5, lr}
 8003652:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003654:	f7ff fff6 	bl	8003644 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003658:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800365a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 800365c:	d002      	beq.n	8003664 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 800365e:	4b04      	ldr	r3, [pc, #16]	; (8003670 <HAL_Delay+0x20>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003664:	f7ff ffee 	bl	8003644 <HAL_GetTick>
 8003668:	1b43      	subs	r3, r0, r5
 800366a:	42a3      	cmp	r3, r4
 800366c:	d3fa      	bcc.n	8003664 <HAL_Delay+0x14>
  {
  }
}
 800366e:	bd38      	pop	{r3, r4, r5, pc}
 8003670:	20000684 	.word	0x20000684

08003674 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003674:	b530      	push	{r4, r5, lr}
 8003676:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003678:	2300      	movs	r3, #0
 800367a:	9301      	str	r3, [sp, #4]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800367c:	2800      	cmp	r0, #0
 800367e:	f000 80c9 	beq.w	8003814 <HAL_ADC_Init+0x1a0>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003682:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003684:	4604      	mov	r4, r0
 8003686:	2d00      	cmp	r5, #0
 8003688:	f000 8092 	beq.w	80037b0 <HAL_ADC_Init+0x13c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800368c:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800368e:	6893      	ldr	r3, [r2, #8]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	d505      	bpl.n	80036a0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003694:	6893      	ldr	r3, [r2, #8]
 8003696:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800369a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800369e:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036a0:	6893      	ldr	r3, [r2, #8]
 80036a2:	00dd      	lsls	r5, r3, #3
 80036a4:	d419      	bmi.n	80036da <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036a6:	4b70      	ldr	r3, [pc, #448]	; (8003868 <HAL_ADC_Init+0x1f4>)
 80036a8:	4870      	ldr	r0, [pc, #448]	; (800386c <HAL_ADC_Init+0x1f8>)
 80036aa:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80036ac:	6891      	ldr	r1, [r2, #8]
 80036ae:	099b      	lsrs	r3, r3, #6
 80036b0:	fba0 0303 	umull	r0, r3, r0, r3
 80036b4:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 80036b8:	099b      	lsrs	r3, r3, #6
 80036ba:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80036be:	3301      	adds	r3, #1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80036c6:	6091      	str	r1, [r2, #8]
 80036c8:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80036ca:	9b01      	ldr	r3, [sp, #4]
 80036cc:	b12b      	cbz	r3, 80036da <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80036ce:	9b01      	ldr	r3, [sp, #4]
 80036d0:	3b01      	subs	r3, #1
 80036d2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80036d4:	9b01      	ldr	r3, [sp, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f9      	bne.n	80036ce <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80036da:	6893      	ldr	r3, [r2, #8]
 80036dc:	00d8      	lsls	r0, r3, #3
 80036de:	d459      	bmi.n	8003794 <HAL_ADC_Init+0x120>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036e2:	f043 0310 	orr.w	r3, r3, #16
 80036e6:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036e8:	6e23      	ldr	r3, [r4, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80036ea:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	4303      	orrs	r3, r0
 80036ee:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80036f0:	6893      	ldr	r3, [r2, #8]
 80036f2:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80036f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80036f8:	d153      	bne.n	80037a2 <HAL_ADC_Init+0x12e>
 80036fa:	06d9      	lsls	r1, r3, #27
 80036fc:	d451      	bmi.n	80037a2 <HAL_ADC_Init+0x12e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036fe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003700:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003704:	f043 0302 	orr.w	r3, r3, #2
 8003708:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800370a:	6893      	ldr	r3, [r2, #8]
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800370c:	07db      	lsls	r3, r3, #31
 800370e:	d40e      	bmi.n	800372e <HAL_ADC_Init+0xba>
 8003710:	4b57      	ldr	r3, [pc, #348]	; (8003870 <HAL_ADC_Init+0x1fc>)
 8003712:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8003716:	6889      	ldr	r1, [r1, #8]
 8003718:	689b      	ldr	r3, [r3, #8]
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800371a:	430b      	orrs	r3, r1
 800371c:	07dd      	lsls	r5, r3, #31
 800371e:	d406      	bmi.n	800372e <HAL_ADC_Init+0xba>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003720:	4954      	ldr	r1, [pc, #336]	; (8003874 <HAL_ADC_Init+0x200>)
 8003722:	6865      	ldr	r5, [r4, #4]
 8003724:	688b      	ldr	r3, [r1, #8]
 8003726:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 800372a:	432b      	orrs	r3, r5
 800372c:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                hadc->Init.Overrun                                                     |
                hadc->Init.DataAlign                                                   |
 800372e:	68e5      	ldr	r5, [r4, #12]
 8003730:	6be3      	ldr	r3, [r4, #60]	; 0x3c
                hadc->Init.Resolution                                                  |
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003732:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                hadc->Init.DataAlign                                                   |
 8003736:	432b      	orrs	r3, r5
 8003738:	68a5      	ldr	r5, [r4, #8]
 800373a:	432b      	orrs	r3, r5
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800373c:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800373e:	2901      	cmp	r1, #1
                hadc->Init.DataAlign                                                   |
 8003740:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003744:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003748:	d05f      	beq.n	800380a <HAL_ADC_Init+0x196>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800374a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800374c:	b121      	cbz	r1, 8003758 <HAL_ADC_Init+0xe4>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                  | hadc->Init.ExternalTrigConvEdge
 800374e:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003750:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003754:	4329      	orrs	r1, r5
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003756:	430b      	orrs	r3, r1
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003758:	68d5      	ldr	r5, [r2, #12]
 800375a:	4947      	ldr	r1, [pc, #284]	; (8003878 <HAL_ADC_Init+0x204>)
 800375c:	4029      	ands	r1, r5
 800375e:	430b      	orrs	r3, r1
 8003760:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003762:	6913      	ldr	r3, [r2, #16]
 8003764:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003766:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800376a:	430b      	orrs	r3, r1
 800376c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800376e:	6893      	ldr	r3, [r2, #8]
 8003770:	0759      	lsls	r1, r3, #29
 8003772:	d523      	bpl.n	80037bc <HAL_ADC_Init+0x148>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003774:	6893      	ldr	r3, [r2, #8]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003776:	6963      	ldr	r3, [r4, #20]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d04e      	beq.n	800381a <HAL_ADC_Init+0x1a6>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800377c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800377e:	f023 030f 	bic.w	r3, r3, #15
 8003782:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003784:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003786:	f023 0303 	bic.w	r3, r3, #3
 800378a:	f043 0301 	orr.w	r3, r3, #1
 800378e:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003790:	b003      	add	sp, #12
 8003792:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003794:	6893      	ldr	r3, [r2, #8]
 8003796:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800379a:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800379e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80037a0:	d0ab      	beq.n	80036fa <HAL_ADC_Init+0x86>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 80037a4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037a6:	f043 0310 	orr.w	r3, r3, #16
 80037aa:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 80037ac:	b003      	add	sp, #12
 80037ae:	bd30      	pop	{r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80037b0:	f7fe ff5e 	bl	8002670 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80037b4:	6625      	str	r5, [r4, #96]	; 0x60
    hadc->Lock = HAL_UNLOCKED;
 80037b6:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 80037ba:	e767      	b.n	800368c <HAL_ADC_Init+0x18>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037bc:	6893      	ldr	r3, [r2, #8]
 80037be:	071b      	lsls	r3, r3, #28
 80037c0:	d4d9      	bmi.n	8003776 <HAL_ADC_Init+0x102>
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037c2:	68d1      	ldr	r1, [r2, #12]
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037c4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80037c8:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037ca:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80037ce:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037d0:	f021 0102 	bic.w	r1, r1, #2
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80037d4:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037d8:	430b      	orrs	r3, r1
      if (hadc->Init.GainCompensation != 0UL)
 80037da:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80037dc:	60d3      	str	r3, [r2, #12]
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037de:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 80037e0:	bb19      	cbnz	r1, 800382a <HAL_ADC_Init+0x1b6>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037e6:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037e8:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 80037ec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037f4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      if (hadc->Init.OversamplingMode == ENABLE)
 80037f8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d021      	beq.n	8003844 <HAL_ADC_Init+0x1d0>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003800:	6913      	ldr	r3, [r2, #16]
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6113      	str	r3, [r2, #16]
 8003808:	e7b5      	b.n	8003776 <HAL_ADC_Init+0x102>
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800380a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800380c:	3901      	subs	r1, #1
 800380e:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003812:	e79a      	b.n	800374a <HAL_ADC_Init+0xd6>
    return HAL_ERROR;
 8003814:	2001      	movs	r0, #1
}
 8003816:	b003      	add	sp, #12
 8003818:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800381a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800381c:	6a23      	ldr	r3, [r4, #32]
 800381e:	f021 010f 	bic.w	r1, r1, #15
 8003822:	3b01      	subs	r3, #1
 8003824:	430b      	orrs	r3, r1
 8003826:	6313      	str	r3, [r2, #48]	; 0x30
 8003828:	e7ac      	b.n	8003784 <HAL_ADC_Init+0x110>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800382a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003830:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003834:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003838:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800383c:	430b      	orrs	r3, r1
 800383e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003842:	e7d9      	b.n	80037f8 <HAL_ADC_Init+0x184>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003844:	6911      	ldr	r1, [r2, #16]
 8003846:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003848:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800384a:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 800384e:	f021 0104 	bic.w	r1, r1, #4
 8003852:	432b      	orrs	r3, r5
 8003854:	430b      	orrs	r3, r1
 8003856:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8003858:	430b      	orrs	r3, r1
 800385a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800385c:	430b      	orrs	r3, r1
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6113      	str	r3, [r2, #16]
 8003864:	e787      	b.n	8003776 <HAL_ADC_Init+0x102>
 8003866:	bf00      	nop
 8003868:	20000680 	.word	0x20000680
 800386c:	053e2d63 	.word	0x053e2d63
 8003870:	50000100 	.word	0x50000100
 8003874:	50000300 	.word	0x50000300
 8003878:	fff04007 	.word	0xfff04007

0800387c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800387c:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800387e:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
{
 8003882:	b083      	sub	sp, #12
 8003884:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003886:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003888:	f04f 0000 	mov.w	r0, #0
 800388c:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800388e:	f000 8145 	beq.w	8003b1c <HAL_ADC_ConfigChannel+0x2a0>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003892:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hadc);
 8003894:	2001      	movs	r0, #1
 8003896:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800389a:	68a2      	ldr	r2, [r4, #8]
 800389c:	0755      	lsls	r5, r2, #29
 800389e:	d44c      	bmi.n	800393a <HAL_ADC_ConfigChannel+0xbe>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80038a0:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(*preg,
 80038a2:	680a      	ldr	r2, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80038a4:	ea4f 1e90 	mov.w	lr, r0, lsr #6
 80038a8:	f00e 0e0c 	and.w	lr, lr, #12
 80038ac:	f104 0c30 	add.w	ip, r4, #48	; 0x30
  MODIFY_REG(*preg,
 80038b0:	f000 001f 	and.w	r0, r0, #31
 80038b4:	f85e 500c 	ldr.w	r5, [lr, ip]
 80038b8:	f3c2 6284 	ubfx	r2, r2, #26, #5
 80038bc:	261f      	movs	r6, #31
 80038be:	4082      	lsls	r2, r0
 80038c0:	fa06 f000 	lsl.w	r0, r6, r0
 80038c4:	ea25 0000 	bic.w	r0, r5, r0
 80038c8:	4302      	orrs	r2, r0
 80038ca:	f84e 200c 	str.w	r2, [lr, ip]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80038ce:	68a2      	ldr	r2, [r4, #8]
 80038d0:	0750      	lsls	r0, r2, #29
 80038d2:	d543      	bpl.n	800395c <HAL_ADC_ConfigChannel+0xe0>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80038d4:	68a2      	ldr	r2, [r4, #8]
 80038d6:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d8:	68a2      	ldr	r2, [r4, #8]
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038da:	f012 0f01 	tst.w	r2, #1
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038de:	4602      	mov	r2, r0
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e0:	d10c      	bne.n	80038fc <HAL_ADC_ConfigChannel+0x80>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80038e2:	4dc2      	ldr	r5, [pc, #776]	; (8003bec <HAL_ADC_ConfigChannel+0x370>)
 80038e4:	68ce      	ldr	r6, [r1, #12]
 80038e6:	42ae      	cmp	r6, r5
 80038e8:	f000 80c1 	beq.w	8003a6e <HAL_ADC_ConfigChannel+0x1f2>
    CLEAR_BIT(ADCx->DIFSEL,
 80038ec:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80038f0:	f3c0 0012 	ubfx	r0, r0, #0, #19
 80038f4:	ea21 0100 	bic.w	r1, r1, r0
 80038f8:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80038fc:	49bc      	ldr	r1, [pc, #752]	; (8003bf0 <HAL_ADC_ConfigChannel+0x374>)
 80038fe:	420a      	tst	r2, r1
 8003900:	d02a      	beq.n	8003958 <HAL_ADC_ConfigChannel+0xdc>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003902:	49bc      	ldr	r1, [pc, #752]	; (8003bf4 <HAL_ADC_ConfigChannel+0x378>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003904:	4dbc      	ldr	r5, [pc, #752]	; (8003bf8 <HAL_ADC_ConfigChannel+0x37c>)
 8003906:	6888      	ldr	r0, [r1, #8]
 8003908:	42aa      	cmp	r2, r5
 800390a:	f000 76e0 	and.w	r6, r0, #29360128	; 0x1c00000
 800390e:	d01d      	beq.n	800394c <HAL_ADC_ConfigChannel+0xd0>
 8003910:	4dba      	ldr	r5, [pc, #744]	; (8003bfc <HAL_ADC_ConfigChannel+0x380>)
 8003912:	42aa      	cmp	r2, r5
 8003914:	d01a      	beq.n	800394c <HAL_ADC_ConfigChannel+0xd0>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003916:	4dba      	ldr	r5, [pc, #744]	; (8003c00 <HAL_ADC_ConfigChannel+0x384>)
 8003918:	42aa      	cmp	r2, r5
 800391a:	f040 8131 	bne.w	8003b80 <HAL_ADC_ConfigChannel+0x304>
 800391e:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8003922:	d119      	bne.n	8003958 <HAL_ADC_ConfigChannel+0xdc>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003924:	4ab7      	ldr	r2, [pc, #732]	; (8003c04 <HAL_ADC_ConfigChannel+0x388>)
 8003926:	4294      	cmp	r4, r2
 8003928:	d016      	beq.n	8003958 <HAL_ADC_ConfigChannel+0xdc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800392a:	688a      	ldr	r2, [r1, #8]
 800392c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003930:	4316      	orrs	r6, r2
 8003932:	f046 7680 	orr.w	r6, r6, #16777216	; 0x1000000
 8003936:	608e      	str	r6, [r1, #8]
}
 8003938:	e003      	b.n	8003942 <HAL_ADC_ConfigChannel+0xc6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800393a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800393c:	f042 0220 	orr.w	r2, r2, #32
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003942:	2200      	movs	r2, #0
 8003944:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003948:	b003      	add	sp, #12
 800394a:	bdf0      	pop	{r4, r5, r6, r7, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800394c:	0202      	lsls	r2, r0, #8
 800394e:	d403      	bmi.n	8003958 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003950:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8003954:	f000 80f5 	beq.w	8003b42 <HAL_ADC_ConfigChannel+0x2c6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003958:	2000      	movs	r0, #0
 800395a:	e7f2      	b.n	8003942 <HAL_ADC_ConfigChannel+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800395c:	68a2      	ldr	r2, [r4, #8]
 800395e:	f012 0208 	ands.w	r2, r2, #8
 8003962:	f040 8082 	bne.w	8003a6a <HAL_ADC_ConfigChannel+0x1ee>
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003966:	6888      	ldr	r0, [r1, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003968:	680e      	ldr	r6, [r1, #0]
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800396a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800396e:	f000 811b 	beq.w	8003ba8 <HAL_ADC_ConfigChannel+0x32c>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003972:	ea4f 5cd6 	mov.w	ip, r6, lsr #23
 8003976:	f104 0714 	add.w	r7, r4, #20
 800397a:	f00c 0c04 	and.w	ip, ip, #4
  MODIFY_REG(*preg,
 800397e:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003982:	f85c 5007 	ldr.w	r5, [ip, r7]
 8003986:	f04f 0e07 	mov.w	lr, #7
 800398a:	40b0      	lsls	r0, r6
 800398c:	fa0e f606 	lsl.w	r6, lr, r6
 8003990:	ea25 0506 	bic.w	r5, r5, r6
 8003994:	4328      	orrs	r0, r5
 8003996:	f84c 0007 	str.w	r0, [ip, r7]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800399a:	6960      	ldr	r0, [r4, #20]
 800399c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80039a0:	6160      	str	r0, [r4, #20]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039a2:	690f      	ldr	r7, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039a4:	68e5      	ldr	r5, [r4, #12]
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80039a6:	2f04      	cmp	r7, #4
 80039a8:	d02f      	beq.n	8003a0a <HAL_ADC_ConfigChannel+0x18e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039aa:	f104 0060 	add.w	r0, r4, #96	; 0x60
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80039ae:	f3c5 05c1 	ubfx	r5, r5, #3, #2
  MODIFY_REG(*preg,
 80039b2:	f850 e027 	ldr.w	lr, [r0, r7, lsl #2]
 80039b6:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8003c14 <HAL_ADC_ConfigChannel+0x398>
 80039ba:	006e      	lsls	r6, r5, #1
 80039bc:	680d      	ldr	r5, [r1, #0]
 80039be:	ea0e 0c0c 	and.w	ip, lr, ip
 80039c2:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80039c6:	ea45 0c0c 	orr.w	ip, r5, ip
 80039ca:	694d      	ldr	r5, [r1, #20]
 80039cc:	40b5      	lsls	r5, r6
 80039ce:	ea45 050c 	orr.w	r5, r5, ip
 80039d2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80039d6:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80039da:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 80039dc:	698e      	ldr	r6, [r1, #24]
 80039de:	f850 5027 	ldr.w	r5, [r0, r7, lsl #2]
 80039e2:	f025 7580 	bic.w	r5, r5, #16777216	; 0x1000000
 80039e6:	4335      	orrs	r5, r6
 80039e8:	f840 5027 	str.w	r5, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80039ec:	7f0d      	ldrb	r5, [r1, #28]
 80039ee:	690e      	ldr	r6, [r1, #16]
 80039f0:	2d01      	cmp	r5, #1
  MODIFY_REG(*preg,
 80039f2:	f850 5026 	ldr.w	r5, [r0, r6, lsl #2]
 80039f6:	bf08      	it	eq
 80039f8:	f04f 7200 	moveq.w	r2, #33554432	; 0x2000000
 80039fc:	f025 7500 	bic.w	r5, r5, #33554432	; 0x2000000
 8003a00:	432a      	orrs	r2, r5
 8003a02:	f840 2026 	str.w	r2, [r0, r6, lsl #2]
 8003a06:	6808      	ldr	r0, [r1, #0]
}
 8003a08:	e766      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x5c>
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a0a:	6808      	ldr	r0, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a0c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003a0e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003a10:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a14:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a18:	2d00      	cmp	r5, #0
 8003a1a:	f040 80fd 	bne.w	8003c18 <HAL_ADC_ConfigChannel+0x39c>
 8003a1e:	f3c0 6584 	ubfx	r5, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003a22:	42aa      	cmp	r2, r5
 8003a24:	f000 8171 	beq.w	8003d0a <HAL_ADC_ConfigChannel+0x48e>
 8003a28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003a2a:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a2c:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003a30:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003a34:	f104 0764 	add.w	r7, r4, #100	; 0x64
 8003a38:	42ae      	cmp	r6, r5
 8003a3a:	f000 8154 	beq.w	8003ce6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a3e:	6896      	ldr	r6, [r2, #8]
 8003a40:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a42:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a46:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003a4a:	42ae      	cmp	r6, r5
 8003a4c:	f000 8139 	beq.w	8003cc2 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003a50:	68d6      	ldr	r6, [r2, #12]
 8003a52:	68d6      	ldr	r6, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003a54:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a58:	f3c6 6284 	ubfx	r2, r6, #26, #5
 8003a5c:	4295      	cmp	r5, r2
 8003a5e:	f47f af3b 	bne.w	80038d8 <HAL_ADC_ConfigChannel+0x5c>
  MODIFY_REG(*preg,
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003a68:	603a      	str	r2, [r7, #0]
 8003a6a:	6808      	ldr	r0, [r1, #0]
}
 8003a6c:	e734      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x5c>
    SET_BIT(ADCx->DIFSEL,
 8003a6e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003a72:	f3c0 0512 	ubfx	r5, r0, #0, #19
 8003a76:	432a      	orrs	r2, r5
 8003a78:	f8c4 20b0 	str.w	r2, [r4, #176]	; 0xb0
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a7c:	2d00      	cmp	r5, #0
 8003a7e:	d050      	beq.n	8003b22 <HAL_ADC_ConfigChannel+0x2a6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a80:	fa90 f2a0 	rbit	r2, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003a84:	2a00      	cmp	r2, #0
 8003a86:	f000 80f8 	beq.w	8003c7a <HAL_ADC_ConfigChannel+0x3fe>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003a8a:	fab2 f282 	clz	r2, r2
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a8e:	3201      	adds	r2, #1
 8003a90:	f002 021f 	and.w	r2, r2, #31
 8003a94:	2a09      	cmp	r2, #9
 8003a96:	f240 80f0 	bls.w	8003c7a <HAL_ADC_ConfigChannel+0x3fe>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a9a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003a9e:	2a00      	cmp	r2, #0
 8003aa0:	f000 814f 	beq.w	8003d42 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 8003aa4:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aa8:	3201      	adds	r2, #1
 8003aaa:	0692      	lsls	r2, r2, #26
 8003aac:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003ab4:	2d00      	cmp	r5, #0
 8003ab6:	f000 8149 	beq.w	8003d4c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8003aba:	fab5 f585 	clz	r5, r5
 8003abe:	3501      	adds	r5, #1
 8003ac0:	f005 051f 	and.w	r5, r5, #31
 8003ac4:	2601      	movs	r6, #1
 8003ac6:	fa06 f505 	lsl.w	r5, r6, r5
 8003aca:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003acc:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	f000 8139 	beq.w	8003d48 <HAL_ADC_ConfigChannel+0x4cc>
  return __builtin_clz(value);
 8003ad6:	fab0 f080 	clz	r0, r0
 8003ada:	1c42      	adds	r2, r0, #1
 8003adc:	f002 001f 	and.w	r0, r2, #31
 8003ae0:	f06f 061d 	mvn.w	r6, #29
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	fb12 6200 	smlabb	r2, r2, r0, r6
 8003aea:	0512      	lsls	r2, r2, #20
 8003aec:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003af0:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003af2:	0dd6      	lsrs	r6, r2, #23
  MODIFY_REG(*preg,
 8003af4:	6888      	ldr	r0, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003af6:	f006 0604 	and.w	r6, r6, #4
 8003afa:	f104 0514 	add.w	r5, r4, #20
  MODIFY_REG(*preg,
 8003afe:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003b02:	fa00 f702 	lsl.w	r7, r0, r2
 8003b06:	f04f 0c07 	mov.w	ip, #7
 8003b0a:	5970      	ldr	r0, [r6, r5]
 8003b0c:	fa0c f202 	lsl.w	r2, ip, r2
 8003b10:	ea20 0202 	bic.w	r2, r0, r2
 8003b14:	433a      	orrs	r2, r7
 8003b16:	5172      	str	r2, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003b18:	680a      	ldr	r2, [r1, #0]
}
 8003b1a:	e6ef      	b.n	80038fc <HAL_ADC_ConfigChannel+0x80>
  __HAL_LOCK(hadc);
 8003b1c:	2002      	movs	r0, #2
}
 8003b1e:	b003      	add	sp, #12
 8003b20:	bdf0      	pop	{r4, r5, r6, r7, pc}
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b22:	0e80      	lsrs	r0, r0, #26
 8003b24:	3001      	adds	r0, #1
 8003b26:	f000 061f 	and.w	r6, r0, #31
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b2a:	2e09      	cmp	r6, #9
 8003b2c:	d850      	bhi.n	8003bd0 <HAL_ADC_ConfigChannel+0x354>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b2e:	0685      	lsls	r5, r0, #26
 8003b30:	2201      	movs	r2, #1
 8003b32:	40b2      	lsls	r2, r6
 8003b34:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003b38:	4315      	orrs	r5, r2
 8003b3a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003b3e:	0512      	lsls	r2, r2, #20
 8003b40:	e7d6      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003b42:	492c      	ldr	r1, [pc, #176]	; (8003bf4 <HAL_ADC_ConfigChannel+0x378>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b44:	4830      	ldr	r0, [pc, #192]	; (8003c08 <HAL_ADC_ConfigChannel+0x38c>)
 8003b46:	688a      	ldr	r2, [r1, #8]
 8003b48:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003b4c:	4316      	orrs	r6, r2
 8003b4e:	f446 0600 	orr.w	r6, r6, #8388608	; 0x800000
 8003b52:	608e      	str	r6, [r1, #8]
 8003b54:	6802      	ldr	r2, [r0, #0]
 8003b56:	492d      	ldr	r1, [pc, #180]	; (8003c0c <HAL_ADC_ConfigChannel+0x390>)
 8003b58:	0992      	lsrs	r2, r2, #6
 8003b5a:	fba1 1202 	umull	r1, r2, r1, r2
 8003b5e:	0992      	lsrs	r2, r2, #6
 8003b60:	3201      	adds	r2, #1
 8003b62:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003b66:	0092      	lsls	r2, r2, #2
 8003b68:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b6a:	9a01      	ldr	r2, [sp, #4]
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	f43f aef3 	beq.w	8003958 <HAL_ADC_ConfigChannel+0xdc>
            wait_loop_index--;
 8003b72:	9a01      	ldr	r2, [sp, #4]
 8003b74:	3a01      	subs	r2, #1
 8003b76:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003b78:	9a01      	ldr	r2, [sp, #4]
 8003b7a:	2a00      	cmp	r2, #0
 8003b7c:	d1f9      	bne.n	8003b72 <HAL_ADC_ConfigChannel+0x2f6>
 8003b7e:	e6eb      	b.n	8003958 <HAL_ADC_ConfigChannel+0xdc>
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003b80:	4d23      	ldr	r5, [pc, #140]	; (8003c10 <HAL_ADC_ConfigChannel+0x394>)
 8003b82:	42aa      	cmp	r2, r5
 8003b84:	f47f aee8 	bne.w	8003958 <HAL_ADC_ConfigChannel+0xdc>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003b88:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003b8c:	f47f aee4 	bne.w	8003958 <HAL_ADC_ConfigChannel+0xdc>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003b90:	4a1c      	ldr	r2, [pc, #112]	; (8003c04 <HAL_ADC_ConfigChannel+0x388>)
 8003b92:	4294      	cmp	r4, r2
 8003b94:	f43f aee0 	beq.w	8003958 <HAL_ADC_ConfigChannel+0xdc>
 8003b98:	688a      	ldr	r2, [r1, #8]
 8003b9a:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003b9e:	4332      	orrs	r2, r6
 8003ba0:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003ba4:	608a      	str	r2, [r1, #8]
}
 8003ba6:	e6cc      	b.n	8003942 <HAL_ADC_ConfigChannel+0xc6>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ba8:	0df5      	lsrs	r5, r6, #23
 8003baa:	f104 0014 	add.w	r0, r4, #20
 8003bae:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8003bb2:	f3c6 5604 	ubfx	r6, r6, #20, #5
 8003bb6:	582f      	ldr	r7, [r5, r0]
 8003bb8:	f04f 0c07 	mov.w	ip, #7
 8003bbc:	fa0c f606 	lsl.w	r6, ip, r6
 8003bc0:	ea27 0606 	bic.w	r6, r7, r6
 8003bc4:	502e      	str	r6, [r5, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003bc6:	6960      	ldr	r0, [r4, #20]
 8003bc8:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003bcc:	6160      	str	r0, [r4, #20]
}
 8003bce:	e6e8      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x126>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003bd0:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8003bd4:	0685      	lsls	r5, r0, #26
 8003bd6:	3a1e      	subs	r2, #30
 8003bd8:	2001      	movs	r0, #1
 8003bda:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 8003bde:	0512      	lsls	r2, r2, #20
 8003be0:	fa00 f606 	lsl.w	r6, r0, r6
 8003be4:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003be8:	4335      	orrs	r5, r6
 8003bea:	e781      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x274>
 8003bec:	407f0000 	.word	0x407f0000
 8003bf0:	80080000 	.word	0x80080000
 8003bf4:	50000300 	.word	0x50000300
 8003bf8:	c3210000 	.word	0xc3210000
 8003bfc:	90c00010 	.word	0x90c00010
 8003c00:	c7520000 	.word	0xc7520000
 8003c04:	50000100 	.word	0x50000100
 8003c08:	20000680 	.word	0x20000680
 8003c0c:	053e2d63 	.word	0x053e2d63
 8003c10:	cb840000 	.word	0xcb840000
 8003c14:	03fff000 	.word	0x03fff000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c18:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c1c:	b11d      	cbz	r5, 8003c26 <HAL_ADC_ConfigChannel+0x3aa>
  return __builtin_clz(value);
 8003c1e:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003c22:	42aa      	cmp	r2, r5
 8003c24:	d071      	beq.n	8003d0a <HAL_ADC_ConfigChannel+0x48e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003c28:	6e66      	ldr	r6, [r4, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2a:	f104 0260 	add.w	r2, r4, #96	; 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003c2e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8003c32:	f104 0764 	add.w	r7, r4, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c36:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c3a:	b11d      	cbz	r5, 8003c44 <HAL_ADC_ConfigChannel+0x3c8>
  return __builtin_clz(value);
 8003c3c:	fab5 f585 	clz	r5, r5
 8003c40:	42ae      	cmp	r6, r5
 8003c42:	d050      	beq.n	8003ce6 <HAL_ADC_ConfigChannel+0x46a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c44:	6895      	ldr	r5, [r2, #8]
 8003c46:	6896      	ldr	r6, [r2, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c48:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003c4c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c50:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c54:	b11d      	cbz	r5, 8003c5e <HAL_ADC_ConfigChannel+0x3e2>
  return __builtin_clz(value);
 8003c56:	fab5 f585 	clz	r5, r5
 8003c5a:	42ae      	cmp	r6, r5
 8003c5c:	d031      	beq.n	8003cc2 <HAL_ADC_ConfigChannel+0x446>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003c5e:	68d5      	ldr	r5, [r2, #12]
 8003c60:	68d5      	ldr	r5, [r2, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c62:	f102 070c 	add.w	r7, r2, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003c66:	f3c5 6284 	ubfx	r2, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c6a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c6e:	2d00      	cmp	r5, #0
 8003c70:	f43f ae32 	beq.w	80038d8 <HAL_ADC_ConfigChannel+0x5c>
  return __builtin_clz(value);
 8003c74:	fab5 f585 	clz	r5, r5
 8003c78:	e6f0      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x1e0>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7a:	fa90 f2a0 	rbit	r2, r0
  if (value == 0U)
 8003c7e:	2a00      	cmp	r2, #0
 8003c80:	d059      	beq.n	8003d36 <HAL_ADC_ConfigChannel+0x4ba>
  return __builtin_clz(value);
 8003c82:	fab2 f282 	clz	r2, r2
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c86:	3201      	adds	r2, #1
 8003c88:	0692      	lsls	r2, r2, #26
 8003c8a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003c92:	2d00      	cmp	r5, #0
 8003c94:	d04d      	beq.n	8003d32 <HAL_ADC_ConfigChannel+0x4b6>
  return __builtin_clz(value);
 8003c96:	fab5 f585 	clz	r5, r5
 8003c9a:	3501      	adds	r5, #1
 8003c9c:	f005 051f 	and.w	r5, r5, #31
 8003ca0:	2601      	movs	r6, #1
 8003ca2:	fa06 f505 	lsl.w	r5, r6, r5
 8003ca6:	4315      	orrs	r5, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003cac:	2800      	cmp	r0, #0
 8003cae:	d045      	beq.n	8003d3c <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8003cb0:	fab0 f080 	clz	r0, r0
 8003cb4:	3001      	adds	r0, #1
 8003cb6:	f000 001f 	and.w	r0, r0, #31
 8003cba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003cbe:	0502      	lsls	r2, r0, #20
 8003cc0:	e716      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x274>
  MODIFY_REG(*preg,
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cc8:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cca:	68d0      	ldr	r0, [r2, #12]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003ccc:	6808      	ldr	r0, [r1, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cce:	f102 070c 	add.w	r7, r2, #12
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cd2:	68d2      	ldr	r2, [r2, #12]
 8003cd4:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003cd8:	f3c2 6284 	ubfx	r2, r2, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cdc:	2d00      	cmp	r5, #0
 8003cde:	d1c4      	bne.n	8003c6a <HAL_ADC_ConfigChannel+0x3ee>
 8003ce0:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003ce4:	e6ba      	b.n	8003a5c <HAL_ADC_ConfigChannel+0x1e0>
  MODIFY_REG(*preg,
 8003ce6:	6838      	ldr	r0, [r7, #0]
 8003ce8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003cec:	6038      	str	r0, [r7, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003cee:	6890      	ldr	r0, [r2, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003cf0:	6808      	ldr	r0, [r1, #0]
 8003cf2:	6896      	ldr	r6, [r2, #8]
 8003cf4:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cf8:	f102 0708 	add.w	r7, r2, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003cfc:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d00:	2d00      	cmp	r5, #0
 8003d02:	d1a5      	bne.n	8003c50 <HAL_ADC_ConfigChannel+0x3d4>
 8003d04:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003d08:	e69f      	b.n	8003a4a <HAL_ADC_ConfigChannel+0x1ce>
  MODIFY_REG(*preg,
 8003d0a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003d0c:	4622      	mov	r2, r4
 8003d0e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003d12:	f842 0f60 	str.w	r0, [r2, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003d16:	6e60      	ldr	r0, [r4, #100]	; 0x64
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d18:	6808      	ldr	r0, [r1, #0]
 8003d1a:	6e66      	ldr	r6, [r4, #100]	; 0x64
 8003d1c:	f3c0 0512 	ubfx	r5, r0, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003d20:	f104 0764 	add.w	r7, r4, #100	; 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003d24:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003d28:	2d00      	cmp	r5, #0
 8003d2a:	d184      	bne.n	8003c36 <HAL_ADC_ConfigChannel+0x3ba>
 8003d2c:	f3c0 6584 	ubfx	r5, r0, #26, #5
 8003d30:	e682      	b.n	8003a38 <HAL_ADC_ConfigChannel+0x1bc>
 8003d32:	2502      	movs	r5, #2
 8003d34:	e7b7      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x42a>
 8003d36:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d3a:	e7a8      	b.n	8003c8e <HAL_ADC_ConfigChannel+0x412>
 8003d3c:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003d40:	e6d6      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x274>
 8003d42:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003d46:	e6b3      	b.n	8003ab0 <HAL_ADC_ConfigChannel+0x234>
 8003d48:	4a01      	ldr	r2, [pc, #4]	; (8003d50 <HAL_ADC_ConfigChannel+0x4d4>)
 8003d4a:	e6d1      	b.n	8003af0 <HAL_ADC_ConfigChannel+0x274>
 8003d4c:	2502      	movs	r5, #2
 8003d4e:	e6bc      	b.n	8003aca <HAL_ADC_ConfigChannel+0x24e>
 8003d50:	fe500000 	.word	0xfe500000

08003d54 <HAL_ADCEx_InjectedConfigChannel>:
  * @param sConfigInjected Structure of ADC injected group and ADC channel for
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef *sConfigInjected)
{
 8003d54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d58:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 8003d5c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0;
 8003d5e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8003d60:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8003d62:	9201      	str	r2, [sp, #4]
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003d64:	6942      	ldr	r2, [r0, #20]
  __HAL_LOCK(hadc);
 8003d66:	f000 8166 	beq.w	8004036 <HAL_ADCEx_InjectedConfigChannel+0x2e2>
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d70:	b1e2      	cbz	r2, 8003dac <HAL_ADCEx_InjectedConfigChannel+0x58>
      (sConfigInjected->InjectedNbrOfConversion == 1U))
 8003d72:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d019      	beq.n	8003dac <HAL_ADCEx_InjectedConfigChannel+0x58>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003d78:	6e84      	ldr	r4, [r0, #104]	; 0x68
 8003d7a:	2c00      	cmp	r4, #0
 8003d7c:	f040 8119 	bne.w	8003fb2 <HAL_ADCEx_InjectedConfigChannel+0x25e>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003d80:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 8003d82:	2a00      	cmp	r2, #0
 8003d84:	f000 8222 	beq.w	80041cc <HAL_ADCEx_InjectedConfigChannel+0x478>
      {
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003d88:	1e5d      	subs	r5, r3, #1
 8003d8a:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003d8c:	f002 037c 	and.w	r3, r2, #124	; 0x7c
 8003d90:	432b      	orrs	r3, r5
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 8003d92:	4323      	orrs	r3, r4
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003d94:	e9d1 2400 	ldrd	r2, r4, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8003d98:	6685      	str	r5, [r0, #104]	; 0x68
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003d9a:	f004 051f 	and.w	r5, r4, #31
 8003d9e:	f3c2 6484 	ubfx	r4, r2, #26, #5
 8003da2:	40ac      	lsls	r4, r5

    /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003da4:	431c      	orrs	r4, r3
 8003da6:	6644      	str	r4, [r0, #100]	; 0x64

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003da8:	6803      	ldr	r3, [r0, #0]
 8003daa:	e005      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003dac:	684b      	ldr	r3, [r1, #4]
 8003dae:	2b09      	cmp	r3, #9
 8003db0:	f000 80eb 	beq.w	8003f8a <HAL_ADCEx_InjectedConfigChannel+0x236>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003db4:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003db6:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003db8:	689c      	ldr	r4, [r3, #8]
 8003dba:	0727      	lsls	r7, r4, #28
 8003dbc:	d410      	bmi.n	8003de0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 8003dbe:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003dc2:	2c00      	cmp	r4, #0
 8003dc4:	f040 80d8 	bne.w	8003f78 <HAL_ADCEx_InjectedConfigChannel+0x224>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8003dc8:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
 8003dcc:	68dd      	ldr	r5, [r3, #12]
 8003dce:	f891 6026 	ldrb.w	r6, [r1, #38]	; 0x26
 8003dd2:	0524      	lsls	r4, r4, #20
 8003dd4:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003dd8:	ea44 5446 	orr.w	r4, r4, r6, lsl #21
 8003ddc:	432c      	orrs	r4, r5
 8003dde:	60dc      	str	r4, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003de0:	689c      	ldr	r4, [r3, #8]
 8003de2:	f014 0404 	ands.w	r4, r4, #4
 8003de6:	d058      	beq.n	8003e9a <HAL_ADCEx_InjectedConfigChannel+0x146>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003de8:	689c      	ldr	r4, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dea:	2400      	movs	r4, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dec:	689d      	ldr	r5, [r3, #8]
  }

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dee:	07ee      	lsls	r6, r5, #31
 8003df0:	d40c      	bmi.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8003df2:	4dac      	ldr	r5, [pc, #688]	; (80040a4 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8003df4:	68ce      	ldr	r6, [r1, #12]
 8003df6:	42ae      	cmp	r6, r5
 8003df8:	f000 8100 	beq.w	8003ffc <HAL_ADCEx_InjectedConfigChannel+0x2a8>
    CLEAR_BIT(ADCx->DIFSEL,
 8003dfc:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8003e00:	f3c2 0512 	ubfx	r5, r2, #0, #19
 8003e04:	ea21 0105 	bic.w	r1, r1, r5
 8003e08:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8003e0c:	49a6      	ldr	r1, [pc, #664]	; (80040a8 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8003e0e:	420a      	tst	r2, r1
 8003e10:	d019      	beq.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003e12:	4ea6      	ldr	r6, [pc, #664]	; (80040ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8003e14:	4da6      	ldr	r5, [pc, #664]	; (80040b0 <HAL_ADCEx_InjectedConfigChannel+0x35c>)
 8003e16:	68b1      	ldr	r1, [r6, #8]
 8003e18:	42aa      	cmp	r2, r5
 8003e1a:	f001 77e0 	and.w	r7, r1, #29360128	; 0x1c00000
 8003e1e:	d019      	beq.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x100>
         || (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003e20:	4da4      	ldr	r5, [pc, #656]	; (80040b4 <HAL_ADCEx_InjectedConfigChannel+0x360>)
 8003e22:	42aa      	cmp	r2, r5
 8003e24:	d016      	beq.n	8003e54 <HAL_ADCEx_InjectedConfigChannel+0x100>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8003e26:	4da4      	ldr	r5, [pc, #656]	; (80040b8 <HAL_ADCEx_InjectedConfigChannel+0x364>)
 8003e28:	42aa      	cmp	r2, r5
 8003e2a:	f040 810d 	bne.w	8004048 <HAL_ADCEx_InjectedConfigChannel+0x2f4>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003e2e:	01cd      	lsls	r5, r1, #7
 8003e30:	d409      	bmi.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e32:	4aa2      	ldr	r2, [pc, #648]	; (80040bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d006      	beq.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e38:	68b3      	ldr	r3, [r6, #8]
 8003e3a:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003e3e:	431f      	orrs	r7, r3
 8003e40:	f047 7780 	orr.w	r7, r7, #16777216	; 0x1000000
 8003e44:	60b7      	str	r7, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e46:	2300      	movs	r3, #0
 8003e48:	f880 3058 	strb.w	r3, [r0, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	b002      	add	sp, #8
 8003e50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e54:	020a      	lsls	r2, r1, #8
 8003e56:	d4f6      	bmi.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e58:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e5c:	d1f3      	bne.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
 8003e5e:	4a93      	ldr	r2, [pc, #588]	; (80040ac <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8003e60:	6893      	ldr	r3, [r2, #8]
 8003e62:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8003e66:	431f      	orrs	r7, r3
 8003e68:	f447 0700 	orr.w	r7, r7, #8388608	; 0x800000
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8003e6c:	4b94      	ldr	r3, [pc, #592]	; (80040c0 <HAL_ADCEx_InjectedConfigChannel+0x36c>)
 8003e6e:	6097      	str	r7, [r2, #8]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a94      	ldr	r2, [pc, #592]	; (80040c4 <HAL_ADCEx_InjectedConfigChannel+0x370>)
 8003e74:	099b      	lsrs	r3, r3, #6
 8003e76:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7a:	099b      	lsrs	r3, r3, #6
 8003e7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	3318      	adds	r3, #24
 8003e84:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003e86:	9b01      	ldr	r3, [sp, #4]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0dc      	beq.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
          wait_loop_index--;
 8003e8c:	9b01      	ldr	r3, [sp, #4]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8003e92:	9b01      	ldr	r3, [sp, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f9      	bne.n	8003e8c <HAL_ADCEx_InjectedConfigChannel+0x138>
 8003e98:	e7d5      	b.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e9a:	689d      	ldr	r5, [r3, #8]
 8003e9c:	f015 0508 	ands.w	r5, r5, #8
 8003ea0:	d1a4      	bne.n	8003dec <HAL_ADCEx_InjectedConfigChannel+0x98>
    if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003ea2:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	f040 809a 	bne.w	8003fde <HAL_ADCEx_InjectedConfigChannel+0x28a>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003eaa:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003eae:	2c01      	cmp	r4, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003eb0:	68dc      	ldr	r4, [r3, #12]
 8003eb2:	bf0c      	ite	eq
 8003eb4:	f044 7400 	orreq.w	r4, r4, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003eb8:	f024 7400 	bicne.w	r4, r4, #33554432	; 0x2000000
 8003ebc:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ebe:	2400      	movs	r4, #0
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003ec0:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8003ec4:	2e01      	cmp	r6, #1
      MODIFY_REG(hadc->Instance->CFGR2,
 8003ec6:	691e      	ldr	r6, [r3, #16]
    if (sConfigInjected->InjecOversamplingMode == ENABLE)
 8003ec8:	f000 80e0 	beq.w	800408c <HAL_ADCEx_InjectedConfigChannel+0x338>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8003ecc:	f026 0602 	bic.w	r6, r6, #2
 8003ed0:	611e      	str	r6, [r3, #16]
    if (sConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003ed2:	688e      	ldr	r6, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ed4:	0dd7      	lsrs	r7, r2, #23
 8003ed6:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003eda:	f007 0704 	and.w	r7, r7, #4
  MODIFY_REG(*preg,
 8003ede:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8003ee2:	f000 80c4 	beq.w	800406e <HAL_ADCEx_InjectedConfigChannel+0x31a>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003ee6:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8003eea:	f04f 0e07 	mov.w	lr, #7
 8003eee:	4096      	lsls	r6, r2
 8003ef0:	fa0e fe02 	lsl.w	lr, lr, r2
 8003ef4:	f857 200c 	ldr.w	r2, [r7, ip]
 8003ef8:	ea22 020e 	bic.w	r2, r2, lr
 8003efc:	4316      	orrs	r6, r2
 8003efe:	f847 600c 	str.w	r6, [r7, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f08:	615a      	str	r2, [r3, #20]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003f0a:	690f      	ldr	r7, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003f0c:	68de      	ldr	r6, [r3, #12]
    if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8003f0e:	2f04      	cmp	r7, #4
 8003f10:	f000 80e0 	beq.w	80040d4 <HAL_ADCEx_InjectedConfigChannel+0x380>
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003f14:	f3c6 06c1 	ubfx	r6, r6, #3, #2
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f18:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8003f1c:	ea4f 0e46 	mov.w	lr, r6, lsl #1
  MODIFY_REG(*preg,
 8003f20:	680e      	ldr	r6, [r1, #0]
 8003f22:	f852 8027 	ldr.w	r8, [r2, r7, lsl #2]
 8003f26:	f006 4cf8 	and.w	ip, r6, #2080374784	; 0x7c000000
 8003f2a:	4e67      	ldr	r6, [pc, #412]	; (80040c8 <HAL_ADCEx_InjectedConfigChannel+0x374>)
 8003f2c:	ea08 0606 	and.w	r6, r8, r6
 8003f30:	ea4c 0c06 	orr.w	ip, ip, r6
 8003f34:	694e      	ldr	r6, [r1, #20]
 8003f36:	fa06 f60e 	lsl.w	r6, r6, lr
 8003f3a:	ea46 060c 	orr.w	r6, r6, ip
 8003f3e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8003f42:	f842 6027 	str.w	r6, [r2, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f46:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 8003f4a:	698f      	ldr	r7, [r1, #24]
 8003f4c:	f852 602c 	ldr.w	r6, [r2, ip, lsl #2]
 8003f50:	f026 7680 	bic.w	r6, r6, #16777216	; 0x1000000
 8003f54:	433e      	orrs	r6, r7
 8003f56:	f842 602c 	str.w	r6, [r2, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber,
 8003f5a:	7f0e      	ldrb	r6, [r1, #28]
 8003f5c:	690f      	ldr	r7, [r1, #16]
 8003f5e:	2e01      	cmp	r6, #1
  MODIFY_REG(*preg,
 8003f60:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8003f64:	bf08      	it	eq
 8003f66:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003f6a:	f026 7600 	bic.w	r6, r6, #33554432	; 0x2000000
 8003f6e:	4335      	orrs	r5, r6
 8003f70:	f842 5027 	str.w	r5, [r2, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 8003f74:	680a      	ldr	r2, [r1, #0]
}
 8003f76:	e739      	b.n	8003dec <HAL_ADCEx_InjectedConfigChannel+0x98>
      MODIFY_REG(hadc->Instance->CFGR,
 8003f78:	68dc      	ldr	r4, [r3, #12]
 8003f7a:	f891 5026 	ldrb.w	r5, [r1, #38]	; 0x26
 8003f7e:	f424 1440 	bic.w	r4, r4, #3145728	; 0x300000
 8003f82:	ea44 5445 	orr.w	r4, r4, r5, lsl #21
 8003f86:	60dc      	str	r4, [r3, #12]
 8003f88:	e72a      	b.n	8003de0 <HAL_ADCEx_InjectedConfigChannel+0x8c>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f8c:	680a      	ldr	r2, [r1, #0]
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d056      	beq.n	8004040 <HAL_ADCEx_InjectedConfigChannel+0x2ec>
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f92:	6acc      	ldr	r4, [r1, #44]	; 0x2c
                                           | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8003f94:	f003 037c 	and.w	r3, r3, #124	; 0x7c
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8003f98:	0c55      	lsrs	r5, r2, #17
 8003f9a:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8003f9e:	4323      	orrs	r3, r4
 8003fa0:	431d      	orrs	r5, r3
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	4e49      	ldr	r6, [pc, #292]	; (80040cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8003fa6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003fa8:	4034      	ands	r4, r6
 8003faa:	432c      	orrs	r4, r5
 8003fac:	64dc      	str	r4, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 8003fae:	6645      	str	r5, [r0, #100]	; 0x64
 8003fb0:	e702      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x64>
    tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank);
 8003fb2:	680a      	ldr	r2, [r1, #0]
 8003fb4:	684b      	ldr	r3, [r1, #4]
 8003fb6:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8003fba:	f003 031f 	and.w	r3, r3, #31
 8003fbe:	409d      	lsls	r5, r3
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003fc0:	6e43      	ldr	r3, [r0, #100]	; 0x64
    hadc->InjectionConfig.ChannelCount--;
 8003fc2:	3c01      	subs	r4, #1
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003fc4:	431d      	orrs	r5, r3
    hadc->InjectionConfig.ChannelCount--;
 8003fc6:	6684      	str	r4, [r0, #104]	; 0x68
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003fc8:	6803      	ldr	r3, [r0, #0]
    hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8003fca:	6645      	str	r5, [r0, #100]	; 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8003fcc:	2c00      	cmp	r4, #0
 8003fce:	f47f aef3 	bne.w	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x64>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8003fd2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8003fd4:	4e3d      	ldr	r6, [pc, #244]	; (80040cc <HAL_ADCEx_InjectedConfigChannel+0x378>)
 8003fd6:	4034      	ands	r4, r6
 8003fd8:	4325      	orrs	r5, r4
 8003fda:	64dd      	str	r5, [r3, #76]	; 0x4c
 8003fdc:	e6ec      	b.n	8003db8 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8003fde:	6acc      	ldr	r4, [r1, #44]	; 0x2c
 8003fe0:	2c00      	cmp	r4, #0
 8003fe2:	f43f af62 	beq.w	8003eaa <HAL_ADCEx_InjectedConfigChannel+0x156>
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003fe6:	f891 4025 	ldrb.w	r4, [r1, #37]	; 0x25
 8003fea:	2c01      	cmp	r4, #1
 8003fec:	f000 8158 	beq.w	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x54c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003ff0:	68dc      	ldr	r4, [r3, #12]
 8003ff2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003ff6:	60dc      	str	r4, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ff8:	462c      	mov	r4, r5
 8003ffa:	e761      	b.n	8003ec0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
    SET_BIT(ADCx->DIFSEL,
 8003ffc:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8004000:	f3c2 0612 	ubfx	r6, r2, #0, #19
 8004004:	4335      	orrs	r5, r6
 8004006:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 800400a:	2e00      	cmp	r6, #0
 800400c:	f040 80a7 	bne.w	800415e <HAL_ADCEx_InjectedConfigChannel+0x40a>
 8004010:	0e92      	lsrs	r2, r2, #26
 8004012:	1c55      	adds	r5, r2, #1
 8004014:	f005 0c1f 	and.w	ip, r5, #31
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004018:	f1bc 0f09 	cmp.w	ip, #9
 800401c:	f200 80d9 	bhi.w	80041d2 <HAL_ADCEx_InjectedConfigChannel+0x47e>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004020:	06ad      	lsls	r5, r5, #26
 8004022:	2201      	movs	r2, #1
 8004024:	fa02 f20c 	lsl.w	r2, r2, ip
 8004028:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 800402c:	4315      	orrs	r5, r2
 800402e:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8004032:	0512      	lsls	r2, r2, #20
 8004034:	e0db      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
  __HAL_LOCK(hadc);
 8004036:	2402      	movs	r4, #2
}
 8004038:	4620      	mov	r0, r4
 800403a:	b002      	add	sp, #8
 800403c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
 8004040:	0c55      	lsrs	r5, r2, #17
 8004042:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004046:	e7ac      	b.n	8003fa2 <HAL_ADCEx_InjectedConfigChannel+0x24e>
    else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004048:	4d21      	ldr	r5, [pc, #132]	; (80040d0 <HAL_ADCEx_InjectedConfigChannel+0x37c>)
 800404a:	42aa      	cmp	r2, r5
 800404c:	f47f aefb 	bne.w	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004050:	0249      	lsls	r1, r1, #9
 8004052:	f53f aef8 	bmi.w	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
      if (ADC_VREFINT_INSTANCE(hadc))
 8004056:	4a19      	ldr	r2, [pc, #100]	; (80040bc <HAL_ADCEx_InjectedConfigChannel+0x368>)
 8004058:	4293      	cmp	r3, r2
 800405a:	f43f aef4 	beq.w	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800405e:	68b3      	ldr	r3, [r6, #8]
 8004060:	f023 73e0 	bic.w	r3, r3, #29360128	; 0x1c00000
 8004064:	431f      	orrs	r7, r3
 8004066:	f447 0780 	orr.w	r7, r7, #4194304	; 0x400000
 800406a:	60b7      	str	r7, [r6, #8]
}
 800406c:	e6eb      	b.n	8003e46 <HAL_ADCEx_InjectedConfigChannel+0xf2>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800406e:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 8004072:	f04f 0c07 	mov.w	ip, #7
 8004076:	fa0c fc02 	lsl.w	ip, ip, r2
 800407a:	59ba      	ldr	r2, [r7, r6]
 800407c:	ea22 020c 	bic.w	r2, r2, ip
 8004080:	51ba      	str	r2, [r7, r6]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8004082:	695a      	ldr	r2, [r3, #20]
 8004084:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004088:	615a      	str	r2, [r3, #20]
}
 800408a:	e73e      	b.n	8003f0a <HAL_ADCEx_InjectedConfigChannel+0x1b6>
      MODIFY_REG(hadc->Instance->CFGR2,
 800408c:	f426 7cff 	bic.w	ip, r6, #510	; 0x1fe
 8004090:	e9d1 670d 	ldrd	r6, r7, [r1, #52]	; 0x34
 8004094:	433e      	orrs	r6, r7
 8004096:	ea46 060c 	orr.w	r6, r6, ip
 800409a:	f046 0602 	orr.w	r6, r6, #2
 800409e:	611e      	str	r6, [r3, #16]
 80040a0:	e717      	b.n	8003ed2 <HAL_ADCEx_InjectedConfigChannel+0x17e>
 80040a2:	bf00      	nop
 80040a4:	407f0000 	.word	0x407f0000
 80040a8:	80080000 	.word	0x80080000
 80040ac:	50000300 	.word	0x50000300
 80040b0:	c3210000 	.word	0xc3210000
 80040b4:	90c00010 	.word	0x90c00010
 80040b8:	c7520000 	.word	0xc7520000
 80040bc:	50000100 	.word	0x50000100
 80040c0:	20000680 	.word	0x20000680
 80040c4:	053e2d63 	.word	0x053e2d63
 80040c8:	03fff000 	.word	0x03fff000
 80040cc:	04104000 	.word	0x04104000
 80040d0:	cb840000 	.word	0xcb840000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040d4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040d6:	680a      	ldr	r2, [r1, #0]
 80040d8:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 80040da:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040de:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80040e2:	2e00      	cmp	r6, #0
 80040e4:	f000 809a 	beq.w	800421c <HAL_ADCEx_InjectedConfigChannel+0x4c8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040e8:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 80040ec:	b126      	cbz	r6, 80040f8 <HAL_ADCEx_InjectedConfigChannel+0x3a4>
  return __builtin_clz(value);
 80040ee:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80040f2:	42b5      	cmp	r5, r6
 80040f4:	f000 80d9 	beq.w	80042aa <HAL_ADCEx_InjectedConfigChannel+0x556>
 80040f8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 80040fa:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040fc:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004100:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004104:	f103 0c64 	add.w	ip, r3, #100	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800410c:	b126      	cbz	r6, 8004118 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
  return __builtin_clz(value);
 800410e:	fab6 f686 	clz	r6, r6
 8004112:	42b7      	cmp	r7, r6
 8004114:	f000 80de 	beq.w	80042d4 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004118:	68ae      	ldr	r6, [r5, #8]
 800411a:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004120:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004124:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004128:	b126      	cbz	r6, 8004134 <HAL_ADCEx_InjectedConfigChannel+0x3e0>
  return __builtin_clz(value);
 800412a:	fab6 f686 	clz	r6, r6
 800412e:	42b7      	cmp	r7, r6
 8004130:	f000 80e5 	beq.w	80042fe <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004134:	68ee      	ldr	r6, [r5, #12]
 8004136:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004138:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800413a:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800413e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004142:	2e00      	cmp	r6, #0
 8004144:	f43f ae52 	beq.w	8003dec <HAL_ADCEx_InjectedConfigChannel+0x98>
  return __builtin_clz(value);
 8004148:	fab6 f686 	clz	r6, r6
 800414c:	42be      	cmp	r6, r7
 800414e:	f47f ae4d 	bne.w	8003dec <HAL_ADCEx_InjectedConfigChannel+0x98>
  MODIFY_REG(*preg,
 8004152:	682a      	ldr	r2, [r5, #0]
 8004154:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004158:	602a      	str	r2, [r5, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
 800415a:	680a      	ldr	r2, [r1, #0]
}
 800415c:	e646      	b.n	8003dec <HAL_ADCEx_InjectedConfigChannel+0x98>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004162:	2d00      	cmp	r5, #0
 8004164:	d076      	beq.n	8004254 <HAL_ADCEx_InjectedConfigChannel+0x500>
  return __builtin_clz(value);
 8004166:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800416a:	3501      	adds	r5, #1
 800416c:	f005 051f 	and.w	r5, r5, #31
 8004170:	2d09      	cmp	r5, #9
 8004172:	d96f      	bls.n	8004254 <HAL_ADCEx_InjectedConfigChannel+0x500>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004174:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004178:	2d00      	cmp	r5, #0
 800417a:	f000 80e0 	beq.w	800433e <HAL_ADCEx_InjectedConfigChannel+0x5ea>
  return __builtin_clz(value);
 800417e:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004182:	3501      	adds	r5, #1
 8004184:	06ad      	lsls	r5, r5, #26
 8004186:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800418e:	2e00      	cmp	r6, #0
 8004190:	f000 80d3 	beq.w	800433a <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8004194:	fab6 f686 	clz	r6, r6
 8004198:	3601      	adds	r6, #1
 800419a:	f006 061f 	and.w	r6, r6, #31
 800419e:	2701      	movs	r7, #1
 80041a0:	fa07 f606 	lsl.w	r6, r7, r6
 80041a4:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041a6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	f000 80c3 	beq.w	8004336 <HAL_ADCEx_InjectedConfigChannel+0x5e2>
  return __builtin_clz(value);
 80041b0:	fab2 f282 	clz	r2, r2
 80041b4:	3201      	adds	r2, #1
 80041b6:	f002 061f 	and.w	r6, r2, #31
 80041ba:	f06f 071d 	mvn.w	r7, #29
 80041be:	2203      	movs	r2, #3
 80041c0:	fb12 7206 	smlabb	r2, r2, r6, r7
 80041c4:	0512      	lsls	r2, r2, #20
 80041c6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041ca:	e010      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
 80041cc:	3b01      	subs	r3, #1
 80041ce:	461d      	mov	r5, r3
 80041d0:	e5e0      	b.n	8003d94 <HAL_ADCEx_InjectedConfigChannel+0x40>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 80041d2:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80041d6:	06ad      	lsls	r5, r5, #26
 80041d8:	3a1e      	subs	r2, #30
 80041da:	2601      	movs	r6, #1
 80041dc:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
 80041e0:	0512      	lsls	r2, r2, #20
 80041e2:	fa06 fc0c 	lsl.w	ip, r6, ip
 80041e6:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 80041ea:	ea45 050c 	orr.w	r5, r5, ip
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041ee:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041f0:	0dd7      	lsrs	r7, r2, #23
  MODIFY_REG(*preg,
 80041f2:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041f4:	f007 0704 	and.w	r7, r7, #4
 80041f8:	f103 0614 	add.w	r6, r3, #20
  MODIFY_REG(*preg,
 80041fc:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004200:	fa05 fc02 	lsl.w	ip, r5, r2
 8004204:	f04f 0e07 	mov.w	lr, #7
 8004208:	59bd      	ldr	r5, [r7, r6]
 800420a:	fa0e f202 	lsl.w	r2, lr, r2
 800420e:	ea25 0202 	bic.w	r2, r5, r2
 8004212:	ea42 020c 	orr.w	r2, r2, ip
 8004216:	51ba      	str	r2, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
 8004218:	680a      	ldr	r2, [r1, #0]
}
 800421a:	e5f7      	b.n	8003e0c <HAL_ADCEx_InjectedConfigChannel+0xb8>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800421c:	f3c2 6684 	ubfx	r6, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004220:	42b5      	cmp	r5, r6
 8004222:	d042      	beq.n	80042aa <HAL_ADCEx_InjectedConfigChannel+0x556>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004224:	6e5d      	ldr	r5, [r3, #100]	; 0x64
 8004226:	6e5f      	ldr	r7, [r3, #100]	; 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004228:	f103 0560 	add.w	r5, r3, #96	; 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800422c:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004230:	f103 0c64 	add.w	ip, r3, #100	; 0x64
 8004234:	42b7      	cmp	r7, r6
 8004236:	d04d      	beq.n	80042d4 <HAL_ADCEx_InjectedConfigChannel+0x580>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004238:	68af      	ldr	r7, [r5, #8]
 800423a:	68af      	ldr	r7, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800423c:	f105 0c08 	add.w	ip, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004240:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004244:	42b7      	cmp	r7, r6
 8004246:	d05a      	beq.n	80042fe <HAL_ADCEx_InjectedConfigChannel+0x5aa>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004248:	68ef      	ldr	r7, [r5, #12]
 800424a:	68ef      	ldr	r7, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800424c:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800424e:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004252:	e77b      	b.n	800414c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004258:	2d00      	cmp	r5, #0
 800425a:	d066      	beq.n	800432a <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 800425c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel)
 8004260:	3501      	adds	r5, #1
 8004262:	06ad      	lsls	r5, r5, #26
 8004264:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004268:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800426c:	2e00      	cmp	r6, #0
 800426e:	d05a      	beq.n	8004326 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004270:	fab6 f686 	clz	r6, r6
 8004274:	3601      	adds	r6, #1
 8004276:	f006 061f 	and.w	r6, r6, #31
 800427a:	2701      	movs	r7, #1
 800427c:	fa07 f606 	lsl.w	r6, r7, r6
 8004280:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004282:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004286:	2a00      	cmp	r2, #0
 8004288:	d052      	beq.n	8004330 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800428a:	fab2 fc82 	clz	ip, r2
 800428e:	f10c 0c01 	add.w	ip, ip, #1
 8004292:	f00c 0c1f 	and.w	ip, ip, #31
 8004296:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800429a:	ea4f 520c 	mov.w	r2, ip, lsl #20
 800429e:	e7a6      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80042a0:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 80042a2:	f046 0620 	orr.w	r6, r6, #32
 80042a6:	65c6      	str	r6, [r0, #92]	; 0x5c
        tmp_hal_status = HAL_ERROR;
 80042a8:	e60a      	b.n	8003ec0 <HAL_ADCEx_InjectedConfigChannel+0x16c>
  MODIFY_REG(*preg,
 80042aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80042ac:	461d      	mov	r5, r3
 80042ae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042b2:	f845 2f60 	str.w	r2, [r5, #96]!
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042b6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042b8:	680a      	ldr	r2, [r1, #0]
 80042ba:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 80042bc:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80042c0:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042c4:	f103 0c64 	add.w	ip, r3, #100	; 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042c8:	2e00      	cmp	r6, #0
 80042ca:	f47f af1d 	bne.w	8004108 <HAL_ADCEx_InjectedConfigChannel+0x3b4>
 80042ce:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80042d2:	e7af      	b.n	8004234 <HAL_ADCEx_InjectedConfigChannel+0x4e0>
  MODIFY_REG(*preg,
 80042d4:	f8dc 2000 	ldr.w	r2, [ip]
 80042d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80042dc:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80042e0:	68aa      	ldr	r2, [r5, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042e2:	680a      	ldr	r2, [r1, #0]
 80042e4:	68af      	ldr	r7, [r5, #8]
 80042e6:	f3c2 0612 	ubfx	r6, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80042ea:	f3c7 6784 	ubfx	r7, r7, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ee:	f105 0c08 	add.w	ip, r5, #8
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 80042f2:	2e00      	cmp	r6, #0
 80042f4:	f47f af16 	bne.w	8004124 <HAL_ADCEx_InjectedConfigChannel+0x3d0>
 80042f8:	f3c2 6684 	ubfx	r6, r2, #26, #5
 80042fc:	e7a2      	b.n	8004244 <HAL_ADCEx_InjectedConfigChannel+0x4f0>
  MODIFY_REG(*preg,
 80042fe:	f8dc 2000 	ldr.w	r2, [ip]
 8004302:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004306:	f8cc 2000 	str.w	r2, [ip]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800430a:	68ea      	ldr	r2, [r5, #12]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800430c:	680a      	ldr	r2, [r1, #0]
 800430e:	68ef      	ldr	r7, [r5, #12]
 8004310:	f3c2 0612 	ubfx	r6, r2, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004314:	350c      	adds	r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004316:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel))
 800431a:	2e00      	cmp	r6, #0
 800431c:	f47f af0f 	bne.w	800413e <HAL_ADCEx_InjectedConfigChannel+0x3ea>
 8004320:	f3c2 6684 	ubfx	r6, r2, #26, #5
 8004324:	e712      	b.n	800414c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 8004326:	2602      	movs	r6, #2
 8004328:	e7aa      	b.n	8004280 <HAL_ADCEx_InjectedConfigChannel+0x52c>
 800432a:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 800432e:	e79b      	b.n	8004268 <HAL_ADCEx_InjectedConfigChannel+0x514>
 8004330:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8004334:	e75b      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 8004336:	4a03      	ldr	r2, [pc, #12]	; (8004344 <HAL_ADCEx_InjectedConfigChannel+0x5f0>)
 8004338:	e759      	b.n	80041ee <HAL_ADCEx_InjectedConfigChannel+0x49a>
 800433a:	2602      	movs	r6, #2
 800433c:	e732      	b.n	80041a4 <HAL_ADCEx_InjectedConfigChannel+0x450>
 800433e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 8004342:	e722      	b.n	800418a <HAL_ADCEx_InjectedConfigChannel+0x436>
 8004344:	fe500000 	.word	0xfe500000

08004348 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004348:	b4f0      	push	{r4, r5, r6, r7}
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800434a:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
  if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800434e:	680d      	ldr	r5, [r1, #0]
  __HAL_LOCK(hadc);
 8004350:	2a01      	cmp	r2, #1
{
 8004352:	b09c      	sub	sp, #112	; 0x70
  __HAL_LOCK(hadc);
 8004354:	d04f      	beq.n	80043f6 <HAL_ADCEx_MultiModeConfigChannel+0xae>

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8004356:	6804      	ldr	r4, [r0, #0]
 8004358:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800435a:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800435c:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800435e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8004362:	9218      	str	r2, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004364:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8004368:	9219      	str	r2, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800436a:	d008      	beq.n	800437e <HAL_ADCEx_MultiModeConfigChannel+0x36>

  if (tmphadcSlave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800436c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800436e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004372:	f041 0120 	orr.w	r1, r1, #32
 8004376:	65d9      	str	r1, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004378:	b01c      	add	sp, #112	; 0x70
 800437a:	bcf0      	pop	{r4, r5, r6, r7}
 800437c:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437e:	4a23      	ldr	r2, [pc, #140]	; (800440c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004380:	6890      	ldr	r0, [r2, #8]
 8004382:	0740      	lsls	r0, r0, #29
 8004384:	d50b      	bpl.n	800439e <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8004386:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004388:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800438a:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 800438e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004390:	65da      	str	r2, [r3, #92]	; 0x5c
  __HAL_UNLOCK(hadc);
 8004392:	2200      	movs	r2, #0
 8004394:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004398:	b01c      	add	sp, #112	; 0x70
 800439a:	bcf0      	pop	{r4, r5, r6, r7}
 800439c:	4770      	bx	lr
 800439e:	68a0      	ldr	r0, [r4, #8]
 80043a0:	0746      	lsls	r6, r0, #29
 80043a2:	d4f1      	bmi.n	8004388 <HAL_ADCEx_MultiModeConfigChannel+0x40>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80043a4:	b1d5      	cbz	r5, 80043dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80043a6:	4e1a      	ldr	r6, [pc, #104]	; (8004410 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80043a8:	684f      	ldr	r7, [r1, #4]
 80043aa:	68b0      	ldr	r0, [r6, #8]
 80043ac:	f893 c038 	ldrb.w	ip, [r3, #56]	; 0x38
 80043b0:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80043b4:	4338      	orrs	r0, r7
 80043b6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80043ba:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043bc:	68a4      	ldr	r4, [r4, #8]
 80043be:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c0:	4320      	orrs	r0, r4
 80043c2:	f010 0001 	ands.w	r0, r0, #1
 80043c6:	d114      	bne.n	80043f2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
        MODIFY_REG(tmpADC_Common->CCR,
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	4315      	orrs	r5, r2
 80043cc:	68b2      	ldr	r2, [r6, #8]
 80043ce:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80043d2:	f022 020f 	bic.w	r2, r2, #15
 80043d6:	4315      	orrs	r5, r2
 80043d8:	60b5      	str	r5, [r6, #8]
 80043da:	e7da      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043dc:	4d0c      	ldr	r5, [pc, #48]	; (8004410 <HAL_ADCEx_MultiModeConfigChannel+0xc8>)
 80043de:	68a9      	ldr	r1, [r5, #8]
 80043e0:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 80043e4:	60a9      	str	r1, [r5, #8]
 80043e6:	68a1      	ldr	r1, [r4, #8]
 80043e8:	6890      	ldr	r0, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043ea:	4308      	orrs	r0, r1
 80043ec:	f010 0001 	ands.w	r0, r0, #1
 80043f0:	d005      	beq.n	80043fe <HAL_ADCEx_MultiModeConfigChannel+0xb6>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043f2:	2000      	movs	r0, #0
 80043f4:	e7cd      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
  __HAL_LOCK(hadc);
 80043f6:	2002      	movs	r0, #2
}
 80043f8:	b01c      	add	sp, #112	; 0x70
 80043fa:	bcf0      	pop	{r4, r5, r6, r7}
 80043fc:	4770      	bx	lr
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80043fe:	68aa      	ldr	r2, [r5, #8]
 8004400:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004404:	f022 020f 	bic.w	r2, r2, #15
 8004408:	60aa      	str	r2, [r5, #8]
 800440a:	e7c2      	b.n	8004392 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800440c:	50000100 	.word	0x50000100
 8004410:	50000300 	.word	0x50000300

08004414 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004414:	b1b0      	cbz	r0, 8004444 <HAL_CORDIC_Init+0x30>
{
 8004416:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004418:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800441c:	4604      	mov	r4, r0
 800441e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004422:	b153      	cbz	r3, 800443a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004424:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004426:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004428:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800442a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hcordic->pOutBuff = NULL;
 800442e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004432:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004436:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8004438:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800443a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800443e:	f7fe f9a3 	bl	8002788 <HAL_CORDIC_MspInit>
 8004442:	e7ef      	b.n	8004424 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8004444:	2001      	movs	r0, #1
}
 8004446:	4770      	bx	lr

08004448 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004448:	4907      	ldr	r1, [pc, #28]	; (8004468 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800444a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800444c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800444e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004452:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004458:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800445a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800445e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8004462:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004464:	4770      	bx	lr
 8004466:	bf00      	nop
 8004468:	e000ed00 	.word	0xe000ed00

0800446c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800446c:	4b1c      	ldr	r3, [pc, #112]	; (80044e0 <HAL_NVIC_SetPriority+0x74>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004474:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004476:	f1c3 0e07 	rsb	lr, r3, #7
 800447a:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004482:	bf28      	it	cs
 8004484:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004488:	f1bc 0f06 	cmp.w	ip, #6
 800448c:	d91b      	bls.n	80044c6 <HAL_NVIC_SetPriority+0x5a>
 800448e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004490:	f04f 3cff 	mov.w	ip, #4294967295
 8004494:	fa0c fc03 	lsl.w	ip, ip, r3
 8004498:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800449c:	f04f 3cff 	mov.w	ip, #4294967295
 80044a0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80044a4:	ea21 010c 	bic.w	r1, r1, ip
 80044a8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80044aa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044ac:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80044b0:	db0c      	blt.n	80044cc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80044b6:	0109      	lsls	r1, r1, #4
 80044b8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80044bc:	b2c9      	uxtb	r1, r1
 80044be:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80044c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80044c6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044c8:	4613      	mov	r3, r2
 80044ca:	e7e7      	b.n	800449c <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <HAL_NVIC_SetPriority+0x78>)
 80044ce:	f000 000f 	and.w	r0, r0, #15
 80044d2:	0109      	lsls	r1, r1, #4
 80044d4:	4403      	add	r3, r0
 80044d6:	b2c9      	uxtb	r1, r1
 80044d8:	7619      	strb	r1, [r3, #24]
 80044da:	f85d fb04 	ldr.w	pc, [sp], #4
 80044de:	bf00      	nop
 80044e0:	e000ed00 	.word	0xe000ed00
 80044e4:	e000ecfc 	.word	0xe000ecfc

080044e8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80044e8:	2800      	cmp	r0, #0
 80044ea:	db08      	blt.n	80044fe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <HAL_NVIC_EnableIRQ+0x18>)
 80044ee:	0941      	lsrs	r1, r0, #5
 80044f0:	2301      	movs	r3, #1
 80044f2:	f000 001f 	and.w	r0, r0, #31
 80044f6:	fa03 f000 	lsl.w	r0, r3, r0
 80044fa:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80044fe:	4770      	bx	lr
 8004500:	e000e100 	.word	0xe000e100

08004504 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004504:	3801      	subs	r0, #1
 8004506:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800450a:	d210      	bcs.n	800452e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800450c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800450e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004512:	4c08      	ldr	r4, [pc, #32]	; (8004534 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004514:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004516:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800451a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800451e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004520:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004522:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004524:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004526:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800452a:	6119      	str	r1, [r3, #16]
 800452c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800452e:	2001      	movs	r0, #1
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000ed00 	.word	0xe000ed00

08004538 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004538:	4770      	bx	lr
 800453a:	bf00      	nop

0800453c <HAL_SYSTICK_IRQHandler>:
{
 800453c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800453e:	f7ff fffb 	bl	8004538 <HAL_SYSTICK_Callback>
}
 8004542:	bd08      	pop	{r3, pc}

08004544 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8004544:	b188      	cbz	r0, 800456a <HAL_DAC_Init+0x26>
{
 8004546:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004548:	7903      	ldrb	r3, [r0, #4]
 800454a:	4604      	mov	r4, r0
 800454c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004550:	b13b      	cbz	r3, 8004562 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004552:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004554:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004556:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004558:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800455a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800455c:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800455e:	4618      	mov	r0, r3
}
 8004560:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004562:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004564:	f7fe f928 	bl	80027b8 <HAL_DAC_MspInit>
 8004568:	e7f3      	b.n	8004552 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 800456a:	2001      	movs	r0, #1
}
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004574:	7943      	ldrb	r3, [r0, #5]
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004576:	688f      	ldr	r7, [r1, #8]
  __HAL_LOCK(hdac);
 8004578:	2b01      	cmp	r3, #1
 800457a:	f000 80c6 	beq.w	800470a <HAL_DAC_ConfigChannel+0x19a>
 800457e:	2301      	movs	r3, #1
 8004580:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004582:	2f04      	cmp	r7, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8004584:	f04f 0302 	mov.w	r3, #2
 8004588:	4606      	mov	r6, r0
 800458a:	460d      	mov	r5, r1
 800458c:	4614      	mov	r4, r2
 800458e:	7103      	strb	r3, [r0, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004590:	d077      	beq.n	8004682 <HAL_DAC_ConfigChannel+0x112>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004592:	6803      	ldr	r3, [r0, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004594:	f002 0410 	and.w	r4, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004598:	69ea      	ldr	r2, [r5, #28]
 800459a:	2a01      	cmp	r2, #1
 800459c:	d108      	bne.n	80045b0 <HAL_DAC_ConfigChannel+0x40>
    tmpreg1 = hdac->Instance->CCR;
 800459e:	6b99      	ldr	r1, [r3, #56]	; 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045a0:	6a2a      	ldr	r2, [r5, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045a2:	201f      	movs	r0, #31
 80045a4:	40a0      	lsls	r0, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045a6:	40a2      	lsls	r2, r4
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80045a8:	ea21 0100 	bic.w	r1, r1, r0
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045ac:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80045ae:	639a      	str	r2, [r3, #56]	; 0x38
  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80045b0:	69a9      	ldr	r1, [r5, #24]
  tmpreg1 = hdac->Instance->MCR;
 80045b2:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80045b4:	2207      	movs	r2, #7
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80045b6:	2901      	cmp	r1, #1
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80045b8:	fa02 fc04 	lsl.w	ip, r2, r4
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80045bc:	696a      	ldr	r2, [r5, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80045be:	d05e      	beq.n	800467e <HAL_DAC_ConfigChannel+0x10e>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 80045c0:	2902      	cmp	r1, #2
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80045c2:	bf16      	itet	ne
 80045c4:	fab2 f182 	clzne	r1, r2
    connectOnChip = DAC_MCR_MODE1_0;
 80045c8:	2101      	moveq	r1, #1
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80045ca:	0949      	lsrne	r1, r1, #5
    else
    {
      connectOnChip = 0x00000000UL;
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80045cc:	4311      	orrs	r1, r2
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80045ce:	792a      	ldrb	r2, [r5, #4]
 80045d0:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80045d2:	f44f 7200 	mov.w	r2, #512	; 0x200
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80045d6:	f44f 7880 	mov.w	r8, #256	; 0x100
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80045da:	fa02 f204 	lsl.w	r2, r2, r4
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80045de:	fa08 f804 	lsl.w	r8, r8, r4
 80045e2:	ea42 020c 	orr.w	r2, r2, ip
 80045e6:	ea20 0202 	bic.w	r2, r0, r2
 80045ea:	ea6f 0808 	mvn.w	r8, r8
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80045ee:	ea08 0802 	and.w	r8, r8, r2
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80045f2:	796a      	ldrb	r2, [r5, #5]
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80045f4:	ea47 0701 	orr.w	r7, r7, r1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80045f8:	bf08      	it	eq
 80045fa:	f447 7780 	orreq.w	r7, r7, #256	; 0x100
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80045fe:	2a01      	cmp	r2, #1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004600:	682a      	ldr	r2, [r5, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004602:	bf08      	it	eq
 8004604:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004608:	2a02      	cmp	r2, #2
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800460a:	f428 4840 	bic.w	r8, r8, #49152	; 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800460e:	d073      	beq.n	80046f8 <HAL_DAC_ConfigChannel+0x188>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004610:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004614:	40a7      	lsls	r7, r4
 8004616:	ea47 0708 	orr.w	r7, r7, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800461a:	63df      	str	r7, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004622:	40a1      	lsls	r1, r4
 8004624:	ea22 0201 	bic.w	r2, r2, r1
 8004628:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800462a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
  tmpreg1 = hdac->Instance->CR;
 800462e:	6818      	ldr	r0, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004630:	f640 75fe 	movw	r5, #4094	; 0xffe
 8004634:	40a5      	lsls	r5, r4
 8004636:	ea20 0505 	bic.w	r5, r0, r5
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800463a:	0192      	lsls	r2, r2, #6
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800463c:	fa01 f004 	lsl.w	r0, r1, r4
 8004640:	4328      	orrs	r0, r5
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004642:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004646:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
  hdac->Instance->CR = tmpreg1;
 800464a:	6018      	str	r0, [r3, #0]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800464c:	430a      	orrs	r2, r1
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800464e:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004652:	fa01 f004 	lsl.w	r0, r1, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004656:	25c0      	movs	r5, #192	; 0xc0
 8004658:	6819      	ldr	r1, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800465a:	40a2      	lsls	r2, r4
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800465c:	fa05 f404 	lsl.w	r4, r5, r4
 8004660:	ea21 0404 	bic.w	r4, r1, r4
 8004664:	601c      	str	r4, [r3, #0]
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004666:	6e19      	ldr	r1, [r3, #96]	; 0x60
 8004668:	ea21 0100 	bic.w	r1, r1, r0
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800466c:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800466e:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8004670:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8004672:	661a      	str	r2, [r3, #96]	; 0x60

  /* Return function status */
  return HAL_OK;
 8004674:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8004676:	7131      	strb	r1, [r6, #4]
  __HAL_UNLOCK(hdac);
 8004678:	7174      	strb	r4, [r6, #5]
}
 800467a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = 0x00000000UL;
 800467e:	2100      	movs	r1, #0
 8004680:	e7a4      	b.n	80045cc <HAL_DAC_ConfigChannel+0x5c>
    tickstart = HAL_GetTick();
 8004682:	f7fe ffdf 	bl	8003644 <HAL_GetTick>
 8004686:	4607      	mov	r7, r0
    if (Channel == DAC_CHANNEL_1)
 8004688:	b12c      	cbz	r4, 8004696 <HAL_DAC_ConfigChannel+0x126>
 800468a:	e014      	b.n	80046b6 <HAL_DAC_ConfigChannel+0x146>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800468c:	f7fe ffda 	bl	8003644 <HAL_GetTick>
 8004690:	1bc3      	subs	r3, r0, r7
 8004692:	2b01      	cmp	r3, #1
 8004694:	d83c      	bhi.n	8004710 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004696:	6833      	ldr	r3, [r6, #0]
 8004698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800469a:	041b      	lsls	r3, r3, #16
 800469c:	d4f6      	bmi.n	800468c <HAL_DAC_ConfigChannel+0x11c>
      HAL_Delay(1);
 800469e:	2001      	movs	r0, #1
 80046a0:	f7fe ffd6 	bl	8003650 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046a4:	6833      	ldr	r3, [r6, #0]
 80046a6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80046a8:	641a      	str	r2, [r3, #64]	; 0x40
 80046aa:	e00e      	b.n	80046ca <HAL_DAC_ConfigChannel+0x15a>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80046ac:	f7fe ffca 	bl	8003644 <HAL_GetTick>
 80046b0:	1bc3      	subs	r3, r0, r7
 80046b2:	2b01      	cmp	r3, #1
 80046b4:	d82c      	bhi.n	8004710 <HAL_DAC_ConfigChannel+0x1a0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046b6:	6833      	ldr	r3, [r6, #0]
 80046b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	dbf6      	blt.n	80046ac <HAL_DAC_ConfigChannel+0x13c>
      HAL_Delay(1U);
 80046be:	2001      	movs	r0, #1
 80046c0:	f7fe ffc6 	bl	8003650 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046c4:	6833      	ldr	r3, [r6, #0]
 80046c6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80046ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046cc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80046ce:	68af      	ldr	r7, [r5, #8]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80046d0:	f004 0410 	and.w	r4, r4, #16
 80046d4:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80046d8:	40a0      	lsls	r0, r4
 80046da:	40a1      	lsls	r1, r4
 80046dc:	ea22 0200 	bic.w	r2, r2, r0
 80046e0:	430a      	orrs	r2, r1
 80046e2:	649a      	str	r2, [r3, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80046e4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046e6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80046e8:	20ff      	movs	r0, #255	; 0xff
 80046ea:	40a0      	lsls	r0, r4
 80046ec:	40a1      	lsls	r1, r4
 80046ee:	ea22 0200 	bic.w	r2, r2, r0
 80046f2:	430a      	orrs	r2, r1
 80046f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80046f6:	e74f      	b.n	8004598 <HAL_DAC_ConfigChannel+0x28>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80046f8:	f000 fd38 	bl	800516c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80046fc:	4b0c      	ldr	r3, [pc, #48]	; (8004730 <HAL_DAC_ConfigChannel+0x1c0>)
 80046fe:	4298      	cmp	r0, r3
 8004700:	d90e      	bls.n	8004720 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8004702:	6833      	ldr	r3, [r6, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004704:	f448 4800 	orr.w	r8, r8, #32768	; 0x8000
 8004708:	e784      	b.n	8004614 <HAL_DAC_ConfigChannel+0xa4>
  __HAL_LOCK(hdac);
 800470a:	2002      	movs	r0, #2
}
 800470c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004710:	6933      	ldr	r3, [r6, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004712:	2203      	movs	r2, #3
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004714:	f043 0308 	orr.w	r3, r3, #8
 8004718:	6133      	str	r3, [r6, #16]
          return HAL_TIMEOUT;
 800471a:	4610      	mov	r0, r2
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800471c:	7132      	strb	r2, [r6, #4]
          return HAL_TIMEOUT;
 800471e:	e7ac      	b.n	800467a <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <HAL_DAC_ConfigChannel+0x1c4>)
 8004722:	4298      	cmp	r0, r3
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004724:	bf88      	it	hi
 8004726:	f448 4880 	orrhi.w	r8, r8, #16384	; 0x4000
  hdac->Instance->MCR = tmpreg1;
 800472a:	6833      	ldr	r3, [r6, #0]
 800472c:	e772      	b.n	8004614 <HAL_DAC_ConfigChannel+0xa4>
 800472e:	bf00      	nop
 8004730:	09896800 	.word	0x09896800
 8004734:	04c4b400 	.word	0x04c4b400

08004738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800473c:	680c      	ldr	r4, [r1, #0]
{
 800473e:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004740:	2c00      	cmp	r4, #0
 8004742:	f000 8083 	beq.w	800484c <HAL_GPIO_Init+0x114>
 8004746:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800474a:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 8004924 <HAL_GPIO_Init+0x1ec>
  uint32_t position = 0x00U;
 800474e:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004750:	f04f 0b01 	mov.w	fp, #1

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004754:	4689      	mov	r9, r1
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004756:	fa0b f503 	lsl.w	r5, fp, r3
    if (iocurrent != 0x00u)
 800475a:	ea15 0804 	ands.w	r8, r5, r4
 800475e:	d06f      	beq.n	8004840 <HAL_GPIO_Init+0x108>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004760:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8004764:	f007 0203 	and.w	r2, r7, #3
 8004768:	1e51      	subs	r1, r2, #1
 800476a:	2901      	cmp	r1, #1
 800476c:	d971      	bls.n	8004852 <HAL_GPIO_Init+0x11a>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476e:	2a03      	cmp	r2, #3
 8004770:	f040 80b0 	bne.w	80048d4 <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004774:	fa02 f20c 	lsl.w	r2, r2, ip
 8004778:	43d1      	mvns	r1, r2
      temp = GPIOx->MODER;
 800477a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800477c:	4029      	ands	r1, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800477e:	430a      	orrs	r2, r1
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004780:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004784:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004786:	d05b      	beq.n	8004840 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004788:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	f8ca 2060 	str.w	r2, [sl, #96]	; 0x60
 8004794:	f8da 2060 	ldr.w	r2, [sl, #96]	; 0x60
 8004798:	f002 0201 	and.w	r2, r2, #1
 800479c:	9203      	str	r2, [sp, #12]
 800479e:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80047a0:	f023 0203 	bic.w	r2, r3, #3
 80047a4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80047a8:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047ac:	f003 0503 	and.w	r5, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80047b0:	6891      	ldr	r1, [r2, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047b2:	00ad      	lsls	r5, r5, #2
 80047b4:	260f      	movs	r6, #15
 80047b6:	fa06 fe05 	lsl.w	lr, r6, r5
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047ba:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80047be:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80047c2:	d019      	beq.n	80047f8 <HAL_GPIO_Init+0xc0>
 80047c4:	4e51      	ldr	r6, [pc, #324]	; (800490c <HAL_GPIO_Init+0x1d4>)
 80047c6:	42b0      	cmp	r0, r6
 80047c8:	f000 808f 	beq.w	80048ea <HAL_GPIO_Init+0x1b2>
 80047cc:	4e50      	ldr	r6, [pc, #320]	; (8004910 <HAL_GPIO_Init+0x1d8>)
 80047ce:	42b0      	cmp	r0, r6
 80047d0:	f000 808f 	beq.w	80048f2 <HAL_GPIO_Init+0x1ba>
 80047d4:	4e4f      	ldr	r6, [pc, #316]	; (8004914 <HAL_GPIO_Init+0x1dc>)
 80047d6:	42b0      	cmp	r0, r6
 80047d8:	f000 8081 	beq.w	80048de <HAL_GPIO_Init+0x1a6>
 80047dc:	4e4e      	ldr	r6, [pc, #312]	; (8004918 <HAL_GPIO_Init+0x1e0>)
 80047de:	42b0      	cmp	r0, r6
 80047e0:	f000 808d 	beq.w	80048fe <HAL_GPIO_Init+0x1c6>
 80047e4:	4e4d      	ldr	r6, [pc, #308]	; (800491c <HAL_GPIO_Init+0x1e4>)
 80047e6:	42b0      	cmp	r0, r6
 80047e8:	bf0c      	ite	eq
 80047ea:	f04f 0e05 	moveq.w	lr, #5
 80047ee:	f04f 0e06 	movne.w	lr, #6
 80047f2:	fa0e f505 	lsl.w	r5, lr, r5
 80047f6:	4329      	orrs	r1, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f8:	6091      	str	r1, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80047fa:	4a49      	ldr	r2, [pc, #292]	; (8004920 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80047fc:	4948      	ldr	r1, [pc, #288]	; (8004920 <HAL_GPIO_Init+0x1e8>)
        temp = EXTI->RTSR1;
 80047fe:	6892      	ldr	r2, [r2, #8]
        temp &= ~(iocurrent);
 8004800:	ea6f 0508 	mvn.w	r5, r8
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004804:	02fe      	lsls	r6, r7, #11
        temp &= ~(iocurrent);
 8004806:	bf54      	ite	pl
 8004808:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800480a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->RTSR1 = temp;
 800480e:	608a      	str	r2, [r1, #8]

        temp = EXTI->FTSR1;
 8004810:	68ca      	ldr	r2, [r1, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004812:	02b9      	lsls	r1, r7, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 8004814:	4942      	ldr	r1, [pc, #264]	; (8004920 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8004816:	bf54      	ite	pl
 8004818:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800481a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->FTSR1 = temp;
 800481e:	60ca      	str	r2, [r1, #12]

        temp = EXTI->EMR1;
 8004820:	6849      	ldr	r1, [r1, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8004822:	4a3f      	ldr	r2, [pc, #252]	; (8004920 <HAL_GPIO_Init+0x1e8>)
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004824:	03be      	lsls	r6, r7, #14
        temp &= ~(iocurrent);
 8004826:	bf54      	ite	pl
 8004828:	4029      	andpl	r1, r5
          temp |= iocurrent;
 800482a:	ea48 0101 	orrmi.w	r1, r8, r1
        EXTI->EMR1 = temp;
 800482e:	6051      	str	r1, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004830:	6812      	ldr	r2, [r2, #0]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004832:	03f9      	lsls	r1, r7, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 8004834:	493a      	ldr	r1, [pc, #232]	; (8004920 <HAL_GPIO_Init+0x1e8>)
        temp &= ~(iocurrent);
 8004836:	bf54      	ite	pl
 8004838:	402a      	andpl	r2, r5
          temp |= iocurrent;
 800483a:	ea48 0202 	orrmi.w	r2, r8, r2
        EXTI->IMR1 = temp;
 800483e:	600a      	str	r2, [r1, #0]
      }
    }

    position++;
 8004840:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004842:	fa34 f203 	lsrs.w	r2, r4, r3
 8004846:	f10c 0c02 	add.w	ip, ip, #2
 800484a:	d184      	bne.n	8004756 <HAL_GPIO_Init+0x1e>
  }
}
 800484c:	b005      	add	sp, #20
 800484e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004852:	6881      	ldr	r1, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004854:	f8d9 600c 	ldr.w	r6, [r9, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004858:	f04f 0e03 	mov.w	lr, #3
 800485c:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004860:	ea21 010e 	bic.w	r1, r1, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004864:	fa06 f60c 	lsl.w	r6, r6, ip
 8004868:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 800486a:	6081      	str	r1, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800486c:	ea6f 010e 	mvn.w	r1, lr
        temp = GPIOx->OTYPER;
 8004870:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004874:	ea2e 0e05 	bic.w	lr, lr, r5
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004878:	f3c7 1500 	ubfx	r5, r7, #4, #1
 800487c:	409d      	lsls	r5, r3
 800487e:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->OTYPER = temp;
 8004882:	6045      	str	r5, [r0, #4]
        temp = GPIOx->PUPDR;
 8004884:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004886:	ea05 0e01 	and.w	lr, r5, r1
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800488a:	f8d9 5008 	ldr.w	r5, [r9, #8]
 800488e:	fa05 f50c 	lsl.w	r5, r5, ip
 8004892:	ea45 050e 	orr.w	r5, r5, lr
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004896:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 8004898:	60c5      	str	r5, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800489a:	fa02 f20c 	lsl.w	r2, r2, ip
 800489e:	f47f af6c 	bne.w	800477a <HAL_GPIO_Init+0x42>
        temp = GPIOx->AFR[position >> 3U];
 80048a2:	08dd      	lsrs	r5, r3, #3
 80048a4:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80048a8:	9501      	str	r5, [sp, #4]
 80048aa:	6a2e      	ldr	r6, [r5, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048ac:	f8d9 5010 	ldr.w	r5, [r9, #16]
        temp = GPIOx->AFR[position >> 3U];
 80048b0:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048b2:	f003 0e07 	and.w	lr, r3, #7
 80048b6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80048ba:	260f      	movs	r6, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048bc:	fa05 f50e 	lsl.w	r5, r5, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048c0:	fa06 fe0e 	lsl.w	lr, r6, lr
 80048c4:	9e00      	ldr	r6, [sp, #0]
 80048c6:	ea26 0e0e 	bic.w	lr, r6, lr
        GPIOx->AFR[position >> 3U] = temp;
 80048ca:	9e01      	ldr	r6, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048cc:	ea45 050e 	orr.w	r5, r5, lr
        GPIOx->AFR[position >> 3U] = temp;
 80048d0:	6235      	str	r5, [r6, #32]
 80048d2:	e752      	b.n	800477a <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048d4:	2103      	movs	r1, #3
 80048d6:	fa01 f10c 	lsl.w	r1, r1, ip
 80048da:	43c9      	mvns	r1, r1
 80048dc:	e7d2      	b.n	8004884 <HAL_GPIO_Init+0x14c>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80048de:	f04f 0e03 	mov.w	lr, #3
 80048e2:	fa0e f505 	lsl.w	r5, lr, r5
 80048e6:	4329      	orrs	r1, r5
 80048e8:	e786      	b.n	80047f8 <HAL_GPIO_Init+0xc0>
 80048ea:	fa0b f505 	lsl.w	r5, fp, r5
 80048ee:	4329      	orrs	r1, r5
 80048f0:	e782      	b.n	80047f8 <HAL_GPIO_Init+0xc0>
 80048f2:	f04f 0e02 	mov.w	lr, #2
 80048f6:	fa0e f505 	lsl.w	r5, lr, r5
 80048fa:	4329      	orrs	r1, r5
 80048fc:	e77c      	b.n	80047f8 <HAL_GPIO_Init+0xc0>
 80048fe:	f04f 0e04 	mov.w	lr, #4
 8004902:	fa0e f505 	lsl.w	r5, lr, r5
 8004906:	4329      	orrs	r1, r5
 8004908:	e776      	b.n	80047f8 <HAL_GPIO_Init+0xc0>
 800490a:	bf00      	nop
 800490c:	48000400 	.word	0x48000400
 8004910:	48000800 	.word	0x48000800
 8004914:	48000c00 	.word	0x48000c00
 8004918:	48001000 	.word	0x48001000
 800491c:	48001400 	.word	0x48001400
 8004920:	40010400 	.word	0x40010400
 8004924:	40021000 	.word	0x40021000

08004928 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004928:	b10a      	cbz	r2, 800492e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800492a:	6181      	str	r1, [r0, #24]
 800492c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800492e:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop

08004934 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004934:	b410      	push	{r4}
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004936:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004938:	b970      	cbnz	r0, 8004958 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800493a:	6813      	ldr	r3, [r2, #0]
 800493c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004944:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004948:	d023      	beq.n	8004992 <HAL_PWREx_ControlVoltageScaling+0x5e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800494a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 800494e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004952:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004956:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004958:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800495c:	d009      	beq.n	8004972 <HAL_PWREx_ControlVoltageScaling+0x3e>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800495e:	6813      	ldr	r3, [r2, #0]
}
 8004960:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004964:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  return HAL_OK;
 800496c:	2000      	movs	r0, #0
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800496e:	6013      	str	r3, [r2, #0]
}
 8004970:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004972:	6813      	ldr	r3, [r2, #0]
 8004974:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800497c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004980:	d02f      	beq.n	80049e2 <HAL_PWREx_ControlVoltageScaling+0xae>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004986:	2000      	movs	r0, #0
}
 8004988:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800498c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004990:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004996:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800499a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800499c:	4c22      	ldr	r4, [pc, #136]	; (8004a28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800499e:	4823      	ldr	r0, [pc, #140]	; (8004a2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049a0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80049a4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80049a8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	2132      	movs	r1, #50	; 0x32
 80049ae:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049b2:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049b4:	fba0 0303 	umull	r0, r3, r0, r3
 80049b8:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ba:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049bc:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049c0:	d506      	bpl.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80049c2:	e000      	b.n	80049c6 <HAL_PWREx_ControlVoltageScaling+0x92>
 80049c4:	b123      	cbz	r3, 80049d0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 80049c6:	6951      	ldr	r1, [r2, #20]
 80049c8:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80049ca:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80049ce:	d4f9      	bmi.n	80049c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80049d0:	4b14      	ldr	r3, [pc, #80]	; (8004a24 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	055c      	lsls	r4, r3, #21
  return HAL_OK;
 80049d6:	bf54      	ite	pl
 80049d8:	2000      	movpl	r0, #0
        return HAL_TIMEOUT;
 80049da:	2003      	movmi	r0, #3
}
 80049dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80049e0:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049ea:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049ec:	4c0e      	ldr	r4, [pc, #56]	; (8004a28 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80049ee:	480f      	ldr	r0, [pc, #60]	; (8004a2c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80049f0:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 80049f4:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80049f8:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80049fa:	6823      	ldr	r3, [r4, #0]
 80049fc:	2132      	movs	r1, #50	; 0x32
 80049fe:	fb01 f303 	mul.w	r3, r1, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a02:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a04:	fba0 0303 	umull	r0, r3, r0, r3
 8004a08:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a0a:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a0c:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a10:	d5de      	bpl.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004a12:	e001      	b.n	8004a18 <HAL_PWREx_ControlVoltageScaling+0xe4>
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d0db      	beq.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004a18:	6951      	ldr	r1, [r2, #20]
 8004a1a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004a1c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a20:	d5d6      	bpl.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x9c>
 8004a22:	e7f7      	b.n	8004a14 <HAL_PWREx_ControlVoltageScaling+0xe0>
 8004a24:	40007000 	.word	0x40007000
 8004a28:	20000680 	.word	0x20000680
 8004a2c:	431bde83 	.word	0x431bde83

08004a30 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004a30:	4a02      	ldr	r2, [pc, #8]	; (8004a3c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004a32:	6893      	ldr	r3, [r2, #8]
 8004a34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a38:	6093      	str	r3, [r2, #8]
}
 8004a3a:	4770      	bx	lr
 8004a3c:	40007000 	.word	0x40007000

08004a40 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a40:	2800      	cmp	r0, #0
 8004a42:	f000 81c3 	beq.w	8004dcc <HAL_RCC_OscConfig+0x38c>
{
 8004a46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a4a:	6803      	ldr	r3, [r0, #0]
 8004a4c:	07d9      	lsls	r1, r3, #31
{
 8004a4e:	b082      	sub	sp, #8
 8004a50:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a52:	d52d      	bpl.n	8004ab0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a54:	49a6      	ldr	r1, [pc, #664]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004a56:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a58:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a5a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a5e:	2a0c      	cmp	r2, #12
 8004a60:	f000 810a 	beq.w	8004c78 <HAL_RCC_OscConfig+0x238>
 8004a64:	2a08      	cmp	r2, #8
 8004a66:	f000 810c 	beq.w	8004c82 <HAL_RCC_OscConfig+0x242>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a6a:	6863      	ldr	r3, [r4, #4]
 8004a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a70:	f000 8133 	beq.w	8004cda <HAL_RCC_OscConfig+0x29a>
 8004a74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a78:	f000 819b 	beq.w	8004db2 <HAL_RCC_OscConfig+0x372>
 8004a7c:	4d9c      	ldr	r5, [pc, #624]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004a7e:	682a      	ldr	r2, [r5, #0]
 8004a80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004a84:	602a      	str	r2, [r5, #0]
 8004a86:	682a      	ldr	r2, [r5, #0]
 8004a88:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004a8c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	f040 8128 	bne.w	8004ce4 <HAL_RCC_OscConfig+0x2a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a94:	f7fe fdd6 	bl	8003644 <HAL_GetTick>
 8004a98:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004a9a:	e005      	b.n	8004aa8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fe fdd2 	bl	8003644 <HAL_GetTick>
 8004aa0:	1b80      	subs	r0, r0, r6
 8004aa2:	2864      	cmp	r0, #100	; 0x64
 8004aa4:	f200 8142 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aa8:	682b      	ldr	r3, [r5, #0]
 8004aaa:	039f      	lsls	r7, r3, #14
 8004aac:	d4f6      	bmi.n	8004a9c <HAL_RCC_OscConfig+0x5c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004aae:	6823      	ldr	r3, [r4, #0]
 8004ab0:	079e      	lsls	r6, r3, #30
 8004ab2:	d528      	bpl.n	8004b06 <HAL_RCC_OscConfig+0xc6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ab4:	4a8e      	ldr	r2, [pc, #568]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004ab6:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ab8:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004aba:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	f000 80ec 	beq.w	8004c9c <HAL_RCC_OscConfig+0x25c>
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	f000 80ee 	beq.w	8004ca6 <HAL_RCC_OscConfig+0x266>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004aca:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004acc:	4d88      	ldr	r5, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 811d 	beq.w	8004d0e <HAL_RCC_OscConfig+0x2ce>
        __HAL_RCC_HSI_ENABLE();
 8004ad4:	682b      	ldr	r3, [r5, #0]
 8004ad6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ada:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004adc:	f7fe fdb2 	bl	8003644 <HAL_GetTick>
 8004ae0:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ae2:	e005      	b.n	8004af0 <HAL_RCC_OscConfig+0xb0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ae4:	f7fe fdae 	bl	8003644 <HAL_GetTick>
 8004ae8:	1b80      	subs	r0, r0, r6
 8004aea:	2802      	cmp	r0, #2
 8004aec:	f200 811e 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af0:	682b      	ldr	r3, [r5, #0]
 8004af2:	0558      	lsls	r0, r3, #21
 8004af4:	d5f6      	bpl.n	8004ae4 <HAL_RCC_OscConfig+0xa4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004af6:	686b      	ldr	r3, [r5, #4]
 8004af8:	6922      	ldr	r2, [r4, #16]
 8004afa:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004afe:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004b02:	606b      	str	r3, [r5, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b04:	6823      	ldr	r3, [r4, #0]
 8004b06:	071a      	lsls	r2, r3, #28
 8004b08:	d519      	bpl.n	8004b3e <HAL_RCC_OscConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0a:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b0c:	4d78      	ldr	r5, [pc, #480]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 809e 	beq.w	8004c50 <HAL_RCC_OscConfig+0x210>
      __HAL_RCC_LSI_ENABLE();
 8004b14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b18:	f043 0301 	orr.w	r3, r3, #1
 8004b1c:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b20:	f7fe fd90 	bl	8003644 <HAL_GetTick>
 8004b24:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b26:	e005      	b.n	8004b34 <HAL_RCC_OscConfig+0xf4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b28:	f7fe fd8c 	bl	8003644 <HAL_GetTick>
 8004b2c:	1b80      	subs	r0, r0, r6
 8004b2e:	2802      	cmp	r0, #2
 8004b30:	f200 80fc 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b34:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004b38:	079f      	lsls	r7, r3, #30
 8004b3a:	d5f5      	bpl.n	8004b28 <HAL_RCC_OscConfig+0xe8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b3c:	6823      	ldr	r3, [r4, #0]
 8004b3e:	0759      	lsls	r1, r3, #29
 8004b40:	d541      	bpl.n	8004bc6 <HAL_RCC_OscConfig+0x186>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b42:	4b6b      	ldr	r3, [pc, #428]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004b44:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b46:	00d2      	lsls	r2, r2, #3
 8004b48:	f100 80f4 	bmi.w	8004d34 <HAL_RCC_OscConfig+0x2f4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b52:	659a      	str	r2, [r3, #88]	; 0x58
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5a:	9301      	str	r3, [sp, #4]
 8004b5c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004b5e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4e64      	ldr	r6, [pc, #400]	; (8004cf4 <HAL_RCC_OscConfig+0x2b4>)
 8004b62:	6833      	ldr	r3, [r6, #0]
 8004b64:	05df      	lsls	r7, r3, #23
 8004b66:	f140 8113 	bpl.w	8004d90 <HAL_RCC_OscConfig+0x350>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6a:	68a3      	ldr	r3, [r4, #8]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	f000 80e3 	beq.w	8004d38 <HAL_RCC_OscConfig+0x2f8>
 8004b72:	2b05      	cmp	r3, #5
 8004b74:	f000 8169 	beq.w	8004e4a <HAL_RCC_OscConfig+0x40a>
 8004b78:	4e5d      	ldr	r6, [pc, #372]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004b7a:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8004b86:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8004b8a:	f022 0204 	bic.w	r2, r2, #4
 8004b8e:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 80d7 	bne.w	8004d46 <HAL_RCC_OscConfig+0x306>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b98:	f7fe fd54 	bl	8003644 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b9c:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004ba0:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ba2:	e005      	b.n	8004bb0 <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ba4:	f7fe fd4e 	bl	8003644 <HAL_GetTick>
 8004ba8:	1bc0      	subs	r0, r0, r7
 8004baa:	4540      	cmp	r0, r8
 8004bac:	f200 80be 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004bb0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8004bb4:	079a      	lsls	r2, r3, #30
 8004bb6:	d4f5      	bmi.n	8004ba4 <HAL_RCC_OscConfig+0x164>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bb8:	b125      	cbz	r5, 8004bc4 <HAL_RCC_OscConfig+0x184>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bba:	4a4d      	ldr	r2, [pc, #308]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004bbc:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	069b      	lsls	r3, r3, #26
 8004bc8:	d518      	bpl.n	8004bfc <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bca:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004bcc:	4d48      	ldr	r5, [pc, #288]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80ca 	beq.w	8004d68 <HAL_RCC_OscConfig+0x328>
      __HAL_RCC_HSI48_ENABLE();
 8004bd4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004bd8:	f043 0301 	orr.w	r3, r3, #1
 8004bdc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be0:	f7fe fd30 	bl	8003644 <HAL_GetTick>
 8004be4:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004be6:	e005      	b.n	8004bf4 <HAL_RCC_OscConfig+0x1b4>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004be8:	f7fe fd2c 	bl	8003644 <HAL_GetTick>
 8004bec:	1b80      	subs	r0, r0, r6
 8004bee:	2802      	cmp	r0, #2
 8004bf0:	f200 809c 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004bf4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004bf8:	079f      	lsls	r7, r3, #30
 8004bfa:	d5f5      	bpl.n	8004be8 <HAL_RCC_OscConfig+0x1a8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bfc:	69e0      	ldr	r0, [r4, #28]
 8004bfe:	b318      	cbz	r0, 8004c48 <HAL_RCC_OscConfig+0x208>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c00:	4d3b      	ldr	r5, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004c02:	68ab      	ldr	r3, [r5, #8]
 8004c04:	f003 030c 	and.w	r3, r3, #12
 8004c08:	2b0c      	cmp	r3, #12
 8004c0a:	f000 812c 	beq.w	8004e66 <HAL_RCC_OscConfig+0x426>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c0e:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c10:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004c12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c16:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c18:	f000 80da 	beq.w	8004dd0 <HAL_RCC_OscConfig+0x390>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004c1c:	68eb      	ldr	r3, [r5, #12]
 8004c1e:	f023 0303 	bic.w	r3, r3, #3
 8004c22:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004c24:	68eb      	ldr	r3, [r5, #12]
 8004c26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c2e:	60eb      	str	r3, [r5, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fe fd08 	bl	8003644 <HAL_GetTick>
 8004c34:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c36:	e004      	b.n	8004c42 <HAL_RCC_OscConfig+0x202>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c38:	f7fe fd04 	bl	8003644 <HAL_GetTick>
 8004c3c:	1b00      	subs	r0, r0, r4
 8004c3e:	2802      	cmp	r0, #2
 8004c40:	d874      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c42:	682b      	ldr	r3, [r5, #0]
 8004c44:	019b      	lsls	r3, r3, #6
 8004c46:	d4f7      	bmi.n	8004c38 <HAL_RCC_OscConfig+0x1f8>
      }
    }
  }
  }

  return HAL_OK;
 8004c48:	2000      	movs	r0, #0
}
 8004c4a:	b002      	add	sp, #8
 8004c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004c50:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004c5c:	f7fe fcf2 	bl	8003644 <HAL_GetTick>
 8004c60:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c62:	e004      	b.n	8004c6e <HAL_RCC_OscConfig+0x22e>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c64:	f7fe fcee 	bl	8003644 <HAL_GetTick>
 8004c68:	1b80      	subs	r0, r0, r6
 8004c6a:	2802      	cmp	r0, #2
 8004c6c:	d85e      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c6e:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004c72:	0798      	lsls	r0, r3, #30
 8004c74:	d4f6      	bmi.n	8004c64 <HAL_RCC_OscConfig+0x224>
 8004c76:	e761      	b.n	8004b3c <HAL_RCC_OscConfig+0xfc>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c78:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c7c:	2903      	cmp	r1, #3
 8004c7e:	f47f aef4 	bne.w	8004a6a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004c84:	6812      	ldr	r2, [r2, #0]
 8004c86:	0392      	lsls	r2, r2, #14
 8004c88:	f57f af12 	bpl.w	8004ab0 <HAL_RCC_OscConfig+0x70>
 8004c8c:	6862      	ldr	r2, [r4, #4]
 8004c8e:	2a00      	cmp	r2, #0
 8004c90:	f47f af0e 	bne.w	8004ab0 <HAL_RCC_OscConfig+0x70>
        return HAL_ERROR;
 8004c94:	2001      	movs	r0, #1
}
 8004c96:	b002      	add	sp, #8
 8004c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c9c:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ca0:	2a02      	cmp	r2, #2
 8004ca2:	f47f af12 	bne.w	8004aca <HAL_RCC_OscConfig+0x8a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ca6:	4b12      	ldr	r3, [pc, #72]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	055d      	lsls	r5, r3, #21
 8004cac:	d502      	bpl.n	8004cb4 <HAL_RCC_OscConfig+0x274>
 8004cae:	68e3      	ldr	r3, [r4, #12]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0ef      	beq.n	8004c94 <HAL_RCC_OscConfig+0x254>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cb4:	4a0e      	ldr	r2, [pc, #56]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004cb6:	6920      	ldr	r0, [r4, #16]
 8004cb8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cba:	490f      	ldr	r1, [pc, #60]	; (8004cf8 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cbc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004cc0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004cc4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004cc6:	6808      	ldr	r0, [r1, #0]
 8004cc8:	f7fe fc7a 	bl	80035c0 <HAL_InitTick>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	d1e1      	bne.n	8004c94 <HAL_RCC_OscConfig+0x254>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cd0:	6823      	ldr	r3, [r4, #0]
 8004cd2:	071a      	lsls	r2, r3, #28
 8004cd4:	f57f af33 	bpl.w	8004b3e <HAL_RCC_OscConfig+0xfe>
 8004cd8:	e717      	b.n	8004b0a <HAL_RCC_OscConfig+0xca>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004cda:	4a05      	ldr	r2, [pc, #20]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
 8004cdc:	6813      	ldr	r3, [r2, #0]
 8004cde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ce2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ce4:	f7fe fcae 	bl	8003644 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ce8:	4e01      	ldr	r6, [pc, #4]	; (8004cf0 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8004cea:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004cec:	e00b      	b.n	8004d06 <HAL_RCC_OscConfig+0x2c6>
 8004cee:	bf00      	nop
 8004cf0:	40021000 	.word	0x40021000
 8004cf4:	40007000 	.word	0x40007000
 8004cf8:	20000688 	.word	0x20000688
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fe fca2 	bl	8003644 <HAL_GetTick>
 8004d00:	1b40      	subs	r0, r0, r5
 8004d02:	2864      	cmp	r0, #100	; 0x64
 8004d04:	d812      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d06:	6833      	ldr	r3, [r6, #0]
 8004d08:	039b      	lsls	r3, r3, #14
 8004d0a:	d5f7      	bpl.n	8004cfc <HAL_RCC_OscConfig+0x2bc>
 8004d0c:	e6cf      	b.n	8004aae <HAL_RCC_OscConfig+0x6e>
        __HAL_RCC_HSI_DISABLE();
 8004d0e:	682b      	ldr	r3, [r5, #0]
 8004d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d14:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d16:	f7fe fc95 	bl	8003644 <HAL_GetTick>
 8004d1a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d1c:	682b      	ldr	r3, [r5, #0]
 8004d1e:	0559      	lsls	r1, r3, #21
 8004d20:	d5d6      	bpl.n	8004cd0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d22:	f7fe fc8f 	bl	8003644 <HAL_GetTick>
 8004d26:	1b80      	subs	r0, r0, r6
 8004d28:	2802      	cmp	r0, #2
 8004d2a:	d9f7      	bls.n	8004d1c <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8004d2c:	2003      	movs	r0, #3
}
 8004d2e:	b002      	add	sp, #8
 8004d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8004d34:	2500      	movs	r5, #0
 8004d36:	e713      	b.n	8004b60 <HAL_RCC_OscConfig+0x120>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d38:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_RCC_OscConfig+0x490>)
 8004d3a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004d3e:	f043 0301 	orr.w	r3, r3, #1
 8004d42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004d46:	f7fe fc7d 	bl	8003644 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	4f61      	ldr	r7, [pc, #388]	; (8004ed0 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8004d4c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4e:	f241 3888 	movw	r8, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d52:	e004      	b.n	8004d5e <HAL_RCC_OscConfig+0x31e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d54:	f7fe fc76 	bl	8003644 <HAL_GetTick>
 8004d58:	1b80      	subs	r0, r0, r6
 8004d5a:	4540      	cmp	r0, r8
 8004d5c:	d8e6      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004d62:	0799      	lsls	r1, r3, #30
 8004d64:	d5f6      	bpl.n	8004d54 <HAL_RCC_OscConfig+0x314>
 8004d66:	e727      	b.n	8004bb8 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSI48_DISABLE();
 8004d68:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d6c:	f023 0301 	bic.w	r3, r3, #1
 8004d70:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004d74:	f7fe fc66 	bl	8003644 <HAL_GetTick>
 8004d78:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d7a:	e004      	b.n	8004d86 <HAL_RCC_OscConfig+0x346>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d7c:	f7fe fc62 	bl	8003644 <HAL_GetTick>
 8004d80:	1b80      	subs	r0, r0, r6
 8004d82:	2802      	cmp	r0, #2
 8004d84:	d8d2      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004d86:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004d8a:	0798      	lsls	r0, r3, #30
 8004d8c:	d4f6      	bmi.n	8004d7c <HAL_RCC_OscConfig+0x33c>
 8004d8e:	e735      	b.n	8004bfc <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004d90:	6833      	ldr	r3, [r6, #0]
 8004d92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d96:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004d98:	f7fe fc54 	bl	8003644 <HAL_GetTick>
 8004d9c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d9e:	6833      	ldr	r3, [r6, #0]
 8004da0:	05d8      	lsls	r0, r3, #23
 8004da2:	f53f aee2 	bmi.w	8004b6a <HAL_RCC_OscConfig+0x12a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da6:	f7fe fc4d 	bl	8003644 <HAL_GetTick>
 8004daa:	1bc0      	subs	r0, r0, r7
 8004dac:	2802      	cmp	r0, #2
 8004dae:	d9f6      	bls.n	8004d9e <HAL_RCC_OscConfig+0x35e>
 8004db0:	e7bc      	b.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004db2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004db6:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004dc0:	601a      	str	r2, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004dc8:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dca:	e78b      	b.n	8004ce4 <HAL_RCC_OscConfig+0x2a4>
    return HAL_ERROR;
 8004dcc:	2001      	movs	r0, #1
}
 8004dce:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004dd0:	f7fe fc38 	bl	8003644 <HAL_GetTick>
 8004dd4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004dd6:	e004      	b.n	8004de2 <HAL_RCC_OscConfig+0x3a2>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dd8:	f7fe fc34 	bl	8003644 <HAL_GetTick>
 8004ddc:	1b80      	subs	r0, r0, r6
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d8a4      	bhi.n	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004de2:	682b      	ldr	r3, [r5, #0]
 8004de4:	0199      	lsls	r1, r3, #6
 8004de6:	d4f7      	bmi.n	8004dd8 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004de8:	68e9      	ldr	r1, [r5, #12]
 8004dea:	4b3a      	ldr	r3, [pc, #232]	; (8004ed4 <HAL_RCC_OscConfig+0x494>)
 8004dec:	6a22      	ldr	r2, [r4, #32]
 8004dee:	6a60      	ldr	r0, [r4, #36]	; 0x24
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df0:	4e37      	ldr	r6, [pc, #220]	; (8004ed0 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004df2:	400b      	ands	r3, r1
 8004df4:	4313      	orrs	r3, r2
 8004df6:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	; 0x28
 8004dfa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8004dfe:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8004e02:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004e06:	3801      	subs	r0, #1
 8004e08:	0849      	lsrs	r1, r1, #1
 8004e0a:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004e0e:	3901      	subs	r1, #1
 8004e10:	0852      	lsrs	r2, r2, #1
 8004e12:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004e16:	3a01      	subs	r2, #1
 8004e18:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004e1c:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004e1e:	682b      	ldr	r3, [r5, #0]
 8004e20:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e24:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004e26:	68eb      	ldr	r3, [r5, #12]
 8004e28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004e2c:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004e2e:	f7fe fc09 	bl	8003644 <HAL_GetTick>
 8004e32:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e34:	e005      	b.n	8004e42 <HAL_RCC_OscConfig+0x402>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e36:	f7fe fc05 	bl	8003644 <HAL_GetTick>
 8004e3a:	1b00      	subs	r0, r0, r4
 8004e3c:	2802      	cmp	r0, #2
 8004e3e:	f63f af75 	bhi.w	8004d2c <HAL_RCC_OscConfig+0x2ec>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004e42:	6833      	ldr	r3, [r6, #0]
 8004e44:	019a      	lsls	r2, r3, #6
 8004e46:	d5f6      	bpl.n	8004e36 <HAL_RCC_OscConfig+0x3f6>
 8004e48:	e6fe      	b.n	8004c48 <HAL_RCC_OscConfig+0x208>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e4a:	4b21      	ldr	r3, [pc, #132]	; (8004ed0 <HAL_RCC_OscConfig+0x490>)
 8004e4c:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e50:	f042 0204 	orr.w	r2, r2, #4
 8004e54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004e58:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004e5c:	f042 0201 	orr.w	r2, r2, #1
 8004e60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e64:	e76f      	b.n	8004d46 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e66:	2801      	cmp	r0, #1
 8004e68:	f43f aeef 	beq.w	8004c4a <HAL_RCC_OscConfig+0x20a>
      temp_pllckcfg = RCC->PLLCFGR;
 8004e6c:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	6a22      	ldr	r2, [r4, #32]
 8004e70:	f003 0103 	and.w	r1, r3, #3
 8004e74:	4291      	cmp	r1, r2
 8004e76:	f47f af0d 	bne.w	8004c94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e7a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004e7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004e80:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e82:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004e86:	f47f af05 	bne.w	8004c94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e8a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004e8c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004e90:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004e94:	f47f aefe 	bne.w	8004c94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004e98:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004e9a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e9e:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004ea2:	f47f aef7 	bne.w	8004c94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ea6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004ea8:	0852      	lsrs	r2, r2, #1
 8004eaa:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8004eae:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004eb0:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004eb4:	f47f aeee 	bne.w	8004c94 <HAL_RCC_OscConfig+0x254>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004eb8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004eba:	0852      	lsrs	r2, r2, #1
 8004ebc:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8004ec0:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ec2:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
        return HAL_ERROR;
 8004ec6:	bf14      	ite	ne
 8004ec8:	2001      	movne	r0, #1
 8004eca:	2000      	moveq	r0, #0
 8004ecc:	e6bd      	b.n	8004c4a <HAL_RCC_OscConfig+0x20a>
 8004ece:	bf00      	nop
 8004ed0:	40021000 	.word	0x40021000
 8004ed4:	019f800c 	.word	0x019f800c

08004ed8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ed8:	4b18      	ldr	r3, [pc, #96]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x64>)
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	f002 020c 	and.w	r2, r2, #12
 8004ee0:	2a04      	cmp	r2, #4
 8004ee2:	d027      	beq.n	8004f34 <HAL_RCC_GetSysClockFreq+0x5c>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	f002 020c 	and.w	r2, r2, #12
 8004eea:	2a08      	cmp	r2, #8
 8004eec:	d024      	beq.n	8004f38 <HAL_RCC_GetSysClockFreq+0x60>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004eee:	689a      	ldr	r2, [r3, #8]
 8004ef0:	f002 020c 	and.w	r2, r2, #12
 8004ef4:	2a0c      	cmp	r2, #12
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8004ef8:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8004efa:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004efc:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004efe:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f00:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8004f04:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f06:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8004f0a:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f0e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f10:	bf0c      	ite	eq
 8004f12:	4b0b      	ldreq	r3, [pc, #44]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f14:	4b0b      	ldrne	r3, [pc, #44]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004f16:	fbb3 f2f2 	udiv	r2, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f1a:	4b08      	ldr	r3, [pc, #32]	; (8004f3c <HAL_RCC_GetSysClockFreq+0x64>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f3c3 6341 	ubfx	r3, r3, #25, #2
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f22:	f3c0 2006 	ubfx	r0, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f26:	3301      	adds	r3, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004f28:	fb02 f000 	mul.w	r0, r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f2c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8004f2e:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8004f32:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8004f34:	4803      	ldr	r0, [pc, #12]	; (8004f44 <HAL_RCC_GetSysClockFreq+0x6c>)
 8004f36:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8004f38:	4801      	ldr	r0, [pc, #4]	; (8004f40 <HAL_RCC_GetSysClockFreq+0x68>)
 8004f3a:	4770      	bx	lr
 8004f3c:	40021000 	.word	0x40021000
 8004f40:	016e3600 	.word	0x016e3600
 8004f44:	00f42400 	.word	0x00f42400

08004f48 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8004f48:	2800      	cmp	r0, #0
 8004f4a:	f000 80ee 	beq.w	800512a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f4e:	4a7f      	ldr	r2, [pc, #508]	; (800514c <HAL_RCC_ClockConfig+0x204>)
{
 8004f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f54:	6813      	ldr	r3, [r2, #0]
 8004f56:	f003 030f 	and.w	r3, r3, #15
 8004f5a:	428b      	cmp	r3, r1
 8004f5c:	460d      	mov	r5, r1
 8004f5e:	4604      	mov	r4, r0
 8004f60:	d20c      	bcs.n	8004f7c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f62:	6813      	ldr	r3, [r2, #0]
 8004f64:	f023 030f 	bic.w	r3, r3, #15
 8004f68:	430b      	orrs	r3, r1
 8004f6a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f6c:	6813      	ldr	r3, [r2, #0]
 8004f6e:	f003 030f 	and.w	r3, r3, #15
 8004f72:	428b      	cmp	r3, r1
 8004f74:	d002      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8004f76:	2001      	movs	r0, #1
}
 8004f78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	07df      	lsls	r7, r3, #31
 8004f80:	d563      	bpl.n	800504a <HAL_RCC_ClockConfig+0x102>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f82:	6862      	ldr	r2, [r4, #4]
 8004f84:	2a03      	cmp	r2, #3
 8004f86:	f000 809a 	beq.w	80050be <HAL_RCC_ClockConfig+0x176>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f8a:	4b71      	ldr	r3, [pc, #452]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f8c:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f8e:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f90:	f000 8091 	beq.w	80050b6 <HAL_RCC_ClockConfig+0x16e>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f94:	055b      	lsls	r3, r3, #21
 8004f96:	d5ee      	bpl.n	8004f76 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004f98:	f7ff ff9e 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8004f9c:	4b6d      	ldr	r3, [pc, #436]	; (8005154 <HAL_RCC_ClockConfig+0x20c>)
 8004f9e:	4298      	cmp	r0, r3
 8004fa0:	f200 80c5 	bhi.w	800512e <HAL_RCC_ClockConfig+0x1e6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fa4:	6862      	ldr	r2, [r4, #4]
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004fa6:	f04f 0900 	mov.w	r9, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4e69      	ldr	r6, [pc, #420]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8004fac:	68b3      	ldr	r3, [r6, #8]
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	431a      	orrs	r2, r3
 8004fb4:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8004fb6:	f7fe fb45 	bl	8003644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fba:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004fbe:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc0:	e004      	b.n	8004fcc <HAL_RCC_ClockConfig+0x84>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc2:	f7fe fb3f 	bl	8003644 <HAL_GetTick>
 8004fc6:	1bc0      	subs	r0, r0, r7
 8004fc8:	4540      	cmp	r0, r8
 8004fca:	d871      	bhi.n	80050b0 <HAL_RCC_ClockConfig+0x168>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fcc:	68b3      	ldr	r3, [r6, #8]
 8004fce:	6862      	ldr	r2, [r4, #4]
 8004fd0:	f003 030c 	and.w	r3, r3, #12
 8004fd4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004fd8:	d1f3      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0x7a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	079f      	lsls	r7, r3, #30
 8004fde:	d436      	bmi.n	800504e <HAL_RCC_ClockConfig+0x106>
    if(hpre == RCC_SYSCLK_DIV2)
 8004fe0:	f1b9 0f80 	cmp.w	r9, #128	; 0x80
 8004fe4:	d103      	bne.n	8004fee <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004fe6:	68b3      	ldr	r3, [r6, #8]
 8004fe8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fec:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fee:	4e57      	ldr	r6, [pc, #348]	; (800514c <HAL_RCC_ClockConfig+0x204>)
 8004ff0:	6833      	ldr	r3, [r6, #0]
 8004ff2:	f003 030f 	and.w	r3, r3, #15
 8004ff6:	42ab      	cmp	r3, r5
 8004ff8:	d846      	bhi.n	8005088 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ffa:	6823      	ldr	r3, [r4, #0]
 8004ffc:	075a      	lsls	r2, r3, #29
 8004ffe:	d506      	bpl.n	800500e <HAL_RCC_ClockConfig+0xc6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005000:	4953      	ldr	r1, [pc, #332]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005002:	68e0      	ldr	r0, [r4, #12]
 8005004:	688a      	ldr	r2, [r1, #8]
 8005006:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800500a:	4302      	orrs	r2, r0
 800500c:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800500e:	071b      	lsls	r3, r3, #28
 8005010:	d507      	bpl.n	8005022 <HAL_RCC_ClockConfig+0xda>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005012:	4a4f      	ldr	r2, [pc, #316]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005014:	6921      	ldr	r1, [r4, #16]
 8005016:	6893      	ldr	r3, [r2, #8]
 8005018:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800501c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005020:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005022:	f7ff ff59 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
 8005026:	4a4a      	ldr	r2, [pc, #296]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005028:	4c4b      	ldr	r4, [pc, #300]	; (8005158 <HAL_RCC_ClockConfig+0x210>)
 800502a:	6892      	ldr	r2, [r2, #8]
 800502c:	494b      	ldr	r1, [pc, #300]	; (800515c <HAL_RCC_ClockConfig+0x214>)
 800502e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005032:	4603      	mov	r3, r0
 8005034:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005036:	484a      	ldr	r0, [pc, #296]	; (8005160 <HAL_RCC_ClockConfig+0x218>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005038:	f002 021f 	and.w	r2, r2, #31
 800503c:	40d3      	lsrs	r3, r2
 800503e:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005040:	6800      	ldr	r0, [r0, #0]
}
 8005042:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005046:	f7fe babb 	b.w	80035c0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800504a:	079e      	lsls	r6, r3, #30
 800504c:	d5cf      	bpl.n	8004fee <HAL_RCC_ClockConfig+0xa6>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504e:	0758      	lsls	r0, r3, #29
 8005050:	d504      	bpl.n	800505c <HAL_RCC_ClockConfig+0x114>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005052:	493f      	ldr	r1, [pc, #252]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005054:	688a      	ldr	r2, [r1, #8]
 8005056:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800505a:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800505c:	0719      	lsls	r1, r3, #28
 800505e:	d506      	bpl.n	800506e <HAL_RCC_ClockConfig+0x126>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005060:	4a3b      	ldr	r2, [pc, #236]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005062:	6893      	ldr	r3, [r2, #8]
 8005064:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005068:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800506c:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506e:	4a38      	ldr	r2, [pc, #224]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005070:	68a1      	ldr	r1, [r4, #8]
 8005072:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005074:	4e35      	ldr	r6, [pc, #212]	; (800514c <HAL_RCC_ClockConfig+0x204>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005076:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800507a:	430b      	orrs	r3, r1
 800507c:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800507e:	6833      	ldr	r3, [r6, #0]
 8005080:	f003 030f 	and.w	r3, r3, #15
 8005084:	42ab      	cmp	r3, r5
 8005086:	d9b8      	bls.n	8004ffa <HAL_RCC_ClockConfig+0xb2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	f023 030f 	bic.w	r3, r3, #15
 800508e:	432b      	orrs	r3, r5
 8005090:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005092:	f7fe fad7 	bl	8003644 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005096:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800509a:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	42ab      	cmp	r3, r5
 80050a4:	d0a9      	beq.n	8004ffa <HAL_RCC_ClockConfig+0xb2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a6:	f7fe facd 	bl	8003644 <HAL_GetTick>
 80050aa:	1bc0      	subs	r0, r0, r7
 80050ac:	4540      	cmp	r0, r8
 80050ae:	d9f5      	bls.n	800509c <HAL_RCC_ClockConfig+0x154>
        return HAL_TIMEOUT;
 80050b0:	2003      	movs	r0, #3
}
 80050b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050b6:	039a      	lsls	r2, r3, #14
 80050b8:	f53f af6e 	bmi.w	8004f98 <HAL_RCC_ClockConfig+0x50>
 80050bc:	e75b      	b.n	8004f76 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4924      	ldr	r1, [pc, #144]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 80050c0:	6808      	ldr	r0, [r1, #0]
 80050c2:	0180      	lsls	r0, r0, #6
 80050c4:	f57f af57 	bpl.w	8004f76 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050c8:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050ca:	68c8      	ldr	r0, [r1, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050cc:	68c9      	ldr	r1, [r1, #12]
      if(pllfreq > 80000000U)
 80050ce:	4f21      	ldr	r7, [pc, #132]	; (8005154 <HAL_RCC_ClockConfig+0x20c>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050d0:	f006 0603 	and.w	r6, r6, #3
  switch (pllsource)
 80050d4:	2e03      	cmp	r6, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050d6:	f3c0 1003 	ubfx	r0, r0, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050da:	bf0c      	ite	eq
 80050dc:	4e21      	ldreq	r6, [pc, #132]	; (8005164 <HAL_RCC_ClockConfig+0x21c>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050de:	4e22      	ldrne	r6, [pc, #136]	; (8005168 <HAL_RCC_ClockConfig+0x220>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80050e0:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e2:	fbb6 f0f0 	udiv	r0, r6, r0
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050e6:	4e1a      	ldr	r6, [pc, #104]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80050e8:	f3c1 2106 	ubfx	r1, r1, #8, #7
 80050ec:	fb00 f101 	mul.w	r1, r0, r1
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80050f0:	68f0      	ldr	r0, [r6, #12]
 80050f2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80050f6:	3001      	adds	r0, #1
 80050f8:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80050fa:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80050fe:	42b9      	cmp	r1, r7
 8005100:	d920      	bls.n	8005144 <HAL_RCC_ClockConfig+0x1fc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005102:	68b1      	ldr	r1, [r6, #8]
 8005104:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 8005108:	d005      	beq.n	8005116 <HAL_RCC_ClockConfig+0x1ce>
 800510a:	f013 0902 	ands.w	r9, r3, #2
 800510e:	f43f af4c 	beq.w	8004faa <HAL_RCC_ClockConfig+0x62>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005112:	68a3      	ldr	r3, [r4, #8]
 8005114:	b9b3      	cbnz	r3, 8005144 <HAL_RCC_ClockConfig+0x1fc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005116:	490e      	ldr	r1, [pc, #56]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005118:	688b      	ldr	r3, [r1, #8]
 800511a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800511e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005122:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005124:	f04f 0980 	mov.w	r9, #128	; 0x80
 8005128:	e73f      	b.n	8004faa <HAL_RCC_ClockConfig+0x62>
    return HAL_ERROR;
 800512a:	2001      	movs	r0, #1
}
 800512c:	4770      	bx	lr
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800512e:	4a08      	ldr	r2, [pc, #32]	; (8005150 <HAL_RCC_ClockConfig+0x208>)
 8005130:	6893      	ldr	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005132:	f04f 0980 	mov.w	r9, #128	; 0x80
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	ea43 0309 	orr.w	r3, r3, r9
 800513e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005140:	6862      	ldr	r2, [r4, #4]
 8005142:	e732      	b.n	8004faa <HAL_RCC_ClockConfig+0x62>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005144:	f04f 0900 	mov.w	r9, #0
 8005148:	e72f      	b.n	8004faa <HAL_RCC_ClockConfig+0x62>
 800514a:	bf00      	nop
 800514c:	40022000 	.word	0x40022000
 8005150:	40021000 	.word	0x40021000
 8005154:	04c4b400 	.word	0x04c4b400
 8005158:	08008c38 	.word	0x08008c38
 800515c:	20000680 	.word	0x20000680
 8005160:	20000688 	.word	0x20000688
 8005164:	016e3600 	.word	0x016e3600
 8005168:	00f42400 	.word	0x00f42400

0800516c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800516c:	4b01      	ldr	r3, [pc, #4]	; (8005174 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800516e:	6818      	ldr	r0, [r3, #0]
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	20000680 	.word	0x20000680

08005178 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005178:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCC_GetPCLK1Freq+0x18>)
 800517a:	4a06      	ldr	r2, [pc, #24]	; (8005194 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800517c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800517e:	4906      	ldr	r1, [pc, #24]	; (8005198 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005180:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005184:	6808      	ldr	r0, [r1, #0]
 8005186:	5cd3      	ldrb	r3, [r2, r3]
 8005188:	f003 031f 	and.w	r3, r3, #31
}
 800518c:	40d8      	lsrs	r0, r3
 800518e:	4770      	bx	lr
 8005190:	40021000 	.word	0x40021000
 8005194:	08008c48 	.word	0x08008c48
 8005198:	20000680 	.word	0x20000680

0800519c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x18>)
 800519e:	4a06      	ldr	r2, [pc, #24]	; (80051b8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80051a0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80051a2:	4906      	ldr	r1, [pc, #24]	; (80051bc <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051a4:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80051a8:	6808      	ldr	r0, [r1, #0]
 80051aa:	5cd3      	ldrb	r3, [r2, r3]
 80051ac:	f003 031f 	and.w	r3, r3, #31
}
 80051b0:	40d8      	lsrs	r0, r3
 80051b2:	4770      	bx	lr
 80051b4:	40021000 	.word	0x40021000
 80051b8:	08008c48 	.word	0x08008c48
 80051bc:	20000680 	.word	0x20000680

080051c0 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80051c0:	4a02      	ldr	r2, [pc, #8]	; (80051cc <HAL_RCC_EnableCSS+0xc>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051c8:	6013      	str	r3, [r2, #0]
}
 80051ca:	4770      	bx	lr
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d4:	6803      	ldr	r3, [r0, #0]
{
 80051d6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d8:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80051dc:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051de:	d056      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051e0:	4b9f      	ldr	r3, [pc, #636]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80051e2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80051e4:	00d5      	lsls	r5, r2, #3
 80051e6:	f140 810c 	bpl.w	8005402 <HAL_RCCEx_PeriphCLKConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 80051ea:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051ec:	4d9d      	ldr	r5, [pc, #628]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80051ee:	682b      	ldr	r3, [r5, #0]
 80051f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051f6:	f7fe fa25 	bl	8003644 <HAL_GetTick>
 80051fa:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051fc:	e005      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051fe:	f7fe fa21 	bl	8003644 <HAL_GetTick>
 8005202:	1b83      	subs	r3, r0, r6
 8005204:	2b02      	cmp	r3, #2
 8005206:	f200 8107 	bhi.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x248>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800520a:	682b      	ldr	r3, [r5, #0]
 800520c:	05d8      	lsls	r0, r3, #23
 800520e:	d5f6      	bpl.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005210:	4d93      	ldr	r5, [pc, #588]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005212:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005216:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800521a:	d027      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800521c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800521e:	429a      	cmp	r2, r3
 8005220:	d025      	beq.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005222:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005226:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800523e:	f421 7340 	bic.w	r3, r1, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005242:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8005244:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005248:	f140 8108 	bpl.w	800545c <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524c:	f7fe f9fa 	bl	8003644 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005250:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005254:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005256:	e005      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x94>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fe f9f4 	bl	8003644 <HAL_GetTick>
 800525c:	1b80      	subs	r0, r0, r6
 800525e:	4540      	cmp	r0, r8
 8005260:	f200 80da 	bhi.w	8005418 <HAL_RCCEx_PeriphCLKConfig+0x248>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005264:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005268:	079b      	lsls	r3, r3, #30
 800526a:	d5f5      	bpl.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x88>
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800526c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800526e:	497c      	ldr	r1, [pc, #496]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005270:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005274:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800527e:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005280:	b127      	cbz	r7, 800528c <HAL_RCCEx_PeriphCLKConfig+0xbc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005282:	4a77      	ldr	r2, [pc, #476]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005284:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800528c:	6823      	ldr	r3, [r4, #0]
 800528e:	07de      	lsls	r6, r3, #31
 8005290:	d508      	bpl.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005292:	4973      	ldr	r1, [pc, #460]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005294:	6865      	ldr	r5, [r4, #4]
 8005296:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800529a:	f022 0203 	bic.w	r2, r2, #3
 800529e:	432a      	orrs	r2, r5
 80052a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052a4:	079d      	lsls	r5, r3, #30
 80052a6:	d508      	bpl.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052a8:	496d      	ldr	r1, [pc, #436]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80052aa:	68a5      	ldr	r5, [r4, #8]
 80052ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052b0:	f022 020c 	bic.w	r2, r2, #12
 80052b4:	432a      	orrs	r2, r5
 80052b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80052ba:	0759      	lsls	r1, r3, #29
 80052bc:	d508      	bpl.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80052be:	4968      	ldr	r1, [pc, #416]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80052c0:	68e5      	ldr	r5, [r4, #12]
 80052c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052c6:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80052ca:	432a      	orrs	r2, r5
 80052cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052d0:	071a      	lsls	r2, r3, #28
 80052d2:	d508      	bpl.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052d4:	4962      	ldr	r1, [pc, #392]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80052d6:	6925      	ldr	r5, [r4, #16]
 80052d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052dc:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80052e0:	432a      	orrs	r2, r5
 80052e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e6:	069f      	lsls	r7, r3, #26
 80052e8:	d508      	bpl.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052ea:	495d      	ldr	r1, [pc, #372]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80052ec:	6965      	ldr	r5, [r4, #20]
 80052ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80052f2:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80052f6:	432a      	orrs	r2, r5
 80052f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052fc:	065e      	lsls	r6, r3, #25
 80052fe:	d508      	bpl.n	8005312 <HAL_RCCEx_PeriphCLKConfig+0x142>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005300:	4957      	ldr	r1, [pc, #348]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005302:	69a5      	ldr	r5, [r4, #24]
 8005304:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005308:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800530c:	432a      	orrs	r2, r5
 800530e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005312:	061d      	lsls	r5, r3, #24
 8005314:	d508      	bpl.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x158>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005316:	4952      	ldr	r1, [pc, #328]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005318:	69e5      	ldr	r5, [r4, #28]
 800531a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800531e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005322:	432a      	orrs	r2, r5
 8005324:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005328:	05d9      	lsls	r1, r3, #23
 800532a:	d508      	bpl.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800532c:	494c      	ldr	r1, [pc, #304]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800532e:	6a25      	ldr	r5, [r4, #32]
 8005330:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005334:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005338:	432a      	orrs	r2, r5
 800533a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800533e:	059a      	lsls	r2, r3, #22
 8005340:	d508      	bpl.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x184>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005342:	4947      	ldr	r1, [pc, #284]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005344:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005346:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800534a:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800534e:	432a      	orrs	r2, r5
 8005350:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005354:	055f      	lsls	r7, r3, #21
 8005356:	d50b      	bpl.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005358:	4941      	ldr	r1, [pc, #260]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800535a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800535c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005360:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005364:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005366:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800536a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800536e:	d055      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x24c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005370:	051e      	lsls	r6, r3, #20
 8005372:	d50b      	bpl.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005374:	493a      	ldr	r1, [pc, #232]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005376:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005378:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800537c:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8005380:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005382:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005386:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800538a:	d04c      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800538c:	04dd      	lsls	r5, r3, #19
 800538e:	d50b      	bpl.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005390:	4933      	ldr	r1, [pc, #204]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005392:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005394:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005398:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800539c:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800539e:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80053a2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80053a6:	d043      	beq.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x260>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053a8:	0499      	lsls	r1, r3, #18
 80053aa:	d50b      	bpl.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053ac:	492c      	ldr	r1, [pc, #176]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80053ae:	6b65      	ldr	r5, [r4, #52]	; 0x34
 80053b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80053b4:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80053b8:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053ba:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053be:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053c2:	d03a      	beq.n	800543a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80053c4:	045a      	lsls	r2, r3, #17
 80053c6:	d50b      	bpl.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053c8:	4925      	ldr	r1, [pc, #148]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80053ca:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80053cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80053d0:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80053d4:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053d6:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053de:	d031      	beq.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x274>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80053e0:	041b      	lsls	r3, r3, #16
 80053e2:	d50b      	bpl.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053e4:	4a1e      	ldr	r2, [pc, #120]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80053e6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80053e8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80053ec:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80053f0:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053f2:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80053f6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80053fa:	d028      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  }

#endif /* QUADSPI */

  return status;
}
 80053fc:	b002      	add	sp, #8
 80053fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005402:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005404:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005408:	659a      	str	r2, [r3, #88]	; 0x58
 800540a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005414:	2701      	movs	r7, #1
 8005416:	e6e9      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x1c>
        ret = HAL_TIMEOUT;
 8005418:	2003      	movs	r0, #3
 800541a:	e731      	b.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800541c:	68ca      	ldr	r2, [r1, #12]
 800541e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005422:	60ca      	str	r2, [r1, #12]
 8005424:	e7a4      	b.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005426:	68ca      	ldr	r2, [r1, #12]
 8005428:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800542c:	60ca      	str	r2, [r1, #12]
 800542e:	e7ad      	b.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005430:	68ca      	ldr	r2, [r1, #12]
 8005432:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005436:	60ca      	str	r2, [r1, #12]
 8005438:	e7b6      	b.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800543a:	68ca      	ldr	r2, [r1, #12]
 800543c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005440:	60ca      	str	r2, [r1, #12]
 8005442:	e7bf      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005444:	68ca      	ldr	r2, [r1, #12]
 8005446:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800544a:	60ca      	str	r2, [r1, #12]
 800544c:	e7c8      	b.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x210>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800544e:	68d3      	ldr	r3, [r2, #12]
 8005450:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005454:	60d3      	str	r3, [r2, #12]
}
 8005456:	b002      	add	sp, #8
 8005458:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800545c:	4613      	mov	r3, r2
 800545e:	e706      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8005460:	40021000 	.word	0x40021000
 8005464:	40007000 	.word	0x40007000

08005468 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005468:	6a03      	ldr	r3, [r0, #32]
 800546a:	f023 0301 	bic.w	r3, r3, #1
 800546e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005470:	6a03      	ldr	r3, [r0, #32]
{
 8005472:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005474:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005476:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005478:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800547a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800547e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005482:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005484:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005486:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800548a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800548c:	4d13      	ldr	r5, [pc, #76]	; (80054dc <TIM_OC1_SetConfig+0x74>)
 800548e:	42a8      	cmp	r0, r5
 8005490:	d00f      	beq.n	80054b2 <TIM_OC1_SetConfig+0x4a>
 8005492:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005496:	42a8      	cmp	r0, r5
 8005498:	d00b      	beq.n	80054b2 <TIM_OC1_SetConfig+0x4a>
 800549a:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800549e:	42a8      	cmp	r0, r5
 80054a0:	d007      	beq.n	80054b2 <TIM_OC1_SetConfig+0x4a>
 80054a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054a6:	42a8      	cmp	r0, r5
 80054a8:	d003      	beq.n	80054b2 <TIM_OC1_SetConfig+0x4a>
 80054aa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80054ae:	42a8      	cmp	r0, r5
 80054b0:	d10d      	bne.n	80054ce <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054b2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80054b4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80054b8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054ba:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80054c2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80054c6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80054ca:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80054d0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80054d2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80054d4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80054d6:	6341      	str	r1, [r0, #52]	; 0x34
  TIMx->CCER = tmpccer;
 80054d8:	6203      	str	r3, [r0, #32]
}
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00

080054e0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80054e0:	6a03      	ldr	r3, [r0, #32]
 80054e2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054e6:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e8:	6a03      	ldr	r3, [r0, #32]
{
 80054ea:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054ec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80054f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80054f2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054f6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80054fa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80054fc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80054fe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005502:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005506:	4d15      	ldr	r5, [pc, #84]	; (800555c <TIM_OC3_SetConfig+0x7c>)
 8005508:	42a8      	cmp	r0, r5
 800550a:	d010      	beq.n	800552e <TIM_OC3_SetConfig+0x4e>
 800550c:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005510:	42a8      	cmp	r0, r5
 8005512:	d00c      	beq.n	800552e <TIM_OC3_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005514:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005518:	42a8      	cmp	r0, r5
 800551a:	d00f      	beq.n	800553c <TIM_OC3_SetConfig+0x5c>
 800551c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005520:	42a8      	cmp	r0, r5
 8005522:	d00b      	beq.n	800553c <TIM_OC3_SetConfig+0x5c>
 8005524:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005528:	42a8      	cmp	r0, r5
 800552a:	d10f      	bne.n	800554c <TIM_OC3_SetConfig+0x6c>
 800552c:	e006      	b.n	800553c <TIM_OC3_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800552e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005534:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005538:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800553c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005540:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005544:	ea46 0c05 	orr.w	ip, r6, r5
 8005548:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800554c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800554e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005550:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8005552:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8005554:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005556:	6203      	str	r3, [r0, #32]
}
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00

08005560 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005560:	6a03      	ldr	r3, [r0, #32]
 8005562:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005566:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005568:	6a03      	ldr	r3, [r0, #32]
{
 800556a:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800556e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005570:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005572:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005576:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800557a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005580:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005584:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005588:	4d14      	ldr	r5, [pc, #80]	; (80055dc <TIM_OC4_SetConfig+0x7c>)
 800558a:	42a8      	cmp	r0, r5
 800558c:	d010      	beq.n	80055b0 <TIM_OC4_SetConfig+0x50>
 800558e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005592:	42a8      	cmp	r0, r5
 8005594:	d00c      	beq.n	80055b0 <TIM_OC4_SetConfig+0x50>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005596:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800559a:	42a8      	cmp	r0, r5
 800559c:	d00f      	beq.n	80055be <TIM_OC4_SetConfig+0x5e>
 800559e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055a2:	42a8      	cmp	r0, r5
 80055a4:	d00b      	beq.n	80055be <TIM_OC4_SetConfig+0x5e>
 80055a6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80055aa:	42a8      	cmp	r0, r5
 80055ac:	d10f      	bne.n	80055ce <TIM_OC4_SetConfig+0x6e>
 80055ae:	e006      	b.n	80055be <TIM_OC4_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80055b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80055b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80055b6:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80055ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055be:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80055c2:	f424 4440 	bic.w	r4, r4, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055c6:	ea46 0c05 	orr.w	ip, r6, r5
 80055ca:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055ce:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80055d0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80055d2:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80055d4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80055d6:	6401      	str	r1, [r0, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80055d8:	6203      	str	r3, [r0, #32]
}
 80055da:	4770      	bx	lr
 80055dc:	40012c00 	.word	0x40012c00

080055e0 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 80055e0:	2800      	cmp	r0, #0
 80055e2:	f000 8081 	beq.w	80056e8 <HAL_TIM_Base_Init+0x108>
{
 80055e6:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80055e8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80055ec:	4604      	mov	r4, r0
 80055ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d06d      	beq.n	80056d2 <HAL_TIM_Base_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f6:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f8:	493c      	ldr	r1, [pc, #240]	; (80056ec <HAL_TIM_Base_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 80055fa:	2302      	movs	r3, #2
 80055fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005600:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005602:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005604:	d051      	beq.n	80056aa <HAL_TIM_Base_Init+0xca>
 8005606:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800560a:	d021      	beq.n	8005650 <HAL_TIM_Base_Init+0x70>
 800560c:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005610:	428a      	cmp	r2, r1
 8005612:	d01d      	beq.n	8005650 <HAL_TIM_Base_Init+0x70>
 8005614:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005618:	428a      	cmp	r2, r1
 800561a:	d019      	beq.n	8005650 <HAL_TIM_Base_Init+0x70>
 800561c:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005620:	428a      	cmp	r2, r1
 8005622:	d042      	beq.n	80056aa <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005624:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 8005628:	428a      	cmp	r2, r1
 800562a:	d057      	beq.n	80056dc <HAL_TIM_Base_Init+0xfc>
 800562c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005630:	428a      	cmp	r2, r1
 8005632:	d053      	beq.n	80056dc <HAL_TIM_Base_Init+0xfc>
 8005634:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005638:	428a      	cmp	r2, r1
 800563a:	d04f      	beq.n	80056dc <HAL_TIM_Base_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800563c:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800563e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005644:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005646:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005648:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800564a:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800564c:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800564e:	e010      	b.n	8005672 <HAL_TIM_Base_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005650:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005652:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005658:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800565a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800565e:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005660:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005662:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005666:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005668:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800566a:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800566c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005670:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005672:	2301      	movs	r3, #1
 8005674:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005676:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800567a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800567e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005682:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005686:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800568a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800568e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005692:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005696:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800569a:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800569e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80056a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80056a6:	2000      	movs	r0, #0
}
 80056a8:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80056aa:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056ac:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80056b2:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80056b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b8:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ba:	69a1      	ldr	r1, [r4, #24]
 80056bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056c0:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80056c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056c4:	68e3      	ldr	r3, [r4, #12]
 80056c6:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80056cc:	6963      	ldr	r3, [r4, #20]
 80056ce:	6313      	str	r3, [r2, #48]	; 0x30
 80056d0:	e7cf      	b.n	8005672 <HAL_TIM_Base_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80056d2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80056d6:	f7fd f8ab 	bl	8002830 <HAL_TIM_Base_MspInit>
 80056da:	e78c      	b.n	80055f6 <HAL_TIM_Base_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056dc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056de:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e4:	4303      	orrs	r3, r0
 80056e6:	e7e9      	b.n	80056bc <HAL_TIM_Base_Init+0xdc>
    return HAL_ERROR;
 80056e8:	2001      	movs	r0, #1
}
 80056ea:	4770      	bx	lr
 80056ec:	40012c00 	.word	0x40012c00

080056f0 <HAL_TIM_PWM_MspInit>:
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop

080056f4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80056f4:	2800      	cmp	r0, #0
 80056f6:	f000 8081 	beq.w	80057fc <HAL_TIM_PWM_Init+0x108>
{
 80056fa:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80056fc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005700:	4604      	mov	r4, r0
 8005702:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005706:	2b00      	cmp	r3, #0
 8005708:	d06d      	beq.n	80057e6 <HAL_TIM_PWM_Init+0xf2>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800570a:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800570c:	493c      	ldr	r1, [pc, #240]	; (8005800 <HAL_TIM_PWM_Init+0x10c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005714:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8005716:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005718:	d051      	beq.n	80057be <HAL_TIM_PWM_Init+0xca>
 800571a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800571e:	d021      	beq.n	8005764 <HAL_TIM_PWM_Init+0x70>
 8005720:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005724:	428a      	cmp	r2, r1
 8005726:	d01d      	beq.n	8005764 <HAL_TIM_PWM_Init+0x70>
 8005728:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800572c:	428a      	cmp	r2, r1
 800572e:	d019      	beq.n	8005764 <HAL_TIM_PWM_Init+0x70>
 8005730:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005734:	428a      	cmp	r2, r1
 8005736:	d042      	beq.n	80057be <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005738:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800573c:	428a      	cmp	r2, r1
 800573e:	d057      	beq.n	80057f0 <HAL_TIM_PWM_Init+0xfc>
 8005740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005744:	428a      	cmp	r2, r1
 8005746:	d053      	beq.n	80057f0 <HAL_TIM_PWM_Init+0xfc>
 8005748:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800574c:	428a      	cmp	r2, r1
 800574e:	d04f      	beq.n	80057f0 <HAL_TIM_PWM_Init+0xfc>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005750:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005752:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005758:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 800575a:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 800575c:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800575e:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005760:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005762:	e010      	b.n	8005786 <HAL_TIM_PWM_Init+0x92>
    tmpcr1 |= Structure->CounterMode;
 8005764:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005766:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005768:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800576c:	430b      	orrs	r3, r1
    tmpcr1 &= ~TIM_CR1_CKD;
 800576e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005772:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005774:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577a:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800577e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8005780:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005782:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005784:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005786:	2301      	movs	r3, #1
 8005788:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800578a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800578e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005792:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005796:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800579a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800579e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057ae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80057b2:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80057b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80057ba:	2000      	movs	r0, #0
}
 80057bc:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 80057be:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057c0:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80057c6:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 80057c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057cc:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057ce:	69a1      	ldr	r1, [r4, #24]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 80057d6:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057d8:	68e3      	ldr	r3, [r4, #12]
 80057da:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057dc:	6863      	ldr	r3, [r4, #4]
 80057de:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80057e0:	6963      	ldr	r3, [r4, #20]
 80057e2:	6313      	str	r3, [r2, #48]	; 0x30
 80057e4:	e7cf      	b.n	8005786 <HAL_TIM_PWM_Init+0x92>
    htim->Lock = HAL_UNLOCKED;
 80057e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80057ea:	f7ff ff81 	bl	80056f0 <HAL_TIM_PWM_MspInit>
 80057ee:	e78c      	b.n	800570a <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f0:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057f2:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 80057f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f8:	4303      	orrs	r3, r0
 80057fa:	e7e9      	b.n	80057d0 <HAL_TIM_PWM_Init+0xdc>
    return HAL_ERROR;
 80057fc:	2001      	movs	r0, #1
}
 80057fe:	4770      	bx	lr
 8005800:	40012c00 	.word	0x40012c00

08005804 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005804:	2800      	cmp	r0, #0
 8005806:	f000 8096 	beq.w	8005936 <HAL_TIM_Encoder_Init+0x132>
{
 800580a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800580c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005810:	460d      	mov	r5, r1
 8005812:	4604      	mov	r4, r0
 8005814:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8087 	beq.w	800592c <HAL_TIM_Encoder_Init+0x128>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800581e:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005820:	4946      	ldr	r1, [pc, #280]	; (800593c <HAL_TIM_Encoder_Init+0x138>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005822:	2202      	movs	r2, #2
 8005824:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005828:	689a      	ldr	r2, [r3, #8]
 800582a:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 800582e:	f022 0207 	bic.w	r2, r2, #7
 8005832:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005834:	428b      	cmp	r3, r1
  tmpcr1 = TIMx->CR1;
 8005836:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005838:	d064      	beq.n	8005904 <HAL_TIM_Encoder_Init+0x100>
 800583a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583e:	d018      	beq.n	8005872 <HAL_TIM_Encoder_Init+0x6e>
 8005840:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 8005844:	428b      	cmp	r3, r1
 8005846:	d014      	beq.n	8005872 <HAL_TIM_Encoder_Init+0x6e>
 8005848:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800584c:	428b      	cmp	r3, r1
 800584e:	d010      	beq.n	8005872 <HAL_TIM_Encoder_Init+0x6e>
 8005850:	f501 3196 	add.w	r1, r1, #76800	; 0x12c00
 8005854:	428b      	cmp	r3, r1
 8005856:	d055      	beq.n	8005904 <HAL_TIM_Encoder_Init+0x100>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005858:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800585c:	428b      	cmp	r3, r1
 800585e:	d055      	beq.n	800590c <HAL_TIM_Encoder_Init+0x108>
 8005860:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005864:	428b      	cmp	r3, r1
 8005866:	d051      	beq.n	800590c <HAL_TIM_Encoder_Init+0x108>
 8005868:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800586c:	428b      	cmp	r3, r1
 800586e:	d108      	bne.n	8005882 <HAL_TIM_Encoder_Init+0x7e>
 8005870:	e04c      	b.n	800590c <HAL_TIM_Encoder_Init+0x108>
    tmpcr1 |= Structure->CounterMode;
 8005872:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005874:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005878:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800587a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800587c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005880:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005882:	69a1      	ldr	r1, [r4, #24]
 8005884:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005888:	430a      	orrs	r2, r1
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588a:	68e1      	ldr	r1, [r4, #12]
  TIMx->CR1 = tmpcr1;
 800588c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800588e:	62d9      	str	r1, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005890:	6862      	ldr	r2, [r4, #4]
 8005892:	629a      	str	r2, [r3, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005894:	2601      	movs	r6, #1
 8005896:	615e      	str	r6, [r3, #20]
  tmpsmcr = htim->Instance->SMCR;
 8005898:	6898      	ldr	r0, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800589a:	6999      	ldr	r1, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800589c:	68af      	ldr	r7, [r5, #8]
 800589e:	69aa      	ldr	r2, [r5, #24]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058a0:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 80058a4:	f021 0103 	bic.w	r1, r1, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058a8:	ea47 2202 	orr.w	r2, r7, r2, lsl #8
 80058ac:	430a      	orrs	r2, r1
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058ae:	f422 417c 	bic.w	r1, r2, #64512	; 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058b2:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058b4:	69ef      	ldr	r7, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058b6:	0112      	lsls	r2, r2, #4
 80058b8:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 80058bc:	68ef      	ldr	r7, [r5, #12]
 80058be:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 80058c0:	6a1f      	ldr	r7, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80058c2:	f027 0caa 	bic.w	ip, r7, #170	; 0xaa
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058c6:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058c8:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80058cc:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
 80058d0:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058d2:	696f      	ldr	r7, [r5, #20]
 80058d4:	6869      	ldr	r1, [r5, #4]
  tmpsmcr |= sConfig->EncoderMode;
 80058d6:	682d      	ldr	r5, [r5, #0]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058d8:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
  tmpsmcr |= sConfig->EncoderMode;
 80058dc:	4328      	orrs	r0, r5
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80058de:	ea41 010c 	orr.w	r1, r1, ip
  htim->Instance->SMCR = tmpsmcr;
 80058e2:	6098      	str	r0, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 80058e4:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 80058e6:	6219      	str	r1, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058e8:	f884 6048 	strb.w	r6, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058ec:	f884 603e 	strb.w	r6, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f0:	f884 603f 	strb.w	r6, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058f4:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058f8:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80058fc:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  return HAL_OK;
 8005900:	2000      	movs	r0, #0
}
 8005902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005904:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005906:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800590a:	430a      	orrs	r2, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800590e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005912:	430a      	orrs	r2, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005914:	69a1      	ldr	r1, [r4, #24]
 8005916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800591a:	430a      	orrs	r2, r1
  TIMx->CR1 = tmpcr1;
 800591c:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591e:	68e2      	ldr	r2, [r4, #12]
 8005920:	62da      	str	r2, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005922:	6862      	ldr	r2, [r4, #4]
 8005924:	629a      	str	r2, [r3, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8005926:	6962      	ldr	r2, [r4, #20]
 8005928:	631a      	str	r2, [r3, #48]	; 0x30
 800592a:	e7b3      	b.n	8005894 <HAL_TIM_Encoder_Init+0x90>
    htim->Lock = HAL_UNLOCKED;
 800592c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005930:	f7fc ffb8 	bl	80028a4 <HAL_TIM_Encoder_MspInit>
 8005934:	e773      	b.n	800581e <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8005936:	2001      	movs	r0, #1
}
 8005938:	4770      	bx	lr
 800593a:	bf00      	nop
 800593c:	40012c00 	.word	0x40012c00

08005940 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005940:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d069      	beq.n	8005a1c <HAL_TIM_SlaveConfigSynchro+0xdc>
 8005948:	4684      	mov	ip, r0
 800594a:	2201      	movs	r2, #1
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800594c:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800594e:	2302      	movs	r3, #2
{
 8005950:	b410      	push	{r4}
  __HAL_LOCK(htim);
 8005952:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005956:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800595a:	6882      	ldr	r2, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800595c:	684b      	ldr	r3, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800595e:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005960:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005964:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005968:	431a      	orrs	r2, r3
  tmpsmcr &= ~TIM_SMCR_SMS;
 800596a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800596e:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005972:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005974:	2b60      	cmp	r3, #96	; 0x60
  htim->Instance->SMCR = tmpsmcr;
 8005976:	6082      	str	r2, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 8005978:	d05e      	beq.n	8005a38 <HAL_TIM_SlaveConfigSynchro+0xf8>
 800597a:	d816      	bhi.n	80059aa <HAL_TIM_SlaveConfigSynchro+0x6a>
 800597c:	2b40      	cmp	r3, #64	; 0x40
 800597e:	d06e      	beq.n	8005a5e <HAL_TIM_SlaveConfigSynchro+0x11e>
 8005980:	d933      	bls.n	80059ea <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005982:	2b50      	cmp	r3, #80	; 0x50
 8005984:	d141      	bne.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005986:	688a      	ldr	r2, [r1, #8]
 8005988:	690c      	ldr	r4, [r1, #16]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800598a:	6a01      	ldr	r1, [r0, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800598c:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005990:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005992:	6a01      	ldr	r1, [r0, #32]
 8005994:	f021 0101 	bic.w	r1, r1, #1
 8005998:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800599a:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800599c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059a0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80059a4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80059a6:	6202      	str	r2, [r0, #32]
 80059a8:	e00d      	b.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
  switch (sSlaveConfig->InputTrigger)
 80059aa:	2b70      	cmp	r3, #112	; 0x70
 80059ac:	d038      	beq.n	8005a20 <HAL_TIM_SlaveConfigSynchro+0xe0>
 80059ae:	2b6f      	cmp	r3, #111	; 0x6f
 80059b0:	d92b      	bls.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
 80059b2:	4a34      	ldr	r2, [pc, #208]	; (8005a84 <HAL_TIM_SlaveConfigSynchro+0x144>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d006      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 80059b8:	d91d      	bls.n	80059f6 <HAL_TIM_SlaveConfigSynchro+0xb6>
 80059ba:	4a33      	ldr	r2, [pc, #204]	; (8005a88 <HAL_TIM_SlaveConfigSynchro+0x148>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d002      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 80059c0:	3230      	adds	r2, #48	; 0x30
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d121      	bne.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059c6:	68c3      	ldr	r3, [r0, #12]
 80059c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059cc:	60c3      	str	r3, [r0, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059ce:	68c3      	ldr	r3, [r0, #12]
  __HAL_UNLOCK(htim);
 80059d0:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 80059d2:	2101      	movs	r1, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059d8:	60c3      	str	r3, [r0, #12]
  htim->State = HAL_TIM_STATE_READY;
 80059da:	f88c 103d 	strb.w	r1, [ip, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80059de:	f88c 203c 	strb.w	r2, [ip, #60]	; 0x3c
  return HAL_OK;
 80059e2:	4610      	mov	r0, r2
}
 80059e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059e8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80059ea:	2b20      	cmp	r3, #32
 80059ec:	d0eb      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 80059ee:	d909      	bls.n	8005a04 <HAL_TIM_SlaveConfigSynchro+0xc4>
 80059f0:	2b30      	cmp	r3, #48	; 0x30
 80059f2:	d10a      	bne.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
 80059f4:	e7e7      	b.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 80059f6:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80059fa:	d0e4      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 80059fc:	3a10      	subs	r2, #16
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d0e1      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a02:	e002      	b.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a04:	f033 0310 	bics.w	r3, r3, #16
 8005a08:	d0dd      	beq.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
    htim->State = HAL_TIM_STATE_READY;
 8005a0a:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005a0c:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8005a0e:	f88c 003d 	strb.w	r0, [ip, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8005a12:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
}
 8005a16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a1a:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005a1c:	2002      	movs	r0, #2
}
 8005a1e:	4770      	bx	lr

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a20:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8005a24:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a26:	6909      	ldr	r1, [r1, #16]
 8005a28:	4323      	orrs	r3, r4
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a2a:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005a32:	4313      	orrs	r3, r2

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a34:	6083      	str	r3, [r0, #8]
 8005a36:	e7c6      	b.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a38:	690b      	ldr	r3, [r1, #16]
 8005a3a:	688c      	ldr	r4, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a3c:	6a01      	ldr	r1, [r0, #32]
 8005a3e:	f021 0110 	bic.w	r1, r1, #16
 8005a42:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a44:	6982      	ldr	r2, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a46:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
  tmpccer = TIMx->CCER;
 8005a4e:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8005a50:	6182      	str	r2, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a56:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCER = tmpccer;
 8005a5a:	6203      	str	r3, [r0, #32]
 8005a5c:	e7b3      	b.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8005a5e:	2c05      	cmp	r4, #5
 8005a60:	d0d3      	beq.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
 8005a62:	f1b4 1f01 	cmp.w	r4, #65537	; 0x10001
 8005a66:	d0d0      	beq.n	8005a0a <HAL_TIM_SlaveConfigSynchro+0xca>
      tmpccer = htim->Instance->CCER;
 8005a68:	6a04      	ldr	r4, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a6a:	6a02      	ldr	r2, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a6c:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005a6e:	f022 0201 	bic.w	r2, r2, #1
 8005a72:	6202      	str	r2, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005a74:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005a7a:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005a7e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;
 8005a80:	6204      	str	r4, [r0, #32]
      break;
 8005a82:	e7a0      	b.n	80059c6 <HAL_TIM_SlaveConfigSynchro+0x86>
 8005a84:	00100030 	.word	0x00100030
 8005a88:	00100040 	.word	0x00100040

08005a8c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a8c:	6a03      	ldr	r3, [r0, #32]
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005a94:	6a03      	ldr	r3, [r0, #32]
{
 8005a96:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8005a98:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005a9a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a9e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005aa2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aa6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aaa:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005aac:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ab0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab4:	4d14      	ldr	r5, [pc, #80]	; (8005b08 <TIM_OC2_SetConfig+0x7c>)
 8005ab6:	42a8      	cmp	r0, r5
 8005ab8:	d010      	beq.n	8005adc <TIM_OC2_SetConfig+0x50>
 8005aba:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005abe:	42a8      	cmp	r0, r5
 8005ac0:	d00c      	beq.n	8005adc <TIM_OC2_SetConfig+0x50>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ac2:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8005ac6:	42a8      	cmp	r0, r5
 8005ac8:	d00f      	beq.n	8005aea <TIM_OC2_SetConfig+0x5e>
 8005aca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ace:	42a8      	cmp	r0, r5
 8005ad0:	d00b      	beq.n	8005aea <TIM_OC2_SetConfig+0x5e>
 8005ad2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005ad6:	42a8      	cmp	r0, r5
 8005ad8:	d10f      	bne.n	8005afa <TIM_OC2_SetConfig+0x6e>
 8005ada:	e006      	b.n	8005aea <TIM_OC2_SetConfig+0x5e>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005adc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ade:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ae2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005ae6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aea:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005aee:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005af2:	ea46 0c05 	orr.w	ip, r6, r5
 8005af6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005afa:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005afc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	6182      	str	r2, [r0, #24]
}
 8005b00:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8005b02:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005b04:	6203      	str	r3, [r0, #32]
}
 8005b06:	4770      	bx	lr
 8005b08:	40012c00 	.word	0x40012c00

08005b0c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8005b0c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	f000 80f4 	beq.w	8005cfe <HAL_TIM_PWM_ConfigChannel+0x1f2>
 8005b16:	2301      	movs	r3, #1
{
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	4604      	mov	r4, r0
 8005b1c:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8005b1e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8005b22:	2a14      	cmp	r2, #20
 8005b24:	d80c      	bhi.n	8005b40 <HAL_TIM_PWM_ConfigChannel+0x34>
 8005b26:	e8df f002 	tbb	[pc, r2]
 8005b2a:	0b53      	.short	0x0b53
 8005b2c:	0b680b0b 	.word	0x0b680b0b
 8005b30:	0b7e0b0b 	.word	0x0b7e0b0b
 8005b34:	0b930b0b 	.word	0x0b930b0b
 8005b38:	0ba90b0b 	.word	0x0ba90b0b
 8005b3c:	0b0b      	.short	0x0b0b
 8005b3e:	10          	.byte	0x10
 8005b3f:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8005b40:	2300      	movs	r3, #0
 8005b42:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8005b46:	2001      	movs	r0, #1
}
 8005b48:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005b4a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b4c:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b4e:	6a1a      	ldr	r2, [r3, #32]
 8005b50:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005b56:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005b58:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005b5a:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005b5c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8005b60:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b64:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b68:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005b6a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005b6e:	ea42 5206 	orr.w	r2, r2, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	4e64      	ldr	r6, [pc, #400]	; (8005d04 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005b74:	42b3      	cmp	r3, r6
 8005b76:	d00f      	beq.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005b78:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005b7c:	42b3      	cmp	r3, r6
 8005b7e:	d00b      	beq.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005b80:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005b84:	42b3      	cmp	r3, r6
 8005b86:	d007      	beq.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005b88:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b8c:	42b3      	cmp	r3, r6
 8005b8e:	d003      	beq.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8005b90:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b94:	42b3      	cmp	r3, r6
 8005b96:	d104      	bne.n	8005ba2 <HAL_TIM_PWM_ConfigChannel+0x96>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b98:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005b9a:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005b9e:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8005ba2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ba4:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005ba6:	6869      	ldr	r1, [r5, #4]
 8005ba8:	64d9      	str	r1, [r3, #76]	; 0x4c
  TIMx->CCER = tmpccer;
 8005baa:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bac:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bae:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005bb0:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005bb4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005bb6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005bb8:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005bbc:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005bbe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bc0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005bc4:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005bcc:	2000      	movs	r0, #0
}
 8005bce:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005bd0:	6800      	ldr	r0, [r0, #0]
 8005bd2:	f7ff fc49 	bl	8005468 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bd6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bd8:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bda:	6999      	ldr	r1, [r3, #24]
 8005bdc:	f041 0108 	orr.w	r1, r1, #8
 8005be0:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005be2:	6999      	ldr	r1, [r3, #24]
 8005be4:	f021 0104 	bic.w	r1, r1, #4
 8005be8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005bea:	699a      	ldr	r2, [r3, #24]
 8005bec:	4302      	orrs	r2, r0
 8005bee:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005bf6:	2000      	movs	r0, #0
}
 8005bf8:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bfa:	6800      	ldr	r0, [r0, #0]
 8005bfc:	f7ff ff46 	bl	8005a8c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c00:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c02:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c04:	6999      	ldr	r1, [r3, #24]
 8005c06:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005c0a:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c0c:	6999      	ldr	r1, [r3, #24]
 8005c0e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005c12:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c14:	699a      	ldr	r2, [r3, #24]
 8005c16:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005c1a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c22:	2000      	movs	r0, #0
}
 8005c24:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c26:	6800      	ldr	r0, [r0, #0]
 8005c28:	f7ff fc5a 	bl	80054e0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c2c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c2e:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c30:	69d9      	ldr	r1, [r3, #28]
 8005c32:	f041 0108 	orr.w	r1, r1, #8
 8005c36:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c38:	69d9      	ldr	r1, [r3, #28]
 8005c3a:	f021 0104 	bic.w	r1, r1, #4
 8005c3e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c40:	69da      	ldr	r2, [r3, #28]
 8005c42:	4302      	orrs	r2, r0
 8005c44:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005c46:	2300      	movs	r3, #0
 8005c48:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c4c:	2000      	movs	r0, #0
}
 8005c4e:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c50:	6800      	ldr	r0, [r0, #0]
 8005c52:	f7ff fc85 	bl	8005560 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c56:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c58:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c5a:	69d9      	ldr	r1, [r3, #28]
 8005c5c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005c60:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c62:	69d9      	ldr	r1, [r3, #28]
 8005c64:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005c68:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c6a:	69da      	ldr	r2, [r3, #28]
 8005c6c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005c70:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8005c72:	2300      	movs	r3, #0
 8005c74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005c78:	2000      	movs	r0, #0
}
 8005c7a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005c7c:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005c7e:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c80:	6a1a      	ldr	r2, [r3, #32]
 8005c82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005c86:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005c88:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005c8a:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8005c8c:	6d19      	ldr	r1, [r3, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c8e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005c92:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 8005c96:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c98:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8005c9a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c9e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca2:	4e18      	ldr	r6, [pc, #96]	; (8005d04 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8005ca4:	42b3      	cmp	r3, r6
 8005ca6:	d00f      	beq.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005ca8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005cac:	42b3      	cmp	r3, r6
 8005cae:	d00b      	beq.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005cb0:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005cb4:	42b3      	cmp	r3, r6
 8005cb6:	d007      	beq.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005cb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cbc:	42b3      	cmp	r3, r6
 8005cbe:	d003      	beq.n	8005cc8 <HAL_TIM_PWM_ConfigChannel+0x1bc>
 8005cc0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cc4:	42b3      	cmp	r3, r6
 8005cc6:	d104      	bne.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1c6>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cc8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cca:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005cce:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005cd2:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005cd4:	6519      	str	r1, [r3, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005cd6:	6869      	ldr	r1, [r5, #4]
 8005cd8:	6499      	str	r1, [r3, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005cda:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cdc:	6d19      	ldr	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cde:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005ce0:	f041 0108 	orr.w	r1, r1, #8
 8005ce4:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005ce6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005ce8:	f021 0104 	bic.w	r1, r1, #4
 8005cec:	6519      	str	r1, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005cee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005cf0:	432a      	orrs	r2, r5
 8005cf2:	651a      	str	r2, [r3, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005cfa:	2000      	movs	r0, #0
}
 8005cfc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8005cfe:	2002      	movs	r0, #2
}
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40012c00 	.word	0x40012c00

08005d08 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d08:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d03e      	beq.n	8005d8e <HAL_TIMEx_MasterConfigSynchronization+0x86>
{
 8005d10:	b470      	push	{r4, r5, r6}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d12:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d14:	4d1f      	ldr	r5, [pc, #124]	; (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x8c>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005d16:	2302      	movs	r3, #2
 8005d18:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d1c:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 8005d1e:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8005d20:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005d22:	d028      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
 8005d24:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005d28:	42aa      	cmp	r2, r5
 8005d2a:	d024      	beq.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x6e>
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d2c:	680e      	ldr	r6, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d2e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d36:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d38:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005d3c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d3e:	d00c      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d40:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x90>)
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d009      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d005      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d4e:	42aa      	cmp	r2, r5
 8005d50:	d003      	beq.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
 8005d52:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d104      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0x5c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d5a:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d5c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d60:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d62:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005d64:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005d66:	2201      	movs	r2, #1
 8005d68:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005d6c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005d70:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 8005d72:	4618      	mov	r0, r3
}
 8005d74:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d76:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005d78:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005d7c:	432b      	orrs	r3, r5
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d7e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d82:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d88:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005d8a:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d8c:	e7e5      	b.n	8005d5a <HAL_TIMEx_MasterConfigSynchronization+0x52>
  __HAL_LOCK(htim);
 8005d8e:	2002      	movs	r0, #2
}
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40012c00 	.word	0x40012c00
 8005d98:	40000400 	.word	0x40000400

08005d9c <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d045      	beq.n	8005e30 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8005da4:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005da6:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8005daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dae:	4602      	mov	r2, r0
 8005db0:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db2:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005db4:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005db6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dba:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dbc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc0:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dc2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dc4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dc8:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005dca:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dcc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dd0:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005dd2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dd4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005dd8:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005dda:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ddc:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005de0:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005de6:	4c13      	ldr	r4, [pc, #76]	; (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
 8005de8:	42a0      	cmp	r0, r4
 8005dea:	d00b      	beq.n	8005e04 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005dec:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 8005df0:	42a0      	cmp	r0, r4
 8005df2:	d007      	beq.n	8005e04 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005df4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005df6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005df8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005dfc:	4608      	mov	r0, r1
}
 8005dfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e02:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005e04:	69cc      	ldr	r4, [r1, #28]
 8005e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e0a:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005e0c:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8005e0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e12:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005e16:	6a0c      	ldr	r4, [r1, #32]
 8005e18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e1c:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e1e:	6a4c      	ldr	r4, [r1, #36]	; 0x24
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e20:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005e22:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005e26:	4323      	orrs	r3, r4
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e28:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e2c:	430b      	orrs	r3, r1
 8005e2e:	e7e1      	b.n	8005df4 <HAL_TIMEx_ConfigBreakDeadTime+0x58>
  __HAL_LOCK(htim);
 8005e30:	2002      	movs	r0, #2
}
 8005e32:	4770      	bx	lr
 8005e34:	40012c00 	.word	0x40012c00

08005e38 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d04b      	beq.n	8005ed8 <HAL_TIMEx_ConfigBreakInput+0xa0>

  switch (sBreakInputConfig->Source)
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	2b0f      	cmp	r3, #15
{
 8005e46:	b4f0      	push	{r4, r5, r6, r7}
 8005e48:	d824      	bhi.n	8005e94 <HAL_TIMEx_ConfigBreakInput+0x5c>
 8005e4a:	4c25      	ldr	r4, [pc, #148]	; (8005ee0 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8005e4c:	4e25      	ldr	r6, [pc, #148]	; (8005ee4 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8005e4e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8005e52:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8005e56:	4c24      	ldr	r4, [pc, #144]	; (8005ee8 <HAL_TIMEx_ConfigBreakInput+0xb0>)
 8005e58:	4e24      	ldr	r6, [pc, #144]	; (8005eec <HAL_TIMEx_ConfigBreakInput+0xb4>)
 8005e5a:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8005e5e:	f856 7023 	ldr.w	r7, [r6, r3, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8005e62:	2901      	cmp	r1, #1
 8005e64:	d01c      	beq.n	8005ea0 <HAL_TIMEx_ConfigBreakInput+0x68>
 8005e66:	2902      	cmp	r1, #2
 8005e68:	d12f      	bne.n	8005eca <HAL_TIMEx_ConfigBreakInput+0x92>
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e6a:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 8005e6c:	6806      	ldr	r6, [r0, #0]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005e6e:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e70:	fa01 f30c 	lsl.w	r3, r1, ip
      tmporx = htim->Instance->AF2;
 8005e74:	6e71      	ldr	r1, [r6, #100]	; 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e76:	404b      	eors	r3, r1
 8005e78:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005e7a:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005e7c:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005e7e:	405a      	eors	r2, r3
 8005e80:	4014      	ands	r4, r2
 8005e82:	4063      	eors	r3, r4
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8005e84:	2200      	movs	r2, #0
      htim->Instance->AF2 = tmporx;
 8005e86:	6673      	str	r3, [r6, #100]	; 0x64
  __HAL_UNLOCK(htim);
 8005e88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005e8c:	2300      	movs	r3, #0

  return status;
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	bcf0      	pop	{r4, r5, r6, r7}
 8005e92:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8005e94:	2700      	movs	r7, #0
  switch (BreakInput)
 8005e96:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8005e98:	46bc      	mov	ip, r7
 8005e9a:	463c      	mov	r4, r7
 8005e9c:	463d      	mov	r5, r7
  switch (BreakInput)
 8005e9e:	d1e2      	bne.n	8005e66 <HAL_TIMEx_ConfigBreakInput+0x2e>
      tmporx = htim->Instance->AF1;
 8005ea0:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ea2:	6853      	ldr	r3, [r2, #4]
      tmporx = htim->Instance->AF1;
 8005ea4:	6e31      	ldr	r1, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005ea6:	6892      	ldr	r2, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005ea8:	fa03 f30c 	lsl.w	r3, r3, ip
 8005eac:	404b      	eors	r3, r1
 8005eae:	402b      	ands	r3, r5
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005eb0:	40ba      	lsls	r2, r7
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8005eb2:	404b      	eors	r3, r1
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8005eb4:	405a      	eors	r2, r3
 8005eb6:	4014      	ands	r4, r2
 8005eb8:	4063      	eors	r3, r4
  __HAL_UNLOCK(htim);
 8005eba:	2200      	movs	r2, #0
      htim->Instance->AF1 = tmporx;
 8005ebc:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8005ebe:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005ec2:	2300      	movs	r3, #0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ec8:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  switch (BreakInput)
 8005ed0:	2301      	movs	r3, #1
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	bcf0      	pop	{r4, r5, r6, r7}
 8005ed6:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005ed8:	2302      	movs	r3, #2
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	08008c50 	.word	0x08008c50
 8005ee4:	08008cd0 	.word	0x08008cd0
 8005ee8:	08008c90 	.word	0x08008c90
 8005eec:	08008d10 	.word	0x08008d10

08005ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8005ef4:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ef6:	6882      	ldr	r2, [r0, #8]
 8005ef8:	6900      	ldr	r0, [r0, #16]
 8005efa:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005efc:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005efe:	4302      	orrs	r2, r0
 8005f00:	430a      	orrs	r2, r1
 8005f02:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f04:	49a6      	ldr	r1, [pc, #664]	; (80061a0 <UART_SetConfig+0x2b0>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f06:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f08:	4029      	ands	r1, r5
 8005f0a:	430a      	orrs	r2, r1
 8005f0c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	68e1      	ldr	r1, [r4, #12]
 8005f12:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005f16:	430a      	orrs	r2, r1
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f18:	49a2      	ldr	r1, [pc, #648]	; (80061a4 <UART_SetConfig+0x2b4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f1c:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f1e:	69a2      	ldr	r2, [r4, #24]
  {
    tmpreg |= huart->Init.OneBitSampling;
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f20:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f22:	d06b      	beq.n	8005ffc <UART_SetConfig+0x10c>
    tmpreg |= huart->Init.OneBitSampling;
 8005f24:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f26:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8005f2a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8005f2e:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f30:	430a      	orrs	r2, r1
 8005f32:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f36:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f38:	f022 020f 	bic.w	r2, r2, #15
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f40:	4a99      	ldr	r2, [pc, #612]	; (80061a8 <UART_SetConfig+0x2b8>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d012      	beq.n	8005f6c <UART_SetConfig+0x7c>
 8005f46:	4a99      	ldr	r2, [pc, #612]	; (80061ac <UART_SetConfig+0x2bc>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d036      	beq.n	8005fba <UART_SetConfig+0xca>
 8005f4c:	4a98      	ldr	r2, [pc, #608]	; (80061b0 <UART_SetConfig+0x2c0>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f000 80fa 	beq.w	8006148 <UART_SetConfig+0x258>
 8005f54:	4a97      	ldr	r2, [pc, #604]	; (80061b4 <UART_SetConfig+0x2c4>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	f000 80a5 	beq.w	80060a6 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
        break;
      default:
        pclk = 0U;
        ret = HAL_ERROR;
 8005f5c:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f5e:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8005f60:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->TxISR = NULL;
 8005f64:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  huart->NbRxDataToProcess = 1;
 8005f68:	66a2      	str	r2, [r4, #104]	; 0x68

  return ret;
}
 8005f6a:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6c:	4b92      	ldr	r3, [pc, #584]	; (80061b8 <UART_SetConfig+0x2c8>)
 8005f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	3b01      	subs	r3, #1
 8005f78:	2b02      	cmp	r3, #2
 8005f7a:	f240 808e 	bls.w	800609a <UART_SetConfig+0x1aa>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005f82:	f000 80fe 	beq.w	8006182 <UART_SetConfig+0x292>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f86:	f7ff f909 	bl	800519c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	f000 80da 	beq.w	8006144 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f90:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	4b89      	ldr	r3, [pc, #548]	; (80061bc <UART_SetConfig+0x2cc>)
 8005f96:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005f9a:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f9e:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fa2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8005fa6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005faa:	f1a3 0210 	sub.w	r2, r3, #16
 8005fae:	428a      	cmp	r2, r1
 8005fb0:	d8d4      	bhi.n	8005f5c <UART_SetConfig+0x6c>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005fb2:	6822      	ldr	r2, [r4, #0]
 8005fb4:	2000      	movs	r0, #0
 8005fb6:	60d3      	str	r3, [r2, #12]
 8005fb8:	e7d1      	b.n	8005f5e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fba:	4b7f      	ldr	r3, [pc, #508]	; (80061b8 <UART_SetConfig+0x2c8>)
 8005fbc:	4a80      	ldr	r2, [pc, #512]	; (80061c0 <UART_SetConfig+0x2d0>)
 8005fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc2:	f003 030c 	and.w	r3, r3, #12
 8005fc6:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fc8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005fcc:	d07d      	beq.n	80060ca <UART_SetConfig+0x1da>
    switch (clocksource)
 8005fce:	2b08      	cmp	r3, #8
 8005fd0:	d8c4      	bhi.n	8005f5c <UART_SetConfig+0x6c>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <UART_SetConfig+0xe8>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08006103 	.word	0x08006103
 8005fdc:	08005f87 	.word	0x08005f87
 8005fe0:	0800617f 	.word	0x0800617f
 8005fe4:	08005f5d 	.word	0x08005f5d
 8005fe8:	080060c5 	.word	0x080060c5
 8005fec:	08005f5d 	.word	0x08005f5d
 8005ff0:	08005f5d 	.word	0x08005f5d
 8005ff4:	08005f5d 	.word	0x08005f5d
 8005ff8:	0800616f 	.word	0x0800616f
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffc:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 8006000:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006004:	430a      	orrs	r2, r1
 8006006:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  UART_GETCLOCKSOURCE(huart, clocksource);
 800600c:	486a      	ldr	r0, [pc, #424]	; (80061b8 <UART_SetConfig+0x2c8>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800600e:	f022 020f 	bic.w	r2, r2, #15
 8006012:	430a      	orrs	r2, r1
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006016:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 800601a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800601e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006022:	f000 80aa 	beq.w	800617a <UART_SetConfig+0x28a>
 8006026:	d80b      	bhi.n	8006040 <UART_SetConfig+0x150>
 8006028:	2b00      	cmp	r3, #0
 800602a:	d039      	beq.n	80060a0 <UART_SetConfig+0x1b0>
 800602c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006030:	d194      	bne.n	8005f5c <UART_SetConfig+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8006032:	f7fe ff51 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8006036:	2800      	cmp	r0, #0
 8006038:	f000 8084 	beq.w	8006144 <UART_SetConfig+0x254>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800603c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800603e:	e004      	b.n	800604a <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006040:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006044:	d18a      	bne.n	8005f5c <UART_SetConfig+0x6c>
        pclk = (uint32_t) LSE_VALUE;
 8006046:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800604a:	4b5c      	ldr	r3, [pc, #368]	; (80061bc <UART_SetConfig+0x2cc>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800604c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800604e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
 8006052:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006056:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800605a:	4299      	cmp	r1, r3
 800605c:	f63f af7e 	bhi.w	8005f5c <UART_SetConfig+0x6c>
 8006060:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 8006064:	f63f af7a 	bhi.w	8005f5c <UART_SetConfig+0x6c>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006068:	2300      	movs	r3, #0
 800606a:	4619      	mov	r1, r3
 800606c:	f7fa f8d4 	bl	8000218 <__aeabi_uldivmod>
 8006070:	0209      	lsls	r1, r1, #8
 8006072:	0203      	lsls	r3, r0, #8
 8006074:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8006078:	0868      	lsrs	r0, r5, #1
 800607a:	1818      	adds	r0, r3, r0
 800607c:	462a      	mov	r2, r5
 800607e:	f04f 0300 	mov.w	r3, #0
 8006082:	f141 0100 	adc.w	r1, r1, #0
 8006086:	f7fa f8c7 	bl	8000218 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800608a:	4a4e      	ldr	r2, [pc, #312]	; (80061c4 <UART_SetConfig+0x2d4>)
 800608c:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8006090:	4291      	cmp	r1, r2
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006092:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006094:	f63f af62 	bhi.w	8005f5c <UART_SetConfig+0x6c>
 8006098:	e78b      	b.n	8005fb2 <UART_SetConfig+0xc2>
 800609a:	4a4b      	ldr	r2, [pc, #300]	; (80061c8 <UART_SetConfig+0x2d8>)
 800609c:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 800609e:	e793      	b.n	8005fc8 <UART_SetConfig+0xd8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80060a0:	f7ff f86a 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
        break;
 80060a4:	e7c7      	b.n	8006036 <UART_SetConfig+0x146>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060a6:	4b44      	ldr	r3, [pc, #272]	; (80061b8 <UART_SetConfig+0x2c8>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060b0:	2b80      	cmp	r3, #128	; 0x80
 80060b2:	d06e      	beq.n	8006192 <UART_SetConfig+0x2a2>
 80060b4:	d85e      	bhi.n	8006174 <UART_SetConfig+0x284>
 80060b6:	b30b      	cbz	r3, 80060fc <UART_SetConfig+0x20c>
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	f47f af4f 	bne.w	8005f5c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060be:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80060c2:	d021      	beq.n	8006108 <UART_SetConfig+0x218>
        pclk = HAL_RCC_GetSysClockFreq();
 80060c4:	f7fe ff08 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
        break;
 80060c8:	e75f      	b.n	8005f8a <UART_SetConfig+0x9a>
    switch (clocksource)
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	f63f af46 	bhi.w	8005f5c <UART_SetConfig+0x6c>
 80060d0:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x1e8>)
 80060d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d6:	bf00      	nop
 80060d8:	08006189 	.word	0x08006189
 80060dc:	08006183 	.word	0x08006183
 80060e0:	0800618f 	.word	0x0800618f
 80060e4:	08005f5d 	.word	0x08005f5d
 80060e8:	08006109 	.word	0x08006109
 80060ec:	08005f5d 	.word	0x08005f5d
 80060f0:	08005f5d 	.word	0x08005f5d
 80060f4:	08005f5d 	.word	0x08005f5d
 80060f8:	08006111 	.word	0x08006111
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060fc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006100:	d042      	beq.n	8006188 <UART_SetConfig+0x298>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006102:	f7ff f839 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
        break;
 8006106:	e740      	b.n	8005f8a <UART_SetConfig+0x9a>
        pclk = HAL_RCC_GetSysClockFreq();
 8006108:	f7fe fee6 	bl	8004ed8 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800610c:	b1d0      	cbz	r0, 8006144 <UART_SetConfig+0x254>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800610e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006110:	6862      	ldr	r2, [r4, #4]
 8006112:	4b2a      	ldr	r3, [pc, #168]	; (80061bc <UART_SetConfig+0x2cc>)
 8006114:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 8006118:	fbb0 f0f1 	udiv	r0, r0, r1
 800611c:	0853      	lsrs	r3, r2, #1
 800611e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006122:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006126:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612a:	f1a0 0210 	sub.w	r2, r0, #16
 800612e:	429a      	cmp	r2, r3
 8006130:	f63f af14 	bhi.w	8005f5c <UART_SetConfig+0x6c>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006134:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8006138:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613a:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800613c:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8006140:	4318      	orrs	r0, r3
 8006142:	60d0      	str	r0, [r2, #12]
 8006144:	2000      	movs	r0, #0
 8006146:	e70a      	b.n	8005f5e <UART_SetConfig+0x6e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006148:	4b1b      	ldr	r3, [pc, #108]	; (80061b8 <UART_SetConfig+0x2c8>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006152:	2b20      	cmp	r3, #32
 8006154:	d01d      	beq.n	8006192 <UART_SetConfig+0x2a2>
 8006156:	d804      	bhi.n	8006162 <UART_SetConfig+0x272>
 8006158:	2b00      	cmp	r3, #0
 800615a:	d0cf      	beq.n	80060fc <UART_SetConfig+0x20c>
 800615c:	2b10      	cmp	r3, #16
 800615e:	d0ae      	beq.n	80060be <UART_SetConfig+0x1ce>
 8006160:	e6fc      	b.n	8005f5c <UART_SetConfig+0x6c>
 8006162:	2b30      	cmp	r3, #48	; 0x30
 8006164:	f47f aefa 	bne.w	8005f5c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006168:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800616c:	d0d0      	beq.n	8006110 <UART_SetConfig+0x220>
    switch (clocksource)
 800616e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006172:	e70e      	b.n	8005f92 <UART_SetConfig+0xa2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006174:	2bc0      	cmp	r3, #192	; 0xc0
 8006176:	d0f7      	beq.n	8006168 <UART_SetConfig+0x278>
 8006178:	e6f0      	b.n	8005f5c <UART_SetConfig+0x6c>
 800617a:	4814      	ldr	r0, [pc, #80]	; (80061cc <UART_SetConfig+0x2dc>)
 800617c:	e765      	b.n	800604a <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 800617e:	4813      	ldr	r0, [pc, #76]	; (80061cc <UART_SetConfig+0x2dc>)
 8006180:	e707      	b.n	8005f92 <UART_SetConfig+0xa2>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006182:	f7ff f80b 	bl	800519c <HAL_RCC_GetPCLK2Freq>
        break;
 8006186:	e7c1      	b.n	800610c <UART_SetConfig+0x21c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006188:	f7fe fff6 	bl	8005178 <HAL_RCC_GetPCLK1Freq>
        break;
 800618c:	e7be      	b.n	800610c <UART_SetConfig+0x21c>
        pclk = (uint32_t) HSI_VALUE;
 800618e:	480f      	ldr	r0, [pc, #60]	; (80061cc <UART_SetConfig+0x2dc>)
 8006190:	e7be      	b.n	8006110 <UART_SetConfig+0x220>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006192:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 8006196:	480d      	ldr	r0, [pc, #52]	; (80061cc <UART_SetConfig+0x2dc>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006198:	f47f aefb 	bne.w	8005f92 <UART_SetConfig+0xa2>
 800619c:	e7b8      	b.n	8006110 <UART_SetConfig+0x220>
 800619e:	bf00      	nop
 80061a0:	cfff69f3 	.word	0xcfff69f3
 80061a4:	40008000 	.word	0x40008000
 80061a8:	40013800 	.word	0x40013800
 80061ac:	40004400 	.word	0x40004400
 80061b0:	40004800 	.word	0x40004800
 80061b4:	40004c00 	.word	0x40004c00
 80061b8:	40021000 	.word	0x40021000
 80061bc:	08008d64 	.word	0x08008d64
 80061c0:	08008d54 	.word	0x08008d54
 80061c4:	000ffcff 	.word	0x000ffcff
 80061c8:	08008d50 	.word	0x08008d50
 80061cc:	00f42400 	.word	0x00f42400

080061d0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80061d2:	07da      	lsls	r2, r3, #31
{
 80061d4:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061d6:	d506      	bpl.n	80061e6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061d8:	6801      	ldr	r1, [r0, #0]
 80061da:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80061dc:	684a      	ldr	r2, [r1, #4]
 80061de:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80061e2:	4322      	orrs	r2, r4
 80061e4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061e6:	079c      	lsls	r4, r3, #30
 80061e8:	d506      	bpl.n	80061f8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061ea:	6801      	ldr	r1, [r0, #0]
 80061ec:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80061ee:	684a      	ldr	r2, [r1, #4]
 80061f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80061f4:	4322      	orrs	r2, r4
 80061f6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f8:	0759      	lsls	r1, r3, #29
 80061fa:	d506      	bpl.n	800620a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061fc:	6801      	ldr	r1, [r0, #0]
 80061fe:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006200:	684a      	ldr	r2, [r1, #4]
 8006202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006206:	4322      	orrs	r2, r4
 8006208:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620a:	071a      	lsls	r2, r3, #28
 800620c:	d506      	bpl.n	800621c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800620e:	6801      	ldr	r1, [r0, #0]
 8006210:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006212:	684a      	ldr	r2, [r1, #4]
 8006214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006218:	4322      	orrs	r2, r4
 800621a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800621c:	06dc      	lsls	r4, r3, #27
 800621e:	d506      	bpl.n	800622e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006220:	6801      	ldr	r1, [r0, #0]
 8006222:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006224:	688a      	ldr	r2, [r1, #8]
 8006226:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800622a:	4322      	orrs	r2, r4
 800622c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800622e:	0699      	lsls	r1, r3, #26
 8006230:	d506      	bpl.n	8006240 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006232:	6801      	ldr	r1, [r0, #0]
 8006234:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006236:	688a      	ldr	r2, [r1, #8]
 8006238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800623c:	4322      	orrs	r2, r4
 800623e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006240:	065a      	lsls	r2, r3, #25
 8006242:	d509      	bpl.n	8006258 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006244:	6801      	ldr	r1, [r0, #0]
 8006246:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006248:	684a      	ldr	r2, [r1, #4]
 800624a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800624e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006250:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006254:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006256:	d00b      	beq.n	8006270 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006258:	061b      	lsls	r3, r3, #24
 800625a:	d506      	bpl.n	800626a <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800625c:	6802      	ldr	r2, [r0, #0]
 800625e:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8006260:	6853      	ldr	r3, [r2, #4]
 8006262:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006266:	430b      	orrs	r3, r1
 8006268:	6053      	str	r3, [r2, #4]
  }
}
 800626a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800626e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006270:	684a      	ldr	r2, [r1, #4]
 8006272:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8006274:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006278:	4322      	orrs	r2, r4
 800627a:	604a      	str	r2, [r1, #4]
 800627c:	e7ec      	b.n	8006258 <UART_AdvFeatureConfig+0x88>
 800627e:	bf00      	nop

08006280 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006284:	f8dd 8020 	ldr.w	r8, [sp, #32]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006288:	6804      	ldr	r4, [r0, #0]
{
 800628a:	4607      	mov	r7, r0
 800628c:	460e      	mov	r6, r1
 800628e:	4615      	mov	r5, r2
 8006290:	4699      	mov	r9, r3
 8006292:	f1b8 3fff 	cmp.w	r8, #4294967295
 8006296:	d10a      	bne.n	80062ae <UART_WaitOnFlagUntilTimeout+0x2e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006298:	69e3      	ldr	r3, [r4, #28]
 800629a:	ea36 0303 	bics.w	r3, r6, r3
 800629e:	bf0c      	ite	eq
 80062a0:	2301      	moveq	r3, #1
 80062a2:	2300      	movne	r3, #0
 80062a4:	429d      	cmp	r5, r3
 80062a6:	d0f7      	beq.n	8006298 <UART_WaitOnFlagUntilTimeout+0x18>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80062a8:	2000      	movs	r0, #0
}
 80062aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062ae:	69e3      	ldr	r3, [r4, #28]
 80062b0:	ea36 0303 	bics.w	r3, r6, r3
 80062b4:	bf0c      	ite	eq
 80062b6:	2301      	moveq	r3, #1
 80062b8:	2300      	movne	r3, #0
 80062ba:	42ab      	cmp	r3, r5
 80062bc:	d1f4      	bne.n	80062a8 <UART_WaitOnFlagUntilTimeout+0x28>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062be:	f7fd f9c1 	bl	8003644 <HAL_GetTick>
 80062c2:	eba0 0009 	sub.w	r0, r0, r9
 80062c6:	4540      	cmp	r0, r8
 80062c8:	d833      	bhi.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb2>
 80062ca:	f1b8 0f00 	cmp.w	r8, #0
 80062ce:	d030      	beq.n	8006332 <UART_WaitOnFlagUntilTimeout+0xb2>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80062d0:	683c      	ldr	r4, [r7, #0]
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	0759      	lsls	r1, r3, #29
 80062d6:	4622      	mov	r2, r4
 80062d8:	d5db      	bpl.n	8006292 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80062da:	69e3      	ldr	r3, [r4, #28]
 80062dc:	051b      	lsls	r3, r3, #20
 80062de:	d5d8      	bpl.n	8006292 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80062e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80062e4:	6223      	str	r3, [r4, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	e854 3f00 	ldrex	r3, [r4]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80062ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	e844 3100 	strex	r1, r3, [r4]
 80062f2:	b139      	cbz	r1, 8006304 <UART_WaitOnFlagUntilTimeout+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f4:	e852 3f00 	ldrex	r3, [r2]
 80062f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	e842 3100 	strex	r1, r3, [r2]
 8006300:	2900      	cmp	r1, #0
 8006302:	d1f7      	bne.n	80062f4 <UART_WaitOnFlagUntilTimeout+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006304:	f102 0308 	add.w	r3, r2, #8
 8006308:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006310:	f102 0008 	add.w	r0, r2, #8
 8006314:	e840 3100 	strex	r1, r3, [r0]
 8006318:	2900      	cmp	r1, #0
 800631a:	d1f3      	bne.n	8006304 <UART_WaitOnFlagUntilTimeout+0x84>
          huart->gState = HAL_UART_STATE_READY;
 800631c:	2320      	movs	r3, #32
 800631e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          __HAL_UNLOCK(huart);
 8006322:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006326:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          return HAL_TIMEOUT;
 800632a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800632c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          return HAL_TIMEOUT;
 8006330:	e7bb      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x2a>
 8006332:	683a      	ldr	r2, [r7, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006338:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	e842 3100 	strex	r1, r3, [r2]
 8006340:	2900      	cmp	r1, #0
 8006342:	d1f7      	bne.n	8006334 <UART_WaitOnFlagUntilTimeout+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	f102 0308 	add.w	r3, r2, #8
 8006348:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800634c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006350:	f102 0008 	add.w	r0, r2, #8
 8006354:	e840 3100 	strex	r1, r3, [r0]
 8006358:	2900      	cmp	r1, #0
 800635a:	d1f3      	bne.n	8006344 <UART_WaitOnFlagUntilTimeout+0xc4>
        huart->gState = HAL_UART_STATE_READY;
 800635c:	2320      	movs	r3, #32
 800635e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        __HAL_UNLOCK(huart);
 8006362:	f887 1080 	strb.w	r1, [r7, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8006366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        return HAL_TIMEOUT;
 800636a:	2003      	movs	r0, #3
 800636c:	e79d      	b.n	80062aa <UART_WaitOnFlagUntilTimeout+0x2a>
 800636e:	bf00      	nop

08006370 <HAL_UART_Init>:
  if (huart == NULL)
 8006370:	2800      	cmp	r0, #0
 8006372:	d066      	beq.n	8006442 <HAL_UART_Init+0xd2>
{
 8006374:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006376:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
{
 800637a:	b082      	sub	sp, #8
 800637c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800637e:	2b00      	cmp	r3, #0
 8006380:	d04c      	beq.n	800641c <HAL_UART_Init+0xac>
  __HAL_UART_DISABLE(huart);
 8006382:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006384:	2324      	movs	r3, #36	; 0x24
 8006386:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UART_DISABLE(huart);
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	f023 0301 	bic.w	r3, r3, #1
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006390:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8006392:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006394:	f7ff fdac 	bl	8005ef0 <UART_SetConfig>
 8006398:	2801      	cmp	r0, #1
 800639a:	d03c      	beq.n	8006416 <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800639c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d135      	bne.n	800640e <HAL_UART_Init+0x9e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	6859      	ldr	r1, [r3, #4]
 80063a6:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
 80063aa:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063ac:	6899      	ldr	r1, [r3, #8]
 80063ae:	f021 012a 	bic.w	r1, r1, #42	; 0x2a
 80063b2:	6099      	str	r1, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80063b4:	6819      	ldr	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063b6:	2500      	movs	r5, #0
  __HAL_UART_ENABLE(huart);
 80063b8:	f041 0101 	orr.w	r1, r1, #1
 80063bc:	6019      	str	r1, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063be:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
  tickstart = HAL_GetTick();
 80063c2:	f7fd f93f 	bl	8003644 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063c6:	6823      	ldr	r3, [r4, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80063cc:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063ce:	d40e      	bmi.n	80063ee <HAL_UART_Init+0x7e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	075b      	lsls	r3, r3, #29
 80063d4:	d427      	bmi.n	8006426 <HAL_UART_Init+0xb6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d6:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
  __HAL_UNLOCK(huart);
 80063de:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80063e2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  return HAL_OK;
 80063e6:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e8:	66e3      	str	r3, [r4, #108]	; 0x6c
}
 80063ea:	b002      	add	sp, #8
 80063ec:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	462a      	mov	r2, r5
 80063f6:	4603      	mov	r3, r0
 80063f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063fc:	4620      	mov	r0, r4
 80063fe:	f7ff ff3f 	bl	8006280 <UART_WaitOnFlagUntilTimeout>
 8006402:	b9e0      	cbnz	r0, 800643e <HAL_UART_Init+0xce>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	075b      	lsls	r3, r3, #29
 800640a:	d40c      	bmi.n	8006426 <HAL_UART_Init+0xb6>
 800640c:	e7e3      	b.n	80063d6 <HAL_UART_Init+0x66>
    UART_AdvFeatureConfig(huart);
 800640e:	4620      	mov	r0, r4
 8006410:	f7ff fede 	bl	80061d0 <UART_AdvFeatureConfig>
 8006414:	e7c5      	b.n	80063a2 <HAL_UART_Init+0x32>
    return HAL_ERROR;
 8006416:	2001      	movs	r0, #1
}
 8006418:	b002      	add	sp, #8
 800641a:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 800641c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    HAL_UART_MspInit(huart);
 8006420:	f7fc fac2 	bl	80029a8 <HAL_UART_MspInit>
 8006424:	e7ad      	b.n	8006382 <HAL_UART_Init+0x12>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006426:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	2200      	movs	r2, #0
 800642e:	4633      	mov	r3, r6
 8006430:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006434:	4620      	mov	r0, r4
 8006436:	f7ff ff23 	bl	8006280 <UART_WaitOnFlagUntilTimeout>
 800643a:	2800      	cmp	r0, #0
 800643c:	d0cb      	beq.n	80063d6 <HAL_UART_Init+0x66>
      return HAL_TIMEOUT;
 800643e:	2003      	movs	r0, #3
 8006440:	e7d3      	b.n	80063ea <HAL_UART_Init+0x7a>
    return HAL_ERROR;
 8006442:	2001      	movs	r0, #1
}
 8006444:	4770      	bx	lr
 8006446:	bf00      	nop

08006448 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006448:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800644c:	2b01      	cmp	r3, #1
 800644e:	d017      	beq.n	8006480 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006450:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006452:	2324      	movs	r3, #36	; 0x24
{
 8006454:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8006456:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800645a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800645c:	6814      	ldr	r4, [r2, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800645e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8006460:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006464:	f021 5100 	bic.w	r1, r1, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006468:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800646a:	6643      	str	r3, [r0, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800646c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800646e:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  huart->gState = HAL_UART_STATE_READY;
 8006472:	2220      	movs	r2, #32
 8006474:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84

  return HAL_OK;
}
 8006478:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800647c:	4618      	mov	r0, r3
}
 800647e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006480:	2002      	movs	r0, #2
}
 8006482:	4770      	bx	lr

08006484 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006484:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8006488:	2a01      	cmp	r2, #1
 800648a:	d037      	beq.n	80064fc <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800648c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800648e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006490:	2024      	movs	r0, #36	; 0x24
{
 8006492:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006494:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006498:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800649a:	6810      	ldr	r0, [r2, #0]
 800649c:	f020 0001 	bic.w	r0, r0, #1
 80064a0:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064a2:	6890      	ldr	r0, [r2, #8]
 80064a4:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 80064a8:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064aa:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80064ac:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80064ae:	b310      	cbz	r0, 80064f6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80064b0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064b2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80064b4:	4d12      	ldr	r5, [pc, #72]	; (8006500 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064b6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80064ba:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064be:	4911      	ldr	r1, [pc, #68]	; (8006504 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80064c0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064c4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80064c8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80064cc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064d0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80064d4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80064d8:	fbb1 f1f5 	udiv	r1, r1, r5
 80064dc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 80064e0:	2100      	movs	r1, #0
 80064e2:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064e8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80064ea:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 80064ee:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80064f0:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 80064f4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80064f6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80064f8:	4608      	mov	r0, r1
 80064fa:	e7ef      	b.n	80064dc <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80064fc:	2002      	movs	r0, #2
}
 80064fe:	4770      	bx	lr
 8006500:	08008d7c 	.word	0x08008d7c
 8006504:	08008d84 	.word	0x08008d84

08006508 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006508:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 800650c:	2a01      	cmp	r2, #1
 800650e:	d037      	beq.n	8006580 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8006510:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006512:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006514:	2024      	movs	r0, #36	; 0x24
{
 8006516:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8006518:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800651c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800651e:	6810      	ldr	r0, [r2, #0]
 8006520:	f020 0001 	bic.w	r0, r0, #1
 8006524:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006526:	6890      	ldr	r0, [r2, #8]
 8006528:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 800652c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800652e:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006530:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006532:	b310      	cbz	r0, 800657a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006534:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006536:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006538:	4d12      	ldr	r5, [pc, #72]	; (8006584 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800653a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800653e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006542:	4911      	ldr	r1, [pc, #68]	; (8006588 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006544:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006548:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 800654c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006550:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006554:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006556:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006558:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800655c:	fbb1 f1f5 	udiv	r1, r1, r5
 8006560:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006564:	2100      	movs	r1, #0
 8006566:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800656a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800656c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800656e:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
  return HAL_OK;
 8006572:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006574:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
}
 8006578:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800657a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800657c:	4608      	mov	r0, r1
 800657e:	e7ef      	b.n	8006560 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8006580:	2002      	movs	r0, #2
}
 8006582:	4770      	bx	lr
 8006584:	08008d7c 	.word	0x08008d7c
 8006588:	08008d84 	.word	0x08008d84

0800658c <VBS_GetAvBusVoltage_V>:
  */
__weak uint16_t VBS_GetAvBusVoltage_V( BusVoltageSensor_Handle_t * pHandle )
{
  uint32_t temp;

  temp = ( uint32_t )( pHandle->AvBusVoltage_d );
 800658c:	88c3      	ldrh	r3, [r0, #6]
  temp *= pHandle->ConversionFactor;
 800658e:	8840      	ldrh	r0, [r0, #2]
 8006590:	fb03 f000 	mul.w	r0, r3, r0
  temp /= 65536u;

  return ( ( uint16_t )temp );
}
 8006594:	0c00      	lsrs	r0, r0, #16
 8006596:	4770      	bx	lr

08006598 <Circle_Limitation>:
  * @param  pHandle pointer on the related component instance
  * @param  Vqd Voltage in qd reference frame
  * @retval qd_t Limited Vqd vector
  */
__weak qd_t Circle_Limitation( CircleLimitation_Handle_t * pHandle, qd_t Vqd )
{
 8006598:	140b      	asrs	r3, r1, #16
            ( int32_t )( Vqd.d ) * Vqd.d;

  uw_temp = ( uint32_t ) sw_temp;

  /* uw_temp min value 0, max value 32767*32767 */
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 800659a:	8802      	ldrh	r2, [r0, #0]
 800659c:	b209      	sxth	r1, r1
            ( int32_t )( Vqd.d ) * Vqd.d;
 800659e:	fb03 fc03 	mul.w	ip, r3, r3
  sw_temp = ( int32_t )( Vqd.q ) * Vqd.q +
 80065a2:	fb01 cc01 	mla	ip, r1, r1, ip
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065a6:	fb02 f202 	mul.w	r2, r2, r2
 80065aa:	4562      	cmp	r2, ip
{
 80065ac:	b084      	sub	sp, #16
  if ( uw_temp > ( uint32_t )( pHandle->MaxModule ) * pHandle->MaxModule )
 80065ae:	d21a      	bcs.n	80065e6 <Circle_Limitation+0x4e>
  {

    uw_temp /= ( uint32_t )( 16777216 );

    /* wtemp min value pHandle->Start_index, max value 127 */
    uw_temp -= pHandle->Start_index;
 80065b0:	f890 20b2 	ldrb.w	r2, [r0, #178]	; 0xb2
 80065b4:	ebc2 6c1c 	rsb	ip, r2, ip, lsr #24

    /* uw_temp min value 0, max value 127 - pHandle->Start_index */
    table_element = pHandle->Circle_limit_table[( uint8_t )uw_temp];
 80065b8:	fa5f fc8c 	uxtb.w	ip, ip
 80065bc:	eb00 004c 	add.w	r0, r0, ip, lsl #1

    sw_temp = Vqd.q * ( int32_t )table_element;
 80065c0:	8882      	ldrh	r2, [r0, #4]
 80065c2:	fb02 f101 	mul.w	r1, r2, r1
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065c6:	2900      	cmp	r1, #0

    sw_temp = Vqd.d * ( int32_t )( table_element );
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065cc:	bfbc      	itt	lt
 80065ce:	f501 41ff 	addlt.w	r1, r1, #32640	; 0x7f80
 80065d2:	317f      	addlt	r1, #127	; 0x7f
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	bfbc      	itt	lt
 80065d8:	f503 43ff 	addlt.w	r3, r3, #32640	; 0x7f80
 80065dc:	337f      	addlt	r3, #127	; 0x7f
    local_vqd.q = ( int16_t )( sw_temp / 32768 );
 80065de:	f341 31cf 	sbfx	r1, r1, #15, #16
    local_vqd.d = ( int16_t )( sw_temp / 32768 );
 80065e2:	f343 33cf 	sbfx	r3, r3, #15, #16
  }

  return ( local_vqd );
 80065e6:	b289      	uxth	r1, r1
 80065e8:	2000      	movs	r0, #0
 80065ea:	f361 000f 	bfi	r0, r1, #0, #16
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80065f4:	b004      	add	sp, #16
 80065f6:	4770      	bx	lr

080065f8 <DAC_SetChannelConfig>:
  */
__weak void DAC_SetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel,
                              MC_Protocol_REG_t bVariable)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->bChannel_variable[bChannel] = bVariable;
 80065f8:	4401      	add	r1, r0
 80065fa:	f881 2030 	strb.w	r2, [r1, #48]	; 0x30
}
 80065fe:	4770      	bx	lr

08006600 <DAC_GetChannelConfig>:
  *         MC_PROTOCOL_REG_I_A).
  */
__weak MC_Protocol_REG_t DAC_GetChannelConfig(UI_Handle_t *pHandle, DAC_Channel_t bChannel)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->bChannel_variable[bChannel]);
 8006600:	4401      	add	r1, r0
}
 8006602:	f891 0030 	ldrb.w	r0, [r1, #48]	; 0x30
 8006606:	4770      	bx	lr

08006608 <DAC_SetUserChannelValue>:
  */
__weak void DAC_SetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber,
                              int16_t hValue)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  pDacHandle->hUserValue[bUserChNumber] = hValue;
 8006608:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 800660c:	864a      	strh	r2, [r1, #50]	; 0x32
}
 800660e:	4770      	bx	lr

08006610 <DAC_GetUserChannelValue>:
  * @retval none.
  */
__weak int16_t DAC_GetUserChannelValue(UI_Handle_t *pHandle, uint8_t bUserChNumber)
{
  DAC_UI_Handle_t *pDacHandle = (DAC_UI_Handle_t *)pHandle;
  return (pDacHandle->hUserValue[bUserChNumber]);
 8006610:	eb00 0141 	add.w	r1, r0, r1, lsl #1
}
 8006614:	f9b1 0032 	ldrsh.w	r0, [r1, #50]	; 0x32
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop

0800661c <EAC_Init>:
               ENCODER_Handle_t * pENC )
{
  pHandle->pSTC = pSTC;
  pHandle->pVSS = pVSS;
  pHandle->pENC = pENC;
  pHandle->EncAligned = false;
 800661c:	f04f 0c00 	mov.w	ip, #0
  pHandle->pVSS = pVSS;
 8006620:	e9c0 1200 	strd	r1, r2, [r0]
  pHandle->pENC = pENC;
 8006624:	6083      	str	r3, [r0, #8]
  pHandle->EncAligned = false;
 8006626:	f8a0 c00e 	strh.w	ip, [r0, #14]
  pHandle->EncRestart = false;
}
 800662a:	4770      	bx	lr

0800662c <EAC_StartAlignment>:
  *         execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  * @retval none.
  */
__weak void EAC_StartAlignment( EncAlign_Handle_t * pHandle )
{
 800662c:	b510      	push	{r4, lr}
  uint32_t wAux;

  /* Set pVSS mechanical speed to zero.*/
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 800662e:	2200      	movs	r2, #0
{
 8006630:	4604      	mov	r4, r0
  VSS_SetMecAcceleration( pHandle->pVSS, 0, 0u );
 8006632:	4611      	mov	r1, r2
 8006634:	6840      	ldr	r0, [r0, #4]
 8006636:	f002 fa15 	bl	8008a64 <VSS_SetMecAcceleration>

  /* Set pVSS mechanical angle.*/
  VSS_SetMecAngle( pHandle->pVSS, pHandle->hElAngle );
 800663a:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800663e:	6860      	ldr	r0, [r4, #4]
 8006640:	f002 fa08 	bl	8008a54 <VSS_SetMecAngle>

  /* Set pSTC in STC_TORQUE_MODE.*/
  STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8006644:	6820      	ldr	r0, [r4, #0]
 8006646:	2100      	movs	r1, #0
 8006648:	f001 fcee 	bl	8008028 <STC_SetControlMode>

  /* Set starting torque to Zero */
  STC_ExecRamp( pHandle->pSTC, 0, 0u );
 800664c:	2200      	movs	r2, #0
 800664e:	4611      	mov	r1, r2
 8006650:	6820      	ldr	r0, [r4, #0]
 8006652:	f001 fced 	bl	8008030 <STC_ExecRamp>

  /* Execute the torque ramp.*/
  STC_ExecRamp( pHandle->pSTC, pHandle->hFinalTorque, ( uint32_t )( pHandle->hDurationms ) );
 8006656:	8ae2      	ldrh	r2, [r4, #22]
 8006658:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800665c:	6820      	ldr	r0, [r4, #0]
 800665e:	f001 fce7 	bl	8008030 <STC_ExecRamp>

  /* Compute hRemainingTicks, the number of thick of alignment phase.*/
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8006662:	8ae3      	ldrh	r3, [r4, #22]
 8006664:	8a21      	ldrh	r1, [r4, #16]
  wAux /= 1000u;
 8006666:	4a04      	ldr	r2, [pc, #16]	; (8006678 <EAC_StartAlignment+0x4c>)
  wAux = ( uint32_t )pHandle->hDurationms * ( uint32_t )pHandle->hEACFrequencyHz;
 8006668:	fb01 f303 	mul.w	r3, r1, r3
  wAux /= 1000u;
 800666c:	fba2 2303 	umull	r2, r3, r2, r3
 8006670:	099b      	lsrs	r3, r3, #6
  pHandle->hRemainingTicks = ( uint16_t )( wAux );
  pHandle->hRemainingTicks++;
 8006672:	3301      	adds	r3, #1
 8006674:	81a3      	strh	r3, [r4, #12]
}
 8006676:	bd10      	pop	{r4, pc}
 8006678:	10624dd3 	.word	0x10624dd3

0800667c <EAC_Exec>:
  */
__weak bool EAC_Exec( EncAlign_Handle_t * pHandle )
{
  bool retVal = true;

  if ( pHandle->hRemainingTicks > 0u )
 800667c:	8983      	ldrh	r3, [r0, #12]
 800667e:	b13b      	cbz	r3, 8006690 <EAC_Exec+0x14>
  {
    pHandle->hRemainingTicks--;
 8006680:	3b01      	subs	r3, #1
 8006682:	b29b      	uxth	r3, r3
{
 8006684:	b510      	push	{r4, lr}
 8006686:	4604      	mov	r4, r0
    pHandle->hRemainingTicks--;
 8006688:	8183      	strh	r3, [r0, #12]

    if ( pHandle->hRemainingTicks == 0u )
 800668a:	b11b      	cbz	r3, 8006694 <EAC_Exec+0x18>
      pHandle->EncAligned = true;
      retVal = true;
    }
    else
    {
      retVal = false;
 800668c:	2000      	movs	r0, #0
    }
  }

  return retVal;
}
 800668e:	bd10      	pop	{r4, pc}
  bool retVal = true;
 8006690:	2001      	movs	r0, #1
}
 8006692:	4770      	bx	lr
      ENC_SetMecAngle ( pHandle->pENC, pHandle->hElAngle / ( int16_t )( pHandle->bElToMecRatio ) );
 8006694:	7e03      	ldrb	r3, [r0, #24]
 8006696:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 800669a:	6880      	ldr	r0, [r0, #8]
 800669c:	fb91 f1f3 	sdiv	r1, r1, r3
 80066a0:	f000 f940 	bl	8006924 <ENC_SetMecAngle>
      pHandle->EncAligned = true;
 80066a4:	2001      	movs	r0, #1
 80066a6:	73a0      	strb	r0, [r4, #14]
}
 80066a8:	bd10      	pop	{r4, pc}
 80066aa:	bf00      	nop

080066ac <EAC_IsAligned>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_IsAligned( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncAligned;
}
 80066ac:	7b80      	ldrb	r0, [r0, #14]
 80066ae:	4770      	bx	lr

080066b0 <EAC_SetRestartState>:
  * @param  restart: Set to true if a restart is programmed else false
  * @retval none.
  */
__weak void EAC_SetRestartState( EncAlign_Handle_t * pHandle, bool restart )
{
  pHandle->EncRestart = restart;
 80066b0:	73c1      	strb	r1, [r0, #15]
}
 80066b2:	4770      	bx	lr

080066b4 <EAC_GetRestartState>:
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak bool EAC_GetRestartState( EncAlign_Handle_t * pHandle )
{
  return pHandle->EncRestart;
}
 80066b4:	7bc0      	ldrb	r0, [r0, #15]
 80066b6:	4770      	bx	lr

080066b8 <ENC_Init>:
  * @retval none
  */
__weak void ENC_Init( ENCODER_Handle_t * pHandle )
{

  TIM_TypeDef * TIMx = pHandle->TIMx;
 80066b8:	6a03      	ldr	r3, [r0, #32]
#endif
  /* Reset counter */
  LL_TIM_SetCounter ( TIMx, 0 );

  /*Calculations of convenience*/
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80066ba:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
{
 80066c4:	b410      	push	{r4}
 80066c6:	601a      	str	r2, [r3, #0]
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80066c8:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
 80066cc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80066d0:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80066d2:	2100      	movs	r1, #0
 80066d4:	6259      	str	r1, [r3, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80066d6:	f04f 34ff 	mov.w	r4, #4294967295
  pHandle->SpeedSamplingFreqUnit = pHandle->SpeedSamplingFreqHz * SPEED_UNIT;
 80066da:	6242      	str	r2, [r0, #36]	; 0x24
  pHandle->U32MAXdivPulseNumber = UINT32_MAX / ( uint32_t )( pHandle->PulseNumber );
 80066dc:	fbb4 f4fc 	udiv	r4, r4, ip
 80066e0:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80066e2:	699a      	ldr	r2, [r3, #24]

  /* Set IC filter for both channel 1 & 2*/
  LL_TIM_IC_SetFilter(TIMx, LL_TIM_CHANNEL_CH1, ( uint32_t )(pHandle->ICx_Filter << 20));
 80066e4:	f890 4077 	ldrb.w	r4, [r0, #119]	; 0x77
 80066e8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80066ec:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 80066f0:	619a      	str	r2, [r3, #24]
 80066f2:	699a      	ldr	r2, [r3, #24]
 80066f4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80066f8:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066fc:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006700:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006702:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006704:	68da      	ldr	r2, [r3, #12]
 8006706:	f042 0201 	orr.w	r2, r2, #1
 800670a:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	f042 0201 	orr.w	r2, r2, #1
 8006712:	601a      	str	r2, [r3, #0]

  /* Enable the counting timer*/
  LL_TIM_EnableCounter ( TIMx );

  /* Erase speed buffer */
  BufferSize = pHandle->SpeedBufferSize;
 8006714:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75

  for ( Index = 0u; Index < BufferSize; Index++ )
 8006718:	b12a      	cbz	r2, 8006726 <ENC_Init+0x6e>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
  }
}
 800671a:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->DeltaCapturesBuffer[Index] = 0;
 800671e:	0092      	lsls	r2, r2, #2
 8006720:	3028      	adds	r0, #40	; 0x28
 8006722:	f002 ba03 	b.w	8008b2c <memset>
}
 8006726:	f85d 4b04 	ldr.w	r4, [sp], #4
 800672a:	4770      	bx	lr

0800672c <ENC_Clear>:
*         the speed measurement process.
* @param  pHandle: handler of the current instance of the encoder component
* @retval none
*/
__weak void ENC_Clear( ENCODER_Handle_t * pHandle )
{
 800672c:	b510      	push	{r4, lr}
  uint8_t Index;
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 800672e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
{
 8006732:	4604      	mov	r4, r0
  for ( Index = 0u; Index < pHandle->SpeedBufferSize; Index++ )
 8006734:	b122      	cbz	r2, 8006740 <ENC_Clear+0x14>
  {
    pHandle->DeltaCapturesBuffer[Index] = 0;
 8006736:	0092      	lsls	r2, r2, #2
 8006738:	2100      	movs	r1, #0
 800673a:	3028      	adds	r0, #40	; 0x28
 800673c:	f002 f9f6 	bl	8008b2c <memset>
  }
  pHandle->SensorIsReliable = true;
 8006740:	2301      	movs	r3, #1
 8006742:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
}
 8006746:	bd10      	pop	{r4, pc}

08006748 <ENC_CalcAngle>:
  int32_t wtemp1;
  int16_t elAngle;  /* s16degree format */
  int16_t mecAngle; /* s16degree format */
  /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1 
   if the overflow occurs just after the entry in the High frequency task */
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8006748:	6a03      	ldr	r3, [r0, #32]
 800674a:	6e82      	ldr	r2, [r0, #104]	; 0x68
  return (uint32_t)(READ_REG(TIMx->CNT));
 800674c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800674e:	b410      	push	{r4}
  wtemp1 = ( int32_t )( LL_TIM_GetCounter( pHandle->TIMx ) & 0xffff ) *
 8006750:	b29b      	uxth	r3, r3
 8006752:	fb02 f303 	mul.w	r3, r2, r3
           ( int32_t )( pHandle->U32MAXdivPulseNumber );

  /*Computes and stores the rotor mechanical angle*/
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8006756:	2b00      	cmp	r3, #0
 8006758:	bfb8      	it	lt
 800675a:	f64f 71ff 	movwlt	r1, #65535	; 0xffff
  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;

  pHandle->_Super.hMecAngle = mecAngle;
  
  /*Computes and stores the rotor electrical angle*/
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800675e:	7842      	ldrb	r2, [r0, #1]

  pHandle->_Super.hElAngle = elAngle;
  
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8006760:	6884      	ldr	r4, [r0, #8]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8006762:	bfb8      	it	lt
 8006764:	185b      	addlt	r3, r3, r1
  int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006766:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 800676a:	141b      	asrs	r3, r3, #16
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 800676c:	fb03 f202 	mul.w	r2, r3, r2
  int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006770:	1a59      	subs	r1, r3, r1
  elAngle = mecAngle * pHandle->_Super.bElToMecRatio;
 8006772:	b212      	sxth	r2, r2
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 8006774:	fa04 f181 	sxtah	r1, r4, r1
  mecAngle = ( int16_t )( wtemp1 / 65536 );
 8006778:	80c3      	strh	r3, [r0, #6]
  pHandle->_Super.hElAngle = elAngle;
 800677a:	8082      	strh	r2, [r0, #4]
  pHandle->_Super.wMecAngle += (int32_t)(hMecSpeedDpp);
 800677c:	6081      	str	r1, [r0, #8]

  /*Returns rotor electrical angle*/
  return ( elAngle );
}
 800677e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006782:	4610      	mov	r0, r2
 8006784:	4770      	bx	lr
 8006786:	bf00      	nop

08006788 <ENC_CalcAvrgMecSpeedUnit>:
  *         (expressed in the unit defined by #SPEED_UNIT)
  * @retval true = sensor information is reliable
  *         false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit( ENCODER_Handle_t * pHandle, int16_t * pMecSpeedUnit )
{
 8006788:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800678a:	6a03      	ldr	r3, [r0, #32]
  int32_t wOverallAngleVariation = 0;
  int32_t wtemp1;
  int32_t wtemp2;
  uint8_t bBufferIndex = 0u;
  bool bReliability = true;
  uint8_t bBufferSize = pHandle->SpeedBufferSize;
 800678c:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006790:	68dc      	ldr	r4, [r3, #12]
 8006792:	f024 0401 	bic.w	r4, r4, #1
 8006796:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006798:	6a5c      	ldr	r4, [r3, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
  /* disable Interrupt generation */
  LL_TIM_DisableIT_UPDATE ( TIMx );
#endif
  CntCapture =  LL_TIM_GetCounter ( TIMx );
  OverflowCntSample = pHandle->TimerOverflowNb;
 800679a:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
  pHandle->TimerOverflowNb = 0;
  directionSample =  LL_TIM_GetDirection( TIMx );
#ifdef TIM_CNT_UIFCPY
  OFbit = __LL_TIM_GETFLAG_UIFCPY( CntCapture );
  if ( OFbit )
 800679e:	ea5f 7cd4 	movs.w	ip, r4, lsr #31
  pHandle->TimerOverflowNb = 0;
 80067a2:	f04f 0600 	mov.w	r6, #0
 80067a6:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067aa:	bf18      	it	ne
 80067ac:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80067b0:	681e      	ldr	r6, [r3, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80067b2:	bf18      	it	ne
 80067b4:	611f      	strne	r7, [r3, #16]
  OverflowCntSample = pHandle->TimerOverflowNb;
 80067b6:	b2ad      	uxth	r5, r5
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
#endif
  /* If UIFCPY is not present, OverflowCntSample can not be used safely for
  speed computation, but we still use it to check that we do not exceed one overflow
  (sample frequency not less than mechanical motor speed */
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 80067b8:	4465      	add	r5, ip
  CLEAR_BIT( CntCapture, TIM_CNT_UIFCPY );
 80067ba:	f024 4c00 	bic.w	ip, r4, #2147483648	; 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80067be:	68dc      	ldr	r4, [r3, #12]
  if ( ( OverflowCntSample + OFbit ) > ENC_MAX_OVERFLOW_NB )
 80067c0:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80067c4:	f044 0401 	orr.w	r4, r4, #1
 80067c8:	60dc      	str	r4, [r3, #12]
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80067ca:	f006 0610 	and.w	r6, r6, #16
  {
    pHandle->TimerOverflowError = true;
 80067ce:	bf8a      	itet	hi
 80067d0:	2401      	movhi	r4, #1
  {
    pHandle->DeltaCapturesIndex = 0u;
  }

  /*Checks the reliability status, then stores and returns it*/
  if ( pHandle->TimerOverflowError )
 80067d2:	f890 4079 	ldrbls.w	r4, [r0, #121]	; 0x79
    pHandle->TimerOverflowError = true;
 80067d6:	f880 4079 	strbhi.w	r4, [r0, #121]	; 0x79
  if ( directionSample == LL_TIM_COUNTERDIRECTION_DOWN )
 80067da:	2e00      	cmp	r6, #0
 80067dc:	f000 808c 	beq.w	80068f8 <ENC_CalcAvrgMecSpeedUnit+0x170>
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80067e0:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80067e4:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 80067e8:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80067ec:	360a      	adds	r6, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) -
 80067ee:	ebac 0303 	sub.w	r3, ip, r3
 80067f2:	fb0e 3515 	mls	r5, lr, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80067f6:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	f000 808c 	beq.w	8006918 <ENC_CalcAvrgMecSpeedUnit+0x190>
 8006800:	2a01      	cmp	r2, #1
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006802:	6a83      	ldr	r3, [r0, #40]	; 0x28
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006804:	d039      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006806:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006808:	2a02      	cmp	r2, #2
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800680a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800680c:	d035      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800680e:	6b05      	ldr	r5, [r0, #48]	; 0x30
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006810:	2a03      	cmp	r2, #3
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006812:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006814:	d031      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006816:	6b45      	ldr	r5, [r0, #52]	; 0x34
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006818:	2a04      	cmp	r2, #4
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800681a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800681c:	d02d      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800681e:	6b85      	ldr	r5, [r0, #56]	; 0x38
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006820:	2a05      	cmp	r2, #5
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006822:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006824:	d029      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006826:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006828:	2a06      	cmp	r2, #6
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800682a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800682c:	d025      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800682e:	6c05      	ldr	r5, [r0, #64]	; 0x40
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006830:	2a07      	cmp	r2, #7
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006832:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006834:	d021      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006836:	6c45      	ldr	r5, [r0, #68]	; 0x44
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006838:	2a08      	cmp	r2, #8
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800683a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800683c:	d01d      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800683e:	6c85      	ldr	r5, [r0, #72]	; 0x48
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006840:	2a09      	cmp	r2, #9
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006842:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006844:	d019      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006846:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006848:	2a0a      	cmp	r2, #10
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800684a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800684c:	d015      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800684e:	6d05      	ldr	r5, [r0, #80]	; 0x50
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006850:	2a0b      	cmp	r2, #11
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006852:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006854:	d011      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006856:	6d45      	ldr	r5, [r0, #84]	; 0x54
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006858:	2a0c      	cmp	r2, #12
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800685a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800685c:	d00d      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800685e:	6d85      	ldr	r5, [r0, #88]	; 0x58
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006860:	2a0d      	cmp	r2, #13
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006862:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006864:	d009      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006866:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006868:	2a0e      	cmp	r2, #14
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800686a:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 800686c:	d005      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800686e:	6e05      	ldr	r5, [r0, #96]	; 0x60
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006870:	2a0f      	cmp	r2, #15
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006872:	442b      	add	r3, r5
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006874:	d001      	beq.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
    wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006876:	6e45      	ldr	r5, [r0, #100]	; 0x64
 8006878:	442b      	add	r3, r5
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 800687a:	6a45      	ldr	r5, [r0, #36]	; 0x24
  wtemp2 = ( int32_t )( pHandle->PulseNumber ) *
 800687c:	fb0e fe02 	mul.w	lr, lr, r2
  wtemp1 = wOverallAngleVariation * ( int32_t )( pHandle->SpeedSamplingFreqUnit );
 8006880:	fb05 f303 	mul.w	r3, r5, r3
  wtemp1 /= wtemp2;
 8006884:	fb93 f3fe 	sdiv	r3, r3, lr
  *pMecSpeedUnit = ( int16_t )( wtemp1 );
 8006888:	b21e      	sxth	r6, r3
 800688a:	800e      	strh	r6, [r1, #0]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 800688c:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
 8006890:	350a      	adds	r5, #10
 8006892:	f850 5025 	ldr.w	r5, [r0, r5, lsl #2]
  pHandle->PreviousCapture = CntCapture;
 8006896:	f8a0 c072 	strh.w	ip, [r0, #114]	; 0x72
  pHandle->DeltaCapturesIndex++;
 800689a:	f890 c078 	ldrb.w	ip, [r0, #120]	; 0x78
 800689e:	f10c 0c01 	add.w	ip, ip, #1
 80068a2:	fa5f fc8c 	uxtb.w	ip, ip
 80068a6:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80068aa:	f8b0 c00c 	ldrh.w	ip, [r0, #12]
  pHandle->_Super.hAvrMecSpeedUnit = ( int16_t )wtemp1;
 80068ae:	8186      	strh	r6, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = ( int16_t )( wtemp1 -
 80068b0:	eba3 030c 	sub.w	r3, r3, ip
 80068b4:	8243      	strh	r3, [r0, #18]
           ( int32_t )( pHandle->SpeedSamplingFreqHz ) *
 80068b6:	f8b0 306c 	ldrh.w	r3, [r0, #108]	; 0x6c
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80068ba:	69c6      	ldr	r6, [r0, #28]
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 80068bc:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80068c0:	fb05 f303 	mul.w	r3, r5, r3
           ( int32_t )pHandle->_Super.bElToMecRatio;
 80068c4:	7845      	ldrb	r5, [r0, #1]
  wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] *
 80068c6:	fb05 f303 	mul.w	r3, r5, r3
  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 80068ca:	f890 5078 	ldrb.w	r5, [r0, #120]	; 0x78
  wtemp1 /= ( int32_t )( pHandle->PulseNumber );
 80068ce:	fb93 f3fc 	sdiv	r3, r3, ip
  if ( pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize )
 80068d2:	4295      	cmp	r5, r2
  wtemp1 *= ( int32_t )( pHandle->_Super.DPPConvFactor);
 80068d4:	fb06 f303 	mul.w	r3, r6, r3
  wtemp1 /= ( int32_t )( pHandle->_Super.hMeasurementFrequency );
 80068d8:	8b46      	ldrh	r6, [r0, #26]
 80068da:	fb93 f3f6 	sdiv	r3, r3, r6
  pHandle->_Super.hElSpeedDpp = ( int16_t )wtemp1;
 80068de:	81c3      	strh	r3, [r0, #14]
    pHandle->DeltaCapturesIndex = 0u;
 80068e0:	bf24      	itt	cs
 80068e2:	2300      	movcs	r3, #0
 80068e4:	f880 3078 	strbcs.w	r3, [r0, #120]	; 0x78
  if ( pHandle->TimerOverflowError )
 80068e8:	b1c4      	cbz	r4, 800691c <ENC_CalcAvrgMecSpeedUnit+0x194>
  {
    bReliability = false;
    pHandle->SensorIsReliable = false;
    pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80068ea:	78c2      	ldrb	r2, [r0, #3]
 80068ec:	7002      	strb	r2, [r0, #0]
    pHandle->SensorIsReliable = false;
 80068ee:	2300      	movs	r3, #0
 80068f0:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
  {
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
  }

  return ( bReliability );
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80068f8:	f890 6078 	ldrb.w	r6, [r0, #120]	; 0x78
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 80068fc:	f8b0 3072 	ldrh.w	r3, [r0, #114]	; 0x72
      ( ( int32_t )( OverflowCntSample ) + OFbit ) * ( int32_t )( pHandle->PulseNumber );
 8006900:	f8b0 e06e 	ldrh.w	lr, [r0, #110]	; 0x6e
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006904:	360a      	adds	r6, #10
      ( int32_t )( CntCapture ) - ( int32_t )( pHandle->PreviousCapture ) +
 8006906:	ebac 0303 	sub.w	r3, ip, r3
 800690a:	fb0e 3505 	mla	r5, lr, r5, r3
    pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800690e:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
  for ( bBufferIndex = 0u; bBufferIndex < bBufferSize; bBufferIndex++ )
 8006912:	2a00      	cmp	r2, #0
 8006914:	f47f af74 	bne.w	8006800 <ENC_CalcAvrgMecSpeedUnit+0x78>
  int32_t wOverallAngleVariation = 0;
 8006918:	4613      	mov	r3, r2
 800691a:	e7ae      	b.n	800687a <ENC_CalcAvrgMecSpeedUnit+0xf2>
}
 800691c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    bReliability = SPD_IsMecSpeedReliable( &pHandle->_Super, pMecSpeedUnit );
 8006920:	f001 bb10 	b.w	8007f44 <SPD_IsMecSpeedReliable>

08006924 <ENC_SetMecAngle>:

  uint16_t hAngleCounts;
  uint16_t hMecAngleuint;

  pHandle->_Super.hMecAngle = hMecAngle;
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006924:	7843      	ldrb	r3, [r0, #1]
  pHandle->_Super.hMecAngle = hMecAngle;
 8006926:	80c1      	strh	r1, [r0, #6]
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006928:	fb01 f303 	mul.w	r3, r1, r3
 800692c:	b28a      	uxth	r2, r1
  if ( hMecAngle < 0 )
 800692e:	2900      	cmp	r1, #0
  pHandle->_Super.hElAngle = hMecAngle * pHandle->_Super.bElToMecRatio;
 8006930:	8083      	strh	r3, [r0, #4]
 8006932:	bfbc      	itt	lt
 8006934:	f102 33ff 	addlt.w	r3, r2, #4294967295
 8006938:	b29a      	uxthlt	r2, r3
  {
    hMecAngleuint = ( uint16_t )hMecAngle;
  }

  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 800693a:	f8b0 306e 	ldrh.w	r3, [r0, #110]	; 0x6e
 800693e:	4906      	ldr	r1, [pc, #24]	; (8006958 <ENC_SetMecAngle+0x34>)
  hAngleCounts = ( uint16_t )( ( ( uint32_t )hMecAngleuint *
 8006940:	fb02 f303 	mul.w	r3, r2, r3
{
 8006944:	b410      	push	{r4}
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 8006946:	fba1 2303 	umull	r2, r3, r1, r3
  TIM_TypeDef * TIMx = pHandle->TIMx;
 800694a:	6a04      	ldr	r4, [r0, #32]
                                 ( uint32_t )pHandle->PulseNumber ) / 65535u );
 800694c:	0bdb      	lsrs	r3, r3, #15

  TIMx->CNT = ( uint16_t )( hAngleCounts );
 800694e:	6263      	str	r3, [r4, #36]	; 0x24
  
}
 8006950:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006954:	4770      	bx	lr
 8006956:	bf00      	nop
 8006958:	80008001 	.word	0x80008001

0800695c <ENC_IRQHandler>:
  * @param  pHandle: handler of the current instance of the encoder component
  * @param  flag used to distinguish between various IRQ sources
  * @retval none
  */
__weak void * ENC_IRQHandler( void * pHandleVoid )
{
 800695c:	4602      	mov	r2, r0
  /*Updates the number of overflows occurred*/
  /* the handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1u;

  return MC_NULL;
}
 800695e:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1u;
 8006960:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8006964:	3301      	adds	r3, #1
 8006966:	b29b      	uxth	r3, r3
 8006968:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop

08006970 <FCP_Init>:
 * @{
 */

__weak void FCP_Init( FCP_Handle_t * pHandle )
{
  pHandle->RxTimeoutCountdown = 0;
 8006970:	2300      	movs	r3, #0
 8006972:	8243      	strh	r3, [r0, #18]

  pHandle->TxFrame.Code = 0x0;
 8006974:	8283      	strh	r3, [r0, #20]
  pHandle->TxFrame.Size = 0;
  pHandle->TxFrame.FrameCRC = 0;
 8006976:	f8c0 3096 	str.w	r3, [r0, #150]	; 0x96
  pHandle->TxFrameState = FCP_TRANSFER_IDLE;
  pHandle->TxFrameLevel = 0;

  pHandle->RxFrame.Code = 0x0;
  pHandle->RxFrame.Size = 0;
 800697a:	f880 309a 	strb.w	r3, [r0, #154]	; 0x9a
  pHandle->RxFrame.FrameCRC = 0;
 800697e:	f8a0 311b 	strh.w	r3, [r0, #283]	; 0x11b
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
  pHandle->RxFrameLevel = 0;
 8006982:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
}
 8006986:	4770      	bx	lr

08006988 <FCP_SetClient>:
                    struct MCP_Handle_s * pClient,
                    FCP_SentFrameCallback_t pSentFrameCb,
                    FCP_ReceivedFrameCallback_t pReceviedFrameCb,
                    FCP_RxTimeoutCallback_t pRxTimeoutCb )
{
  if ( MC_NULL != pHandle )
 8006988:	b120      	cbz	r0, 8006994 <FCP_SetClient+0xc>
  {
    pHandle->ClientEntity = pClient;
    pHandle->ClientFrameSentCallback = pSentFrameCb;
 800698a:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->ClientFrameReceivedCallback = pReceviedFrameCb;
 800698e:	6083      	str	r3, [r0, #8]
    pHandle->ClientRxTimeoutCallback = pRxTimeoutCb;
 8006990:	9b00      	ldr	r3, [sp, #0]
 8006992:	60c3      	str	r3, [r0, #12]
  }
}
 8006994:	4770      	bx	lr
 8006996:	bf00      	nop

08006998 <FCP_CalcCRC>:
{
  uint8_t nCRC = 0;
  uint16_t nSum = 0;
  uint8_t idx;

  if( MC_NULL != pFrame )
 8006998:	b190      	cbz	r0, 80069c0 <FCP_CalcCRC+0x28>
  {
    nSum += pFrame->Code;
    nSum += pFrame->Size;
 800699a:	7841      	ldrb	r1, [r0, #1]
    nSum += pFrame->Code;
 800699c:	7802      	ldrb	r2, [r0, #0]
    nSum += pFrame->Size;
 800699e:	1853      	adds	r3, r2, r1

    for ( idx = 0; idx < pFrame->Size; idx++ )
 80069a0:	b151      	cbz	r1, 80069b8 <FCP_CalcCRC+0x20>
 80069a2:	1c82      	adds	r2, r0, #2
 80069a4:	3901      	subs	r1, #1
 80069a6:	3001      	adds	r0, #1
 80069a8:	fa52 f181 	uxtab	r1, r2, r1
    {
      nSum += pFrame->Buffer[idx];
 80069ac:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80069b0:	4413      	add	r3, r2
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80069b2:	4281      	cmp	r1, r0
      nSum += pFrame->Buffer[idx];
 80069b4:	b29b      	uxth	r3, r3
    for ( idx = 0; idx < pFrame->Size; idx++ )
 80069b6:	d1f9      	bne.n	80069ac <FCP_CalcCRC+0x14>
    }

    nCRC = (uint8_t)(nSum & 0xFF) ; // Low Byte of nSum
    nCRC += (uint8_t) (nSum >> 8) ; // High Byte of nSum
 80069b8:	eb03 2013 	add.w	r0, r3, r3, lsr #8
 80069bc:	f000 00ff 	and.w	r0, r0, #255	; 0xff
  }

  return nCRC ;
}
 80069c0:	4770      	bx	lr
 80069c2:	bf00      	nop

080069c4 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear( MotorPowMeas_Handle_t * pHandle )
{
 80069c4:	b510      	push	{r4, lr}
  uint16_t i;
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    pHandle->hMeasBuffer[i] = 0;
 80069c6:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80069ca:	4604      	mov	r4, r0
    pHandle->hMeasBuffer[i] = 0;
 80069cc:	2100      	movs	r1, #0
 80069ce:	f002 f8ad 	bl	8008b2c <memset>
  }
  pHandle->hNextMeasBufferIndex = 0u;
 80069d2:	2300      	movs	r3, #0
 80069d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = 0u;

}
 80069d8:	bd10      	pop	{r4, pc}
 80069da:	bf00      	nop

080069dc <MPM_CalcElMotorPower>:
{
  uint16_t i;
  int32_t wAux = 0;

  /* Store the measured values in the buffer.*/
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80069dc:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
  pHandle->hNextMeasBufferIndex++;
 80069e0:	1c53      	adds	r3, r2, #1
 80069e2:	b29b      	uxth	r3, r3
  if ( pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT )
 80069e4:	2b7f      	cmp	r3, #127	; 0x7f
  {
    pHandle->hNextMeasBufferIndex = 0u;
 80069e6:	bf88      	it	hi
 80069e8:	2300      	movhi	r3, #0
{
 80069ea:	b500      	push	{lr}
  pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80069ec:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
  pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80069f0:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80069f4:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
    pHandle->hNextMeasBufferIndex = 0u;
 80069f8:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
  int32_t wAux = 0;
 80069fc:	2200      	movs	r2, #0
 80069fe:	1e83      	subs	r3, r0, #2
  }
  /* Compute the average measured motor power */
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
  {
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006a00:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006a04:	4573      	cmp	r3, lr
    wAux += ( int32_t )( pHandle->hMeasBuffer[i] );
 8006a06:	4462      	add	r2, ip
  for ( i = 0u; i < MPM_BUFFER_LENGHT; i++ )
 8006a08:	d1fa      	bne.n	8006a00 <MPM_CalcElMotorPower+0x24>
  }
  wAux /= ( int32_t )MPM_BUFFER_LENGHT;
 8006a0a:	2a00      	cmp	r2, #0
 8006a0c:	bfb8      	it	lt
 8006a0e:	327f      	addlt	r2, #127	; 0x7f
 8006a10:	11d2      	asrs	r2, r2, #7
  pHandle->hAvrgElMotorPowerW = ( int16_t )( wAux );
 8006a12:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006a16:	4608      	mov	r0, r1
 8006a18:	f85d fb04 	ldr.w	pc, [sp], #4

08006a1c <MPM_GetAvrgElMotorPowerW>:
  * @retval int16_t The average measured motor power expressed in watt.
  */
__weak int16_t MPM_GetAvrgElMotorPowerW( MotorPowMeas_Handle_t * pHandle )
{
  return ( pHandle->hAvrgElMotorPowerW );
}
 8006a1c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006a20:	4770      	bx	lr
 8006a22:	bf00      	nop

08006a24 <NTC_SetFaultState>:
  */
__weak uint16_t NTC_SetFaultState( NTC_Handle_t * pHandle )
{
  uint16_t hFault;

  if ( pHandle->hAvTemp_d > pHandle->hOverTempThreshold )
 8006a24:	8a03      	ldrh	r3, [r0, #16]
 8006a26:	8b42      	ldrh	r2, [r0, #26]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d306      	bcc.n	8006a3a <NTC_SetFaultState+0x16>
  {
    hFault = MC_OVER_TEMP;
  }
  else if ( pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold )
 8006a2c:	8b82      	ldrh	r2, [r0, #28]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d901      	bls.n	8006a36 <NTC_SetFaultState+0x12>
  {
    hFault = MC_NO_ERROR;
 8006a32:	2000      	movs	r0, #0
  else
  {
    hFault = pHandle->hFaultState;
  }
  return hFault;
}
 8006a34:	4770      	bx	lr
    hFault = pHandle->hFaultState;
 8006a36:	8ac0      	ldrh	r0, [r0, #22]
 8006a38:	4770      	bx	lr
    hFault = MC_OVER_TEMP;
 8006a3a:	2008      	movs	r0, #8
 8006a3c:	4770      	bx	lr
 8006a3e:	bf00      	nop

08006a40 <NTC_Clear>:
 *
 *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
 */
__weak void NTC_Clear( NTC_Handle_t * pHandle )
{
  pHandle->hAvTemp_d = 0u;
 8006a40:	2300      	movs	r3, #0
 8006a42:	8203      	strh	r3, [r0, #16]
}
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop

08006a48 <NTC_Init>:
{
 8006a48:	b510      	push	{r4, lr}
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a4a:	7803      	ldrb	r3, [r0, #0]
{
 8006a4c:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a4e:	b123      	cbz	r3, 8006a5a <NTC_Init+0x12>
    pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006a50:	8a43      	ldrh	r3, [r0, #18]
 8006a52:	8203      	strh	r3, [r0, #16]
    pHandle->hFaultState = MC_NO_ERROR;
 8006a54:	2200      	movs	r2, #0
 8006a56:	82c2      	strh	r2, [r0, #22]
}
 8006a58:	bd10      	pop	{r4, pc}
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8006a5a:	3004      	adds	r0, #4
 8006a5c:	f7fb fb8a 	bl	8002174 <RCM_RegisterRegConv>
 8006a60:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    NTC_Clear( pHandle );
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7ff ffeb 	bl	8006a40 <NTC_Clear>
}
 8006a6a:	bd10      	pop	{r4, pc}

08006a6c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp( NTC_Handle_t * pHandle )
{
 8006a6c:	b510      	push	{r4, lr}
  uint32_t wtemp;
  uint16_t hAux;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a6e:	7803      	ldrb	r3, [r0, #0]
{
 8006a70:	4604      	mov	r4, r0
  if ( pHandle->bSensorType == REAL_SENSOR )
 8006a72:	b113      	cbz	r3, 8006a7a <NTC_CalcAvTemp+0xe>

    pHandle->hFaultState = NTC_SetFaultState( pHandle );
  }
  else  /* case VIRTUAL_SENSOR */
  {
    pHandle->hFaultState = MC_NO_ERROR;
 8006a74:	2000      	movs	r0, #0
 8006a76:	82e0      	strh	r0, [r4, #22]
  }

  return ( pHandle->hFaultState );
}
 8006a78:	bd10      	pop	{r4, pc}
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006a7a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006a7e:	f7fb fc61 	bl	8002344 <RCM_ExecRegularConv>
    if ( hAux != 0xFFFFu )
 8006a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006a86:	4298      	cmp	r0, r3
 8006a88:	d007      	beq.n	8006a9a <NTC_CalcAvTemp+0x2e>
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a8a:	8b23      	ldrh	r3, [r4, #24]
      wtemp *= ( uint32_t ) ( pHandle->hAvTemp_d );
 8006a8c:	8a22      	ldrh	r2, [r4, #16]
      wtemp =  ( uint32_t )( pHandle->hLowPassFilterBW ) - 1u;
 8006a8e:	1e59      	subs	r1, r3, #1
      wtemp += hAux;
 8006a90:	fb01 0002 	mla	r0, r1, r2, r0
      wtemp /= ( uint32_t )( pHandle->hLowPassFilterBW );
 8006a94:	fbb0 f0f3 	udiv	r0, r0, r3
      pHandle->hAvTemp_d = ( uint16_t ) wtemp;
 8006a98:	8220      	strh	r0, [r4, #16]
    pHandle->hFaultState = NTC_SetFaultState( pHandle );
 8006a9a:	4620      	mov	r0, r4
 8006a9c:	f7ff ffc2 	bl	8006a24 <NTC_SetFaultState>
 8006aa0:	82e0      	strh	r0, [r4, #22]
}
 8006aa2:	bd10      	pop	{r4, pc}

08006aa4 <NTC_GetAvTemp_C>:
  */
__weak int16_t NTC_GetAvTemp_C( NTC_Handle_t * pHandle )
{
  int32_t wTemp;

  if ( pHandle->bSensorType == REAL_SENSOR )
 8006aa4:	7803      	ldrb	r3, [r0, #0]
 8006aa6:	b983      	cbnz	r3, 8006aca <NTC_GetAvTemp_C+0x26>
  {
    wTemp = ( int32_t )( pHandle->hAvTemp_d );
 8006aa8:	8a02      	ldrh	r2, [r0, #16]
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006aaa:	6a01      	ldr	r1, [r0, #32]
    wTemp *= pHandle->hSensitivity;
 8006aac:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006ab0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
    wTemp -= ( int32_t )( pHandle->wV0 );
 8006ab2:	1a52      	subs	r2, r2, r1
    wTemp *= pHandle->hSensitivity;
 8006ab4:	fb02 f303 	mul.w	r3, r2, r3
    wTemp = wTemp / 65536 + ( int32_t )( pHandle->hT0 );
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfbc      	itt	lt
 8006abc:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8006ac0:	33ff      	addlt	r3, #255	; 0xff
 8006ac2:	eb00 4023 	add.w	r0, r0, r3, asr #16
  else
  {
    wTemp = pHandle->hExpectedTemp_C;
  }
  return ( ( int16_t )wTemp );
}
 8006ac6:	b200      	sxth	r0, r0
 8006ac8:	4770      	bx	lr
    wTemp = pHandle->hExpectedTemp_C;
 8006aca:	8a80      	ldrh	r0, [r0, #20]
}
 8006acc:	b200      	sxth	r0, r0
 8006ace:	4770      	bx	lr

08006ad0 <PID_HandleInit>:
__weak void PID_HandleInit( PID_Handle_t * pHandle )
{
  pHandle->hKpGain =  pHandle->hDefKpGain;
  pHandle->hKiGain =  pHandle->hDefKiGain;
  pHandle->hKdGain =  pHandle->hDefKdGain;
  pHandle->wIntegralTerm = 0x00000000UL;
 8006ad0:	2300      	movs	r3, #0
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006ad2:	6801      	ldr	r1, [r0, #0]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006ad4:	8c02      	ldrh	r2, [r0, #32]
  pHandle->hKpGain =  pHandle->hDefKpGain;
 8006ad6:	6041      	str	r1, [r0, #4]
  pHandle->hKdGain =  pHandle->hDefKdGain;
 8006ad8:	8442      	strh	r2, [r0, #34]	; 0x22
  pHandle->wIntegralTerm = 0x00000000UL;
 8006ada:	6083      	str	r3, [r0, #8]
  pHandle->wPrevProcessVarError = 0x00000000UL;
 8006adc:	6283      	str	r3, [r0, #40]	; 0x28
}
 8006ade:	4770      	bx	lr

08006ae0 <PID_SetKP>:
 * @param  hKpGain: new Kp gain
 * @retval None
 */
__weak void PID_SetKP( PID_Handle_t * pHandle, int16_t hKpGain )
{
  pHandle->hKpGain = hKpGain;
 8006ae0:	8081      	strh	r1, [r0, #4]
}
 8006ae2:	4770      	bx	lr

08006ae4 <PID_SetKI>:
 * @param  hKiGain: new Ki gain
 * @retval None
 */
__weak void PID_SetKI( PID_Handle_t * pHandle, int16_t hKiGain )
{
  pHandle->hKiGain = hKiGain;
 8006ae4:	80c1      	strh	r1, [r0, #6]
}
 8006ae6:	4770      	bx	lr

08006ae8 <PID_GetKP>:
 * @retval Kp gain
 */
__weak int16_t PID_GetKP( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpGain );
}
 8006ae8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <PID_GetKI>:
 * @retval Ki gain
 */
__weak int16_t PID_GetKI( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiGain );
}
 8006af0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <PID_SetIntegralTerm>:
 * @param  wIntegralTermValue: new integral term value
 * @retval None
 */
__weak void PID_SetIntegralTerm( PID_Handle_t * pHandle, int32_t wIntegralTermValue )
{
  pHandle->wIntegralTerm = wIntegralTermValue;
 8006af8:	6081      	str	r1, [r0, #8]

  return;
}
 8006afa:	4770      	bx	lr

08006afc <PID_GetKPDivisor>:
 * @retval Kp gain divisor
 */
__weak uint16_t PID_GetKPDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKpDivisor );
}
 8006afc:	8b00      	ldrh	r0, [r0, #24]
 8006afe:	4770      	bx	lr

08006b00 <PID_GetKIDivisor>:
 * @retval Ki gain divisor
 */
__weak uint16_t PID_GetKIDivisor( PID_Handle_t * pHandle )
{
  return ( pHandle->hKiDivisor );
}
 8006b00:	8b40      	ldrh	r0, [r0, #26]
 8006b02:	4770      	bx	lr

08006b04 <PID_SetKD>:
 * @param  hKdGain: new Kd gain
 * @retval None
 */
__weak void PID_SetKD( PID_Handle_t * pHandle, int16_t hKdGain )
{
  pHandle->hKdGain = hKdGain;
 8006b04:	8441      	strh	r1, [r0, #34]	; 0x22
}
 8006b06:	4770      	bx	lr

08006b08 <PID_GetKD>:
 * @retval Kd gain
 */
__weak int16_t PID_GetKD( PID_Handle_t * pHandle )
{
  return pHandle->hKdGain;
}
 8006b08:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop

08006b10 <PI_Controller>:
  int32_t wDischarge = 0;
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

  /* Proportional term computation*/
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b10:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

  /* Integral term computation */
  if ( pHandle->hKiGain == 0 )
 8006b14:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
  int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006b18:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8006b1c:	b510      	push	{r4, lr}
  wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006b1e:	fb01 f303 	mul.w	r3, r1, r3
  int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006b22:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
  if ( pHandle->hKiGain == 0 )
 8006b26:	b162      	cbz	r2, 8006b42 <PI_Controller+0x32>
  {
    pHandle->wIntegralTerm = 0;
  }
  else
  {
    wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006b28:	fb01 f202 	mul.w	r2, r1, r2
    wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8006b2c:	6881      	ldr	r1, [r0, #8]

    if ( wIntegral_sum_temp < 0 )
 8006b2e:	188c      	adds	r4, r1, r2
 8006b30:	d420      	bmi.n	8006b74 <PI_Controller+0x64>
        }
      }
    }
    else
    {
      if ( pHandle->wIntegralTerm < 0 )
 8006b32:	2900      	cmp	r1, #0
 8006b34:	db2a      	blt.n	8006b8c <PI_Controller+0x7c>
          wIntegral_sum_temp = -INT32_MAX;
        }
      }
    }

    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b36:	68c2      	ldr	r2, [r0, #12]
 8006b38:	42a2      	cmp	r2, r4
 8006b3a:	db02      	blt.n	8006b42 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
    }
    else if ( wIntegral_sum_temp < pHandle->wLowerIntegralLimit )
 8006b3c:	6902      	ldr	r2, [r0, #16]
 8006b3e:	42a2      	cmp	r2, r4
 8006b40:	dd22      	ble.n	8006b88 <PI_Controller+0x78>
#else
  /* WARNING: the below instruction is not MISRA compliant, user should verify
             that Cortex-M3 assembly instruction ASR (arithmetic shift right)
             is used by the compiler to perform the shifts (instead of LSR
             logical shift right)*/
  wOutput_32 = ( wProportional_Term >> pHandle->hKpDivisorPOW2 ) + ( pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2 );
 8006b42:	8b81      	ldrh	r1, [r0, #28]
 8006b44:	410b      	asrs	r3, r1
 8006b46:	8bc1      	ldrh	r1, [r0, #30]
 8006b48:	fa42 f101 	asr.w	r1, r2, r1
 8006b4c:	440b      	add	r3, r1
#endif

  if ( wOutput_32 > hUpperOutputLimit )
 8006b4e:	459c      	cmp	ip, r3
 8006b50:	da05      	bge.n	8006b5e <PI_Controller+0x4e>
  {

    wDischarge = hUpperOutputLimit - wOutput_32;
 8006b52:	ebac 0303 	sub.w	r3, ip, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
    wOutput_32 = hLowerOutputLimit;
  }
  else { /* Nothing to do here */ }

  pHandle->wIntegralTerm += wDischarge;
 8006b56:	441a      	add	r2, r3
 8006b58:	6082      	str	r2, [r0, #8]

  return ( ( int16_t )( wOutput_32 ) );
}
 8006b5a:	4660      	mov	r0, ip
 8006b5c:	bd10      	pop	{r4, pc}
  else if ( wOutput_32 < hLowerOutputLimit )
 8006b5e:	459e      	cmp	lr, r3
    wDischarge = hLowerOutputLimit - wOutput_32;
 8006b60:	bfc9      	itett	gt
 8006b62:	ebae 0303 	subgt.w	r3, lr, r3
  return ( ( int16_t )( wOutput_32 ) );
 8006b66:	fa0f fc83 	sxthle.w	ip, r3
  pHandle->wIntegralTerm += wDischarge;
 8006b6a:	18d2      	addgt	r2, r2, r3
 8006b6c:	46f4      	movgt	ip, lr
 8006b6e:	6082      	str	r2, [r0, #8]
}
 8006b70:	4660      	mov	r0, ip
 8006b72:	bd10      	pop	{r4, pc}
      if ( pHandle->wIntegralTerm > 0 )
 8006b74:	2900      	cmp	r1, #0
 8006b76:	ddde      	ble.n	8006b36 <PI_Controller+0x26>
        if ( wIntegral_Term > 0 )
 8006b78:	2a00      	cmp	r2, #0
 8006b7a:	dddc      	ble.n	8006b36 <PI_Controller+0x26>
    if ( wIntegral_sum_temp > pHandle->wUpperIntegralLimit )
 8006b7c:	68c2      	ldr	r2, [r0, #12]
 8006b7e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006b82:	428a      	cmp	r2, r1
 8006b84:	d1dd      	bne.n	8006b42 <PI_Controller+0x32>
          wIntegral_sum_temp = INT32_MAX;
 8006b86:	4614      	mov	r4, r2
 8006b88:	4622      	mov	r2, r4
 8006b8a:	e7da      	b.n	8006b42 <PI_Controller+0x32>
          wIntegral_sum_temp = -INT32_MAX;
 8006b8c:	4902      	ldr	r1, [pc, #8]	; (8006b98 <PI_Controller+0x88>)
 8006b8e:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8006b92:	bf28      	it	cs
 8006b94:	460c      	movcs	r4, r1
 8006b96:	e7ce      	b.n	8006b36 <PI_Controller+0x26>
 8006b98:	80000001 	.word	0x80000001

08006b9c <PID_Controller>:
{
  int32_t wDifferential_Term;
  int32_t wDeltaError;
  int32_t wTemp_output;

  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8006b9c:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	; 0x22
{
 8006ba0:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->hKdGain != 0 ) /* derivative terms not used */
 8006ba2:	b182      	cbz	r2, 8006bc6 <PID_Controller+0x2a>
  {
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006ba4:	6a84      	ldr	r4, [r0, #40]	; 0x28
#else
    /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right)
    is used by the compiler to perform the shifts (instead of LSR
    logical shift right)*/
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006ba6:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
#endif

    pHandle->wPrevProcessVarError = wProcessVarError;
 8006ba8:	6281      	str	r1, [r0, #40]	; 0x28
    wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006baa:	1b0c      	subs	r4, r1, r4
    wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8006bac:	fb02 f404 	mul.w	r4, r2, r4
    wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006bb0:	4605      	mov	r5, r0
 8006bb2:	411c      	asrs	r4, r3

    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8006bb4:	f7ff ffac 	bl	8006b10 <PI_Controller>

    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8006bb8:	f9b5 2014 	ldrsh.w	r2, [r5, #20]
    wTemp_output = PI_Controller( pHandle, wProcessVarError ) + wDifferential_Term;
 8006bbc:	4404      	add	r4, r0
    if ( wTemp_output > pHandle->hUpperOutputLimit )
 8006bbe:	42a2      	cmp	r2, r4
 8006bc0:	da06      	bge.n	8006bd0 <PID_Controller+0x34>
  else
  {
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
  }
  return ( ( int16_t ) wTemp_output );
}
 8006bc2:	4610      	mov	r0, r2
 8006bc4:	bd38      	pop	{r3, r4, r5, pc}
    wTemp_output = PI_Controller( pHandle, wProcessVarError );
 8006bc6:	f7ff ffa3 	bl	8006b10 <PI_Controller>
 8006bca:	4602      	mov	r2, r0
}
 8006bcc:	4610      	mov	r0, r2
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
    else if ( wTemp_output < pHandle->hLowerOutputLimit )
 8006bd0:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
  return ( ( int16_t ) wTemp_output );
 8006bd4:	4294      	cmp	r4, r2
 8006bd6:	bfb8      	it	lt
 8006bd8:	4614      	movlt	r4, r2
 8006bda:	b222      	sxth	r2, r4
}
 8006bdc:	4610      	mov	r0, r2
 8006bde:	bd38      	pop	{r3, r4, r5, pc}

08006be0 <PQD_CalcElMotorPower>:
  */
__weak void PQD_CalcElMotorPower( PQD_MotorPowMeas_Handle_t * pHandle )
{

  int32_t wAux, wAux2, wAux3;
  qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006be0:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006be4:	b570      	push	{r4, r5, r6, lr}
  qd_t Vqd = pHandle->pFOCVars->Vqd;
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006be6:	8b11      	ldrh	r1, [r2, #24]
 8006be8:	89d4      	ldrh	r4, [r2, #14]
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006bea:	8993      	ldrh	r3, [r2, #12]
 8006bec:	8ad2      	ldrh	r2, [r2, #22]
  wAux /= 65536;

  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bee:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8006bf2:	4605      	mov	r5, r0
         ( ( int32_t )Iqd.d * ( int32_t )Vqd.d );
 8006bf4:	fb14 f401 	smulbb	r4, r4, r1
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006bf8:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
  wAux = ( ( int32_t )Iqd.q * ( int32_t )Vqd.q ) +
 8006bfc:	fb13 4402 	smlabb	r4, r3, r2, r4
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006c00:	f7ff fcc4 	bl	800658c <VBS_GetAvBusVoltage_V>
  wAux /= 65536;
 8006c04:	1e23      	subs	r3, r4, #0
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c06:	490f      	ldr	r1, [pc, #60]	; (8006c44 <PQD_CalcElMotorPower+0x64>)
  wAux2 = pHandle->wConvFact * ( int32_t )VBS_GetAvBusVoltage_V( pHandle->pVBS );
 8006c08:	fb06 f000 	mul.w	r0, r6, r0
  wAux /= 65536;
 8006c0c:	bfb8      	it	lt
 8006c0e:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c12:	ea4f 72e0 	mov.w	r2, r0, asr #31
  wAux /= 65536;
 8006c16:	bfb8      	it	lt
 8006c18:	33ff      	addlt	r3, #255	; 0xff
  wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006c1a:	fb81 1000 	smull	r1, r0, r1, r0
 8006c1e:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
  wAux /= 65536;
 8006c22:	141b      	asrs	r3, r3, #16

  wAux3 = wAux * wAux2;
 8006c24:	fb00 f303 	mul.w	r3, r0, r3
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
  wAux3 /= 10;
  wAux3 /= 65536;
 8006c28:	4907      	ldr	r1, [pc, #28]	; (8006c48 <PQD_CalcElMotorPower+0x68>)
  wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8006c2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006c2e:	005b      	lsls	r3, r3, #1
  wAux3 /= 65536;
 8006c30:	fb81 2103 	smull	r2, r1, r1, r3
 8006c34:	17db      	asrs	r3, r3, #31

  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006c36:	4628      	mov	r0, r5
 8006c38:	ebc3 41a1 	rsb	r1, r3, r1, asr #18

}
 8006c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  MPM_CalcElMotorPower( &pHandle->_super, wAux3 );
 8006c40:	f7ff becc 	b.w	80069dc <MPM_CalcElMotorPower>
 8006c44:	1b4e81b5 	.word	0x1b4e81b5
 8006c48:	66666667 	.word	0x66666667

08006c4c <startTimers>:
 *          usually performed in the Init method accordingly with the configuration)
 * @param  none
 * @retval none
 */
__weak void startTimers( void )
{
 8006c4c:	b430      	push	{r4, r5}
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <startTimers+0x64>)
 8006c50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c52:	07d2      	lsls	r2, r2, #31
 8006c54:	b082      	sub	sp, #8
 8006c56:	d415      	bmi.n	8006c84 <startTimers+0x38>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8006c58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c5a:	f042 0201 	orr.w	r2, r2, #1
 8006c5e:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8006c60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c62:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006c66:	f002 0201 	and.w	r2, r2, #1
 8006c6a:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8006c6c:	9a01      	ldr	r2, [sp, #4]
 8006c6e:	694a      	ldr	r2, [r1, #20]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8006c76:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c78:	f022 0201 	bic.w	r2, r2, #1
 8006c7c:	659a      	str	r2, [r3, #88]	; 0x58
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput( TIM2, LL_TIM_TRGO_UPDATE );
    LL_TIM_GenerateEvent_UPDATE ( TIM2 );
    LL_TIM_SetTriggerOutput( TIM2, trigOut );
  }
}
 8006c7e:	b002      	add	sp, #8
 8006c80:	bc30      	pop	{r4, r5}
 8006c82:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg( TIM2, CR2 ) & TIM_CR2_MMS;
 8006c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006c88:	4c0a      	ldr	r4, [pc, #40]	; (8006cb4 <startTimers+0x68>)
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	6859      	ldr	r1, [r3, #4]
 8006c8e:	4d0a      	ldr	r5, [pc, #40]	; (8006cb8 <startTimers+0x6c>)
 8006c90:	4021      	ands	r1, r4
 8006c92:	f041 0120 	orr.w	r1, r1, #32
 8006c96:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006c98:	6958      	ldr	r0, [r3, #20]
 8006c9a:	f040 0001 	orr.w	r0, r0, #1
 8006c9e:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006ca0:	6859      	ldr	r1, [r3, #4]
 8006ca2:	402a      	ands	r2, r5
 8006ca4:	4021      	ands	r1, r4
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
}
 8006caa:	b002      	add	sp, #8
 8006cac:	bc30      	pop	{r4, r5}
 8006cae:	4770      	bx	lr
 8006cb0:	40021000 	.word	0x40021000
 8006cb4:	fdffff8f 	.word	0xfdffff8f
 8006cb8:	02000070 	.word	0x02000070

08006cbc <waitForPolarizationEnd>:
 *         repCnt: repetition counter value
 *         cnt: polarization counter value
 * @retval none
 */
__weak void waitForPolarizationEnd( TIM_TypeDef*  TIMx, uint16_t  *SWerror, uint8_t repCnt, volatile uint8_t *cnt )
{
 8006cbc:	b570      	push	{r4, r5, r6, lr}
  counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_CMS));
 8006cbe:	6804      	ldr	r4, [r0, #0]
  if (counter_mode == 0U)
 8006cc0:	f014 0460 	ands.w	r4, r4, #96	; 0x60
 8006cc4:	d11c      	bne.n	8006d00 <waitForPolarizationEnd+0x44>
    counter_mode = (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006cc6:	6804      	ldr	r4, [r0, #0]
  {
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
  }
  else
  {
	hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u)>>1);
 8006cc8:	3201      	adds	r2, #1
 8006cca:	0855      	lsrs	r5, r2, #1
 8006ccc:	016d      	lsls	r5, r5, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006cce:	f06f 0602 	mvn.w	r6, #2
 8006cd2:	6106      	str	r6, [r0, #16]
  }

  /* Wait for NB_CONVERSIONS to be executed */
  LL_TIM_ClearFlag_CC1(TIMx);
  hCalibrationPeriodCounter = 0u;
 8006cd4:	2200      	movs	r2, #0
  while (*cnt < NB_CONVERSIONS)
 8006cd6:	f893 c000 	ldrb.w	ip, [r3]
 8006cda:	f1bc 0f0f 	cmp.w	ip, #15
  {
    if (LL_TIM_IsActiveFlag_CC1(TIMx))
    {
      LL_TIM_ClearFlag_CC1(TIMx);
      hCalibrationPeriodCounter++;
 8006cde:	f102 0e01 	add.w	lr, r2, #1
  while (*cnt < NB_CONVERSIONS)
 8006ce2:	d80c      	bhi.n	8006cfe <waitForPolarizationEnd+0x42>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006ce4:	6904      	ldr	r4, [r0, #16]
 8006ce6:	07a4      	lsls	r4, r4, #30
 8006ce8:	d5f5      	bpl.n	8006cd6 <waitForPolarizationEnd+0x1a>
      hCalibrationPeriodCounter++;
 8006cea:	fa1f f28e 	uxth.w	r2, lr
      if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8006cee:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8006cf0:	6106      	str	r6, [r0, #16]
 8006cf2:	d8f0      	bhi.n	8006cd6 <waitForPolarizationEnd+0x1a>
      {
        if (*cnt < NB_CONVERSIONS)
 8006cf4:	781c      	ldrb	r4, [r3, #0]
 8006cf6:	2c0f      	cmp	r4, #15
 8006cf8:	d8ed      	bhi.n	8006cd6 <waitForPolarizationEnd+0x1a>
        {
          *SWerror = 1u;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	800b      	strh	r3, [r1, #0]
          break;
        }
      }
    }
  }
}
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
  if ( (LL_TIM_GetCounterMode(TIMx) & LL_TIM_COUNTERMODE_CENTER_UP_DOWN) == LL_TIM_COUNTERMODE_CENTER_UP_DOWN)
 8006d00:	2c60      	cmp	r4, #96	; 0x60
 8006d02:	d1e1      	bne.n	8006cc8 <waitForPolarizationEnd+0xc>
    hMaxPeriodsNumber=(2*NB_CONVERSIONS)*(((uint16_t)repCnt+1u));
 8006d04:	3201      	adds	r2, #1
 8006d06:	0155      	lsls	r5, r2, #5
 8006d08:	e7e1      	b.n	8006cce <waitForPolarizationEnd+0x12>
 8006d0a:	bf00      	nop

08006d0c <PWMC_GetPhaseCurrents>:
  * @param  pStator_Currents Pointer to the structure that will receive motor current
  *         of phase A and B in ElectricalValue format.
*/
__weak void PWMC_GetPhaseCurrents( PWMC_Handle_t * pHandle, ab_t * Iab )
{
  pHandle->pFctGetPhaseCurrents( pHandle, Iab );
 8006d0c:	6843      	ldr	r3, [r0, #4]
 8006d0e:	4718      	bx	r3

08006d10 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage( PWMC_Handle_t * pHandle, alphabeta_t Valfa_beta )
{
 8006d10:	b510      	push	{r4, lr}
  int32_t wX, wY, wZ, wUAlpha, wUBeta, wTimePhA, wTimePhB, wTimePhC;

  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006d12:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006d16:	8e03      	ldrh	r3, [r0, #48]	; 0x30
{
 8006d18:	b082      	sub	sp, #8
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006d1a:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8006d1e:	9101      	str	r1, [sp, #4]
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006d20:	fb04 fc0c 	mul.w	ip, r4, ip
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006d24:	b209      	sxth	r1, r1
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006d26:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
  wUAlpha = Valfa_beta.alpha * ( int32_t )pHandle->hT_Sqrt3;
 8006d2a:	fb03 f101 	mul.w	r1, r3, r1

  wX = wUBeta;
  wY = ( wUBeta + wUAlpha ) / 2;
 8006d2e:	eb01 034c 	add.w	r3, r1, ip, lsl #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006d32:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006d36:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006d3a:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

  /* Sector calculation from wX, wY, wZ */
  if ( wY < 0 )
 8006d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
  wUBeta = -( Valfa_beta.beta * ( int32_t )( pHandle->PWMperiod ) ) * 2;
 8006d42:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
  wY = ( wUBeta + wUAlpha ) / 2;
 8006d46:	ea4f 0e6e 	mov.w	lr, lr, asr #1
  wZ = ( wUBeta - wUAlpha ) / 2;
 8006d4a:	ea4f 0262 	mov.w	r2, r2, asr #1
  if ( wY < 0 )
 8006d4e:	db7d      	blt.n	8006e4c <PWMC_SetPhaseVoltage+0x13c>
        pHandle->highDuty = wTimePhA;
      }
  }
  else /* wY > 0 */
  {
    if ( wZ >= 0 )
 8006d50:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006d54:	db51      	blt.n	8006dfa <PWMC_SetPhaseVoltage+0xea>
    {
      pHandle->Sector = SECTOR_2;
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006d56:	ebbe 0e02 	subs.w	lr, lr, r2
 8006d5a:	bf44      	itt	mi
 8006d5c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006d60:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006d64:	2900      	cmp	r1, #0
 8006d66:	bfbc      	itt	lt
 8006d68:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006d6c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	bfb8      	it	lt
 8006d74:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006d78:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006d7c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006d80:	bfb8      	it	lt
 8006d82:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_2;
 8006d86:	f04f 0c01 	mov.w	ip, #1
      wTimePhB = wTimePhA + wZ / 131072;
 8006d8a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006d8e:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_2;
 8006d92:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhB;
 8006d96:	8781      	strh	r1, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006d98:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhC;
 8006d9a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40

  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
  
  if ( pHandle->DTTest == 1u )
 8006d9e:	f8b0 404e 	ldrh.w	r4, [r0, #78]	; 0x4e
 8006da2:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8006da6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8006daa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006dae:	b292      	uxth	r2, r2
 8006db0:	b289      	uxth	r1, r1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	2c01      	cmp	r4, #1
  pHandle->CntPhA = (uint16_t)(MAX(wTimePhA,0));
 8006db6:	8642      	strh	r2, [r0, #50]	; 0x32
  pHandle->CntPhB = (uint16_t)(MAX(wTimePhB,0));
 8006db8:	8681      	strh	r1, [r0, #52]	; 0x34
  pHandle->CntPhC = (uint16_t)(MAX(wTimePhC,0));
 8006dba:	86c3      	strh	r3, [r0, #54]	; 0x36
  if ( pHandle->DTTest == 1u )
 8006dbc:	d118      	bne.n	8006df0 <PWMC_SetPhaseVoltage+0xe0>
  {
    /* Dead time compensation */
    if ( pHandle->Ia > 0 )
 8006dbe:	f9b0 4048 	ldrsh.w	r4, [r0, #72]	; 0x48
 8006dc2:	2c00      	cmp	r4, #0
    {
      pHandle->CntPhA += pHandle->DTCompCnt;
 8006dc4:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
 8006dc8:	bfcc      	ite	gt
 8006dca:	1912      	addgt	r2, r2, r4
    }
    else
    {
      pHandle->CntPhA -= pHandle->DTCompCnt;
 8006dcc:	1b12      	suble	r2, r2, r4
 8006dce:	b292      	uxth	r2, r2
 8006dd0:	8642      	strh	r2, [r0, #50]	; 0x32
    }

    if ( pHandle->Ib > 0 )
 8006dd2:	f9b0 204a 	ldrsh.w	r2, [r0, #74]	; 0x4a
 8006dd6:	2a00      	cmp	r2, #0
    else
    {
      pHandle->CntPhB -= pHandle->DTCompCnt;
    }

    if ( pHandle->Ic > 0 )
 8006dd8:	f9b0 204c 	ldrsh.w	r2, [r0, #76]	; 0x4c
      pHandle->CntPhB += pHandle->DTCompCnt;
 8006ddc:	bfcc      	ite	gt
 8006dde:	1909      	addgt	r1, r1, r4
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006de0:	1b09      	suble	r1, r1, r4
    if ( pHandle->Ic > 0 )
 8006de2:	2a00      	cmp	r2, #0
      pHandle->CntPhB -= pHandle->DTCompCnt;
 8006de4:	b289      	uxth	r1, r1
    {
      pHandle->CntPhC += pHandle->DTCompCnt;
 8006de6:	bfcc      	ite	gt
 8006de8:	191b      	addgt	r3, r3, r4
    }
    else
    {
      pHandle->CntPhC -= pHandle->DTCompCnt;
 8006dea:	1b1b      	suble	r3, r3, r4
 8006dec:	8681      	strh	r1, [r0, #52]	; 0x34
 8006dee:	86c3      	strh	r3, [r0, #54]	; 0x36
    }
  }

  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006df0:	6983      	ldr	r3, [r0, #24]
}
 8006df2:	b002      	add	sp, #8
 8006df4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return ( pHandle->pFctSetADCSampPointSectX( pHandle ) );
 8006df8:	4718      	bx	r3
      if ( wX <= 0 )
 8006dfa:	f1bc 0f00 	cmp.w	ip, #0
 8006dfe:	dd4b      	ble.n	8006e98 <PWMC_SetPhaseVoltage+0x188>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e00:	ebbc 0e02 	subs.w	lr, ip, r2
 8006e04:	bf44      	itt	mi
 8006e06:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006e0a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006e0e:	2900      	cmp	r1, #0
 8006e10:	bfb8      	it	lt
 8006e12:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_1;
 8006e16:	f04f 0300 	mov.w	r3, #0
        wTimePhB = wTimePhA + wZ / 131072;
 8006e1a:	bfb8      	it	lt
 8006e1c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_1;
 8006e20:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e24:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006e26:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006e2a:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e2e:	bfb8      	it	lt
 8006e30:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006e34:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006e38:	bfb8      	it	lt
 8006e3a:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006e3e:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhA;
 8006e42:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006e44:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhC;
 8006e46:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8006e4a:	e7a8      	b.n	8006d9e <PWMC_SetPhaseVoltage+0x8e>
    if ( wZ < 0 )
 8006e4c:	f1b1 3fff 	cmp.w	r1, #4294967295
 8006e50:	db6f      	blt.n	8006f32 <PWMC_SetPhaseVoltage+0x222>
      if ( wX <= 0 )
 8006e52:	f1bc 0f00 	cmp.w	ip, #0
 8006e56:	dd46      	ble.n	8006ee6 <PWMC_SetPhaseVoltage+0x1d6>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e58:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006e5c:	bf48      	it	mi
 8006e5e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006e62:	f04f 0202 	mov.w	r2, #2
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e66:	bf48      	it	mi
 8006e68:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	bfb8      	it	lt
 8006e70:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_3;
 8006e74:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e78:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006e7c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - wY / 131072;
 8006e80:	bfb8      	it	lt
 8006e82:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8006e86:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006e8a:	eb03 416c 	add.w	r1, r3, ip, asr #17
        pHandle->lowDuty = wTimePhB;
 8006e8e:	8781      	strh	r1, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006e90:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006e92:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006e96:	e782      	b.n	8006d9e <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006e98:	ebbe 0e0c 	subs.w	lr, lr, ip
 8006e9c:	bf44      	itt	mi
 8006e9e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006ea2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhC = wTimePhA - wY / 131072;
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfb8      	it	lt
 8006eaa:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_6;
 8006eae:	f04f 0205 	mov.w	r2, #5
        wTimePhC = wTimePhA - wY / 131072;
 8006eb2:	bfb8      	it	lt
 8006eb4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_6;
 8006eb8:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
        wTimePhB = wTimePhC + wX / 131072;
 8006ebc:	f1bc 0100 	subs.w	r1, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wX ) / ( int32_t )262144 );
 8006ec0:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006ec4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006ec8:	bfb8      	it	lt
 8006eca:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
        wTimePhC = wTimePhA - wY / 131072;
 8006ece:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        wTimePhB = wTimePhC + wX / 131072;
 8006ed2:	bfb8      	it	lt
 8006ed4:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8006ed8:	eb03 4161 	add.w	r1, r3, r1, asr #17
        pHandle->lowDuty = wTimePhA;
 8006edc:	8782      	strh	r2, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhC;
 8006ede:	87c3      	strh	r3, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhB;
 8006ee0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006ee4:	e75b      	b.n	8006d9e <PWMC_SetPhaseVoltage+0x8e>
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006ee6:	ebbc 0e02 	subs.w	lr, ip, r2
 8006eea:	bf44      	itt	mi
 8006eec:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006ef0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + wZ / 131072;
 8006ef4:	2900      	cmp	r1, #0
 8006ef6:	bfb8      	it	lt
 8006ef8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        pHandle->Sector = SECTOR_4;
 8006efc:	f04f 0303 	mov.w	r3, #3
        wTimePhB = wTimePhA + wZ / 131072;
 8006f00:	bfb8      	it	lt
 8006f02:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_4;
 8006f06:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006f0a:	08a2      	lsrs	r2, r4, #2
        wTimePhC = wTimePhB - wX / 131072;
 8006f0c:	f1bc 0300 	subs.w	r3, ip, #0
        wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wX - wZ ) / ( int32_t )262144 );
 8006f10:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006f14:	bfb8      	it	lt
 8006f16:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
        wTimePhB = wTimePhA + wZ / 131072;
 8006f1a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhB - wX / 131072;
 8006f1e:	bfb8      	it	lt
 8006f20:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8006f24:	eba1 4363 	sub.w	r3, r1, r3, asr #17
        pHandle->lowDuty = wTimePhC;
 8006f28:	8783      	strh	r3, [r0, #60]	; 0x3c
        pHandle->midDuty = wTimePhB;
 8006f2a:	87c1      	strh	r1, [r0, #62]	; 0x3e
        pHandle->highDuty = wTimePhA;
 8006f2c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8006f30:	e735      	b.n	8006d9e <PWMC_SetPhaseVoltage+0x8e>
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006f32:	ebbe 0e02 	subs.w	lr, lr, r2
 8006f36:	bf44      	itt	mi
 8006f38:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8006f3c:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
      wTimePhB = wTimePhA + wZ / 131072;
 8006f40:	2900      	cmp	r1, #0
 8006f42:	bfbc      	itt	lt
 8006f44:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8006f48:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
      wTimePhC = wTimePhA - wY / 131072;
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfb8      	it	lt
 8006f50:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
      wTimePhA = ( int32_t )( pHandle->PWMperiod ) / 4 + ( ( wY - wZ ) / ( int32_t )262144 );
 8006f54:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8006f58:	eb02 42ae 	add.w	r2, r2, lr, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006f5c:	bfb8      	it	lt
 8006f5e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
      pHandle->Sector = SECTOR_5;
 8006f62:	f04f 0c04 	mov.w	ip, #4
      wTimePhB = wTimePhA + wZ / 131072;
 8006f66:	eb02 41a1 	add.w	r1, r2, r1, asr #18
      wTimePhC = wTimePhA - wY / 131072;
 8006f6a:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
      pHandle->Sector = SECTOR_5;
 8006f6e:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
      pHandle->lowDuty = wTimePhC;
 8006f72:	8783      	strh	r3, [r0, #60]	; 0x3c
      pHandle->midDuty = wTimePhA;
 8006f74:	87c2      	strh	r2, [r0, #62]	; 0x3e
      pHandle->highDuty = wTimePhB;
 8006f76:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 8006f7a:	e710      	b.n	8006d9e <PWMC_SetPhaseVoltage+0x8e>

08006f7c <PWMC_SwitchOffPWM>:
  * @brief  Switches PWM generation off, inactivating the outputs.
  * @param  pHandle Handle on the target instance of the PWMC component
  */
__weak void PWMC_SwitchOffPWM( PWMC_Handle_t * pHandle )
{
  pHandle->pFctSwitchOffPwm( pHandle );
 8006f7c:	6883      	ldr	r3, [r0, #8]
 8006f7e:	4718      	bx	r3

08006f80 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr( PWMC_Handle_t * pHandle, CRCAction_t action )
{
 8006f80:	b510      	push	{r4, lr}
 8006f82:	4604      	mov	r4, r0
 8006f84:	b082      	sub	sp, #8
  bool retVal = false;
  if ( action == CRC_START )
 8006f86:	b199      	cbz	r1, 8006fb0 <PWMC_CurrentReadingCalibr+0x30>
    {
      pHandle->pFctCurrReadingCalib( pHandle );
      retVal = true;
    }
  }
  else if ( action == CRC_EXEC )
 8006f88:	2901      	cmp	r1, #1
 8006f8a:	d002      	beq.n	8006f92 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8006f8c:	2000      	movs	r0, #0
  }
  else
  {
  }
  return retVal;
}
 8006f8e:	b002      	add	sp, #8
 8006f90:	bd10      	pop	{r4, pc}
    if ( pHandle->OffCalibrWaitTimeCounter > 0u )
 8006f92:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8006f96:	b1cb      	cbz	r3, 8006fcc <PWMC_CurrentReadingCalibr+0x4c>
      pHandle->OffCalibrWaitTimeCounter--;
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	9101      	str	r1, [sp, #4]
 8006f9e:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
      if ( pHandle->OffCalibrWaitTimeCounter == 0u )
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d1f2      	bne.n	8006f8c <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib( pHandle );
 8006fa6:	6903      	ldr	r3, [r0, #16]
 8006fa8:	4798      	blx	r3
        retVal = true;
 8006faa:	9901      	ldr	r1, [sp, #4]
 8006fac:	4608      	mov	r0, r1
 8006fae:	e7ee      	b.n	8006f8e <PWMC_CurrentReadingCalibr+0xe>
    PWMC_SwitchOffPWM( pHandle );
 8006fb0:	f7ff ffe4 	bl	8006f7c <PWMC_SwitchOffPWM>
    pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8006fb4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006fb8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
    if ( pHandle->OffCalibrWaitTicks == 0u )
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e5      	bne.n	8006f8c <PWMC_CurrentReadingCalibr+0xc>
      pHandle->pFctCurrReadingCalib( pHandle );
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	4798      	blx	r3
      retVal = true;
 8006fc6:	2001      	movs	r0, #1
}
 8006fc8:	b002      	add	sp, #8
 8006fca:	bd10      	pop	{r4, pc}
      retVal = true;
 8006fcc:	4608      	mov	r0, r1
}
 8006fce:	b002      	add	sp, #8
 8006fd0:	bd10      	pop	{r4, pc}
 8006fd2:	bf00      	nop

08006fd4 <PWMC_CheckOverCurrent>:
/** @brief Returns #MC_BREAK_IN if an over current condition was detected on the power stage
 *         controlled by the PWMC component pointed by  @p pHandle, since the last call to this function;
 *         returns #MC_NO_FAULTS otherwise. */
__weak uint16_t PWMC_CheckOverCurrent( PWMC_Handle_t * pHandle )
{
  return pHandle->pFctIsOverCurrentOccurred( pHandle );
 8006fd4:	69c3      	ldr	r3, [r0, #28]
 8006fd6:	4718      	bx	r3

08006fd8 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006fd8:	6883      	ldr	r3, [r0, #8]
 8006fda:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006fde:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fe2:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006fe4:	6883      	ldr	r3, [r0, #8]
 8006fe6:	00d9      	lsls	r1, r3, #3
    R3_2_TIMxInit( TIMx, &pHandle->_Super );
  }
}

static void R3_2_ADCxInit( ADC_TypeDef * ADCx )
{
 8006fe8:	b082      	sub	sp, #8
 8006fea:	d418      	bmi.n	800701e <R3_2_ADCxInit+0x46>
  
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006fec:	4b24      	ldr	r3, [pc, #144]	; (8007080 <R3_2_ADCxInit+0xa8>)
  MODIFY_REG(ADCx->CR,
 8006fee:	6882      	ldr	r2, [r0, #8]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4924      	ldr	r1, [pc, #144]	; (8007084 <R3_2_ADCxInit+0xac>)
 8006ff4:	099b      	lsrs	r3, r3, #6
 8006ff6:	f022 4210 	bic.w	r2, r2, #2415919104	; 0x90000000
 8006ffa:	fba1 1303 	umull	r1, r3, r1, r3
 8006ffe:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 8007002:	099b      	lsrs	r3, r3, #6
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800700a:	6082      	str	r2, [r0, #8]
 800700c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800700e:	9b01      	ldr	r3, [sp, #4]
 8007010:	b12b      	cbz	r3, 800701e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8007012:	9b01      	ldr	r3, [sp, #4]
 8007014:	3b01      	subs	r3, #1
 8007016:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007018:	9b01      	ldr	r3, [sp, #4]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1f9      	bne.n	8007012 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800701e:	6883      	ldr	r3, [r0, #8]
 8007020:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007024:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007028:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800702c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800702e:	6883      	ldr	r3, [r0, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	dbfc      	blt.n	800702e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007034:	6803      	ldr	r3, [r0, #0]
  /* ADC Enable (must be done after calibration) */
  /* ADC5-140924: Enabling the ADC by setting ADEN bit soon after polling ADCAL=0 
  * following a calibration phase, could have no effect on ADC 
  * within certain AHB/ADC clock ratio.
  */
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 8007036:	07da      	lsls	r2, r3, #31
 8007038:	d408      	bmi.n	800704c <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800703a:	4a13      	ldr	r2, [pc, #76]	; (8007088 <R3_2_ADCxInit+0xb0>)
 800703c:	6883      	ldr	r3, [r0, #8]
 800703e:	4013      	ands	r3, r2
 8007040:	f043 0301 	orr.w	r3, r3, #1
 8007044:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007046:	6803      	ldr	r3, [r0, #0]
 8007048:	07db      	lsls	r3, r3, #31
 800704a:	d5f7      	bpl.n	800703c <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800704c:	6882      	ldr	r2, [r0, #8]
 800704e:	490e      	ldr	r1, [pc, #56]	; (8007088 <R3_2_ADCxInit+0xb0>)
 8007050:	400a      	ands	r2, r1
 8007052:	f042 0208 	orr.w	r2, r2, #8
 8007056:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8007058:	6882      	ldr	r2, [r0, #8]
 800705a:	400a      	ands	r2, r1
 800705c:	f042 0220 	orr.w	r2, r2, #32
 8007060:	6082      	str	r2, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007062:	68c3      	ldr	r3, [r0, #12]
 8007064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007068:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800706c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007070:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->CR,
 8007072:	6883      	ldr	r3, [r0, #8]
 8007074:	400b      	ands	r3, r1
 8007076:	f043 0304 	orr.w	r3, r3, #4
 800707a:	6083      	str	r3, [r0, #8]
  /* TODO: check if not already done by MX */
  LL_ADC_INJ_SetQueueMode( ADCx, LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY );

  /* dummy conversion (ES0431 doc chap. 2.5.4) */
  LL_ADC_REG_StartConversion(ADCx);
 }
 800707c:	b002      	add	sp, #8
 800707e:	4770      	bx	lr
 8007080:	20000680 	.word	0x20000680
 8007084:	053e2d63 	.word	0x053e2d63
 8007088:	7fffffc0 	.word	0x7fffffc0

0800708c <R3_2_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800708c:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint8_t Sector;
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
 800708e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8007092:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007094:	689c      	ldr	r4, [r3, #8]
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 8007096:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800709a:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 800709c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[Sector];
 800709e:	682d      	ldr	r5, [r5, #0]
  ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[Sector];
 80070a0:	681e      	ldr	r6, [r3, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80070a2:	6863      	ldr	r3, [r4, #4]
 80070a4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ac:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 80070ae:	2a05      	cmp	r2, #5
 80070b0:	f200 809f 	bhi.w	80071f2 <R3_2_GetPhaseCurrents+0x166>
 80070b4:	e8df f002 	tbb	[pc, r2]
 80070b8:	031f1f38 	.word	0x031f1f38
 80070bc:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80070be:	6dc4      	ldr	r4, [r0, #92]	; 0x5c

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 80070c0:	4b4f      	ldr	r3, [pc, #316]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80070c2:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80070c4:	429c      	cmp	r4, r3
 80070c6:	da54      	bge.n	8007172 <R3_2_GetPhaseCurrents+0xe6>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 80070c8:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80070ca:	6e02      	ldr	r2, [r0, #96]	; 0x60

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 80070cc:	4d4c      	ldr	r5, [pc, #304]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 80070ce:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 80070d0:	42aa      	cmp	r2, r5
 80070d2:	da54      	bge.n	800717e <R3_2_GetPhaseCurrents+0xf2>

    default:
      break;
  }

  pHandle->_Super.Ia = Iab->a;
 80070d4:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = -INT16_MAX;
 80070d8:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80070da:	fa1f f38c 	uxth.w	r3, ip
 80070de:	f248 0201 	movw	r2, #32769	; 0x8001
 80070e2:	4413      	add	r3, r2
 80070e4:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 80070e6:	f8a0 504a 	strh.w	r5, [r0, #74]	; 0x4a
  pHandle->_Super.Ia = Iab->a;
 80070ea:	f8a0 c048 	strh.w	ip, [r0, #72]	; 0x48
}
 80070ee:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80070f0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
}
 80070f4:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80070f6:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
      if ( Aux < -INT16_MAX )
 80070f8:	4b41      	ldr	r3, [pc, #260]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 80070fa:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 80070fc:	429c      	cmp	r4, r3
 80070fe:	db32      	blt.n	8007166 <R3_2_GetPhaseCurrents+0xda>
      else  if ( Aux > INT16_MAX )
 8007100:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007104:	db69      	blt.n	80071da <R3_2_GetPhaseCurrents+0x14e>
        Iab->a = INT16_MAX;
 8007106:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800710a:	4613      	mov	r3, r2
 800710c:	800a      	strh	r2, [r1, #0]
 800710e:	4614      	mov	r4, r2
 8007110:	4694      	mov	ip, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007112:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8007114:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8007116:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8007118:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800711c:	db44      	blt.n	80071a8 <R3_2_GetPhaseCurrents+0x11c>
        Iab->b = INT16_MAX;
 800711e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007122:	804a      	strh	r2, [r1, #2]
 8007124:	4615      	mov	r5, r2
 8007126:	e7dc      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8007128:	6e04      	ldr	r4, [r0, #96]	; 0x60
      if ( Aux < -INT16_MAX )
 800712a:	4b35      	ldr	r3, [pc, #212]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 800712c:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 800712e:	429c      	cmp	r4, r3
 8007130:	db13      	blt.n	800715a <R3_2_GetPhaseCurrents+0xce>
      else  if ( Aux > INT16_MAX )
 8007132:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007136:	db44      	blt.n	80071c2 <R3_2_GetPhaseCurrents+0x136>
        Iab->b = INT16_MAX;
 8007138:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800713c:	461a      	mov	r2, r3
 800713e:	804b      	strh	r3, [r1, #2]
 8007140:	461c      	mov	r4, r3
 8007142:	461d      	mov	r5, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8007144:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007146:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8007148:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 800714a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800714e:	db23      	blt.n	8007198 <R3_2_GetPhaseCurrents+0x10c>
        Iab->a = INT16_MAX;
 8007150:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007154:	800b      	strh	r3, [r1, #0]
 8007156:	469c      	mov	ip, r3
 8007158:	e7c3      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = -INT16_MAX;
 800715a:	804b      	strh	r3, [r1, #2]
 800715c:	461c      	mov	r4, r3
 800715e:	f248 0201 	movw	r2, #32769	; 0x8001
 8007162:	461d      	mov	r5, r3
 8007164:	e7ee      	b.n	8007144 <R3_2_GetPhaseCurrents+0xb8>
        Iab->a = -INT16_MAX;
 8007166:	461c      	mov	r4, r3
 8007168:	800b      	strh	r3, [r1, #0]
 800716a:	46a4      	mov	ip, r4
 800716c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007170:	e7cf      	b.n	8007112 <R3_2_GetPhaseCurrents+0x86>
      else  if ( Aux > INT16_MAX )
 8007172:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007176:	db1e      	blt.n	80071b6 <R3_2_GetPhaseCurrents+0x12a>
        Iab->a = INT16_MAX;
 8007178:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800717c:	e7a4      	b.n	80070c8 <R3_2_GetPhaseCurrents+0x3c>
      else  if ( Aux > INT16_MAX )
 800717e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007182:	db22      	blt.n	80071ca <R3_2_GetPhaseCurrents+0x13e>
        Iab->b = INT16_MAX;
 8007184:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = Iab->a;
 8007188:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = INT16_MAX;
 800718c:	804b      	strh	r3, [r1, #2]
 800718e:	461a      	mov	r2, r3
 8007190:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007192:	fa1f f38c 	uxth.w	r3, ip
 8007196:	e7a4      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 8007198:	4e19      	ldr	r6, [pc, #100]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
 800719a:	42b4      	cmp	r4, r6
 800719c:	da23      	bge.n	80071e6 <R3_2_GetPhaseCurrents+0x15a>
        Iab->a = -INT16_MAX;
 800719e:	800e      	strh	r6, [r1, #0]
 80071a0:	f248 0301 	movw	r3, #32769	; 0x8001
 80071a4:	46b4      	mov	ip, r6
 80071a6:	e79c      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
      else  if ( Aux < -INT16_MAX )
 80071a8:	4d15      	ldr	r5, [pc, #84]	; (8007200 <R3_2_GetPhaseCurrents+0x174>)
 80071aa:	42aa      	cmp	r2, r5
 80071ac:	da05      	bge.n	80071ba <R3_2_GetPhaseCurrents+0x12e>
        Iab->b = -INT16_MAX;
 80071ae:	804d      	strh	r5, [r1, #2]
 80071b0:	f248 0201 	movw	r2, #32769	; 0x8001
 80071b4:	e795      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80071b6:	800c      	strh	r4, [r1, #0]
 80071b8:	e787      	b.n	80070ca <R3_2_GetPhaseCurrents+0x3e>
        Iab->b = ( int16_t )Aux;
 80071ba:	b215      	sxth	r5, r2
 80071bc:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071be:	b292      	uxth	r2, r2
 80071c0:	e78f      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->b = ( int16_t )Aux;
 80071c2:	b225      	sxth	r5, r4
 80071c4:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071c6:	b2a2      	uxth	r2, r4
 80071c8:	e7bc      	b.n	8007144 <R3_2_GetPhaseCurrents+0xb8>
  pHandle->_Super.Ia = Iab->a;
 80071ca:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = ( int16_t )Aux;
 80071ce:	b215      	sxth	r5, r2
 80071d0:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071d2:	fa1f f38c 	uxth.w	r3, ip
 80071d6:	b292      	uxth	r2, r2
 80071d8:	e783      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
        Iab->a = ( int16_t )Aux;
 80071da:	fa0f fc84 	sxth.w	ip, r4
 80071de:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071e2:	b2a3      	uxth	r3, r4
 80071e4:	e795      	b.n	8007112 <R3_2_GetPhaseCurrents+0x86>
        Iab->a = ( int16_t )Aux;
 80071e6:	fa0f fc84 	sxth.w	ip, r4
 80071ea:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071ee:	b2a3      	uxth	r3, r4
 80071f0:	e777      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
  pHandle->_Super.Ia = Iab->a;
 80071f2:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 80071f6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071fa:	880b      	ldrh	r3, [r1, #0]
 80071fc:	884a      	ldrh	r2, [r1, #2]
 80071fe:	e770      	b.n	80070e2 <R3_2_GetPhaseCurrents+0x56>
 8007200:	ffff8001 	.word	0xffff8001

08007204 <R3_2_SetADCSampPointPolarization>:
 *         And call the WriteTIMRegisters method.
 * @param  pHandle: handler of the current instance of the PWM component
 * @retval none
 */
uint16_t R3_2_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8007204:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007206:	6f43      	ldr	r3, [r0, #116]	; 0x74
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007208:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 800720c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007210:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007214:	689b      	ldr	r3, [r3, #8]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007216:	8e44      	ldrh	r4, [r0, #50]	; 0x32
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007218:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 800721a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 800721c:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800721e:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007220:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_2_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8007222:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007224:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007226:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007228:	4904      	ldr	r1, [pc, #16]	; (800723c <R3_2_SetADCSampPointPolarization+0x38>)
 800722a:	685b      	ldr	r3, [r3, #4]
}
 800722c:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007230:	420b      	tst	r3, r1
}
 8007232:	bf14      	ite	ne
 8007234:	2001      	movne	r0, #1
 8007236:	2000      	moveq	r0, #0
 8007238:	4770      	bx	lr
 800723a:	bf00      	nop
 800723c:	02000070 	.word	0x02000070

08007240 <R3_2_SetADCSampPointSectX>:
{
 8007240:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8007242:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
 8007244:	f8b0 e068 	ldrh.w	lr, [r0, #104]	; 0x68
 8007248:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800724a:	ebae 0203 	sub.w	r2, lr, r3
 800724e:	f8b1 40b2 	ldrh.w	r4, [r1, #178]	; 0xb2
 8007252:	b292      	uxth	r2, r2
 8007254:	42a2      	cmp	r2, r4
 8007256:	d914      	bls.n	8007282 <R3_2_SetADCSampPointSectX+0x42>
    pHandle->_Super.Sector = SECTOR_5;
 8007258:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800725a:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800725e:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8007262:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007264:	688a      	ldr	r2, [r1, #8]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8007266:	8e45      	ldrh	r5, [r0, #50]	; 0x32
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8007268:	8e84      	ldrh	r4, [r0, #52]	; 0x34
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800726a:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
  WRITE_REG(TIMx->CCR1, CompareValue);
 800726c:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800726e:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007270:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007272:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007274:	6852      	ldr	r2, [r2, #4]
 8007276:	4b10      	ldr	r3, [pc, #64]	; (80072b8 <R3_2_SetADCSampPointSectX+0x78>)
 8007278:	421a      	tst	r2, r3
}
 800727a:	bf14      	ite	ne
 800727c:	2001      	movne	r0, #1
 800727e:	2000      	moveq	r0, #0
 8007280:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8007282:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8007286:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800728a:	fa1f fc8c 	uxth.w	ip, ip
 800728e:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8007292:	d904      	bls.n	800729e <R3_2_SetADCSampPointSectX+0x5e>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007294:	f8b1 20b4 	ldrh.w	r2, [r1, #180]	; 0xb4
 8007298:	1a9b      	subs	r3, r3, r2
 800729a:	b29b      	uxth	r3, r3
 800729c:	e7e2      	b.n	8007264 <R3_2_SetADCSampPointSectX+0x24>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800729e:	4423      	add	r3, r4
 80072a0:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 80072a2:	459e      	cmp	lr, r3
 80072a4:	d8de      	bhi.n	8007264 <R3_2_SetADCSampPointSectX+0x24>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80072a6:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80072a8:	f44f 7280 	mov.w	r2, #256	; 0x100
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80072ac:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 80072b0:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 80072b4:	b29b      	uxth	r3, r3
 80072b6:	e7d5      	b.n	8007264 <R3_2_SetADCSampPointSectX+0x24>
 80072b8:	02000070 	.word	0x02000070

080072bc <R3_2_HFCurrentsPolarizationAB>:
  *         the offset computation.
  * @param  pHdl Pointer on the target component instance
  * @retval It always returns {0,0} in Curr_Components format
  */
static void R3_2_HFCurrentsPolarizationAB( PWMC_Handle_t * pHdl, ab_t * Iab )
{
 80072bc:	b430      	push	{r4, r5}
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80072be:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80072c0:	f890 406d 	ldrb.w	r4, [r0, #109]	; 0x6d
 80072c4:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80072c6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80072ca:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80072cc:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  uint32_t ADCDataReg1 = *pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector];
 80072ce:	6824      	ldr	r4, [r4, #0]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 80072d0:	682d      	ldr	r5, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80072d2:	6853      	ldr	r3, [r2, #4]
 80072d4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072dc:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80072de:	f890 c06c 	ldrb.w	ip, [r0, #108]	; 0x6c
 80072e2:	f1bc 0f0f 	cmp.w	ip, #15
 80072e6:	d80b      	bhi.n	8007300 <R3_2_HFCurrentsPolarizationAB+0x44>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 80072e8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
    pHandle-> PhaseBOffset += ADCDataReg2;
 80072ea:	6e02      	ldr	r2, [r0, #96]	; 0x60
    pHandle-> PhaseAOffset += ADCDataReg1;
 80072ec:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 80072ee:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseBOffset += ADCDataReg2;
 80072f2:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 80072f4:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 80072f6:	e9c0 4217 	strd	r4, r2, [r0, #92]	; 0x5c
    pHandle->PolarizationCounter++;
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007300:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007302:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8007304:	600b      	str	r3, [r1, #0]
}
 8007306:	4770      	bx	lr

08007308 <R3_2_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007308:	6f43      	ldr	r3, [r0, #116]	; 0x74
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 800730a:	f890 c06d 	ldrb.w	ip, [r0, #109]	; 0x6d
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800730e:	689a      	ldr	r2, [r3, #8]
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007310:	eb03 038c 	add.w	r3, r3, ip, lsl #2
{
 8007314:	b410      	push	{r4}
  uint32_t ADCDataReg2 = *pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector];
 8007316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007318:	681c      	ldr	r4, [r3, #0]
 800731a:	6853      	ldr	r3, [r2, #4]
 800731c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007324:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8007326:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
 800732a:	2b0f      	cmp	r3, #15
 800732c:	d808      	bhi.n	8007340 <R3_2_HFCurrentsPolarizationC+0x38>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 800732e:	f890 306c 	ldrb.w	r3, [r0, #108]	; 0x6c
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007332:	6e42      	ldr	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 8007334:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8007336:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8007338:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 800733a:	6642      	str	r2, [r0, #100]	; 0x64
    pHandle->PolarizationCounter++;
 800733c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8007340:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8007342:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8007346:	600b      	str	r3, [r1, #0]
}
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop

0800734c <R3_2_TurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800734c:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->_Super.TurnOnLowSidesAction = true;
 800734e:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007352:	688a      	ldr	r2, [r1, #8]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007354:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007358:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800735a:	f06f 0001 	mvn.w	r0, #1
 800735e:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007360:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007362:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007364:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007366:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0u );
  LL_TIM_OC_SetCompareCH2( TIMx, 0u );
  LL_TIM_OC_SetCompareCH3( TIMx, 0u );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8007368:	07db      	lsls	r3, r3, #31
 800736a:	d5fc      	bpl.n	8007366 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800736c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007374:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007378:	2b02      	cmp	r3, #2
 800737a:	d000      	beq.n	800737e <R3_2_TurnOnLowSides+0x32>
 800737c:	4770      	bx	lr
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800737e:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
{
 8007382:	b410      	push	{r4}
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007384:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007386:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800738a:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800738c:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007390:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 8007394:	6184      	str	r4, [r0, #24]
  }
  return;
}
 8007396:	f85d 4b04 	ldr.w	r4, [sp], #4
 800739a:	619a      	str	r2, [r3, #24]
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <R3_2_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073a0:	6f41      	ldr	r1, [r0, #116]	; 0x74
  pHandle->ADCRegularLocked=true; 

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80073a2:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80073a6:	688b      	ldr	r3, [r1, #8]
  pHandle->ADCRegularLocked=true; 
 80073a8:	f04f 0c01 	mov.w	ip, #1
{
 80073ac:	b430      	push	{r4, r5}
  pHandle->ADCRegularLocked=true; 
 80073ae:	f880 c078 	strb.w	ip, [r0, #120]	; 0x78
  pHandle->_Super.TurnOnLowSidesAction = false;
 80073b2:	f04f 0c00 	mov.w	ip, #0
 80073b6:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 80073ba:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073bc:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 80073be:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80073c0:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80073c2:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073c4:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80073c8:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073ca:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80073cc:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 80073ce:	07d2      	lsls	r2, r2, #31
 80073d0:	d5fc      	bpl.n	80073cc <R3_2_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073d2:	f06f 0201 	mvn.w	r2, #1
 80073d6:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80073d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80073de:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80073e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073e6:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80073e8:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80073ec:	2a02      	cmp	r2, #2
 80073ee:	d008      	beq.n	8007402 <R3_2_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073f0:	f06f 0201 	mvn.w	r2, #1
 80073f4:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80073f6:	68da      	ldr	r2, [r3, #12]
 80073f8:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80073fc:	bc30      	pop	{r4, r5}
 80073fe:	60da      	str	r2, [r3, #12]
 8007400:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007402:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007404:	6a0c      	ldr	r4, [r1, #32]
 8007406:	f8b1 50ac 	ldrh.w	r5, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800740a:	f240 5255 	movw	r2, #1365	; 0x555
 800740e:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007410:	e9d1 0209 	ldrd	r0, r2, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8007414:	d007      	beq.n	8007426 <R3_2_SwitchOnPWM+0x86>
 8007416:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007418:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800741c:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007420:	6184      	str	r4, [r0, #24]
 8007422:	6191      	str	r1, [r2, #24]
}
 8007424:	e7e4      	b.n	80073f0 <R3_2_SwitchOnPWM+0x50>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007426:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007428:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800742c:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007430:	6284      	str	r4, [r0, #40]	; 0x28
 8007432:	6291      	str	r1, [r2, #40]	; 0x28
}
 8007434:	e7dc      	b.n	80073f0 <R3_2_SwitchOnPWM+0x50>
 8007436:	bf00      	nop

08007438 <R3_2_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007438:	6f41      	ldr	r1, [r0, #116]	; 0x74
 800743a:	688a      	ldr	r2, [r1, #8]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800743c:	68d3      	ldr	r3, [r2, #12]
 800743e:	f023 0301 	bic.w	r3, r3, #1
 8007442:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007444:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 8007446:	f04f 0c00 	mov.w	ip, #0
 800744a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800744e:	f880 c042 	strb.w	ip, [r0, #66]	; 0x42
 8007452:	6453      	str	r3, [r2, #68]	; 0x44
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 8007454:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007458:	b91b      	cbnz	r3, 8007462 <R3_2_SwitchOffPWM+0x2a>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800745a:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 800745e:	2b02      	cmp	r3, #2
 8007460:	d00c      	beq.n	800747c <R3_2_SwitchOffPWM+0x44>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007462:	f06f 0301 	mvn.w	r3, #1
 8007466:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007468:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800746a:	07db      	lsls	r3, r3, #31
 800746c:	d5fc      	bpl.n	8007468 <R3_2_SwitchOffPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800746e:	f06f 0101 	mvn.w	r1, #1
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
 
 /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked=false; 
 8007472:	2300      	movs	r3, #0
 8007474:	6111      	str	r1, [r2, #16]
 8007476:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
 800747a:	4770      	bx	lr
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800747c:	6a0b      	ldr	r3, [r1, #32]
{
 800747e:	b410      	push	{r4}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007480:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
  WRITE_REG(GPIOx->BRR, PinMask);
 8007484:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007486:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8007488:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
 800748c:	629c      	str	r4, [r3, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800748e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007490:	f8b1 10b0 	ldrh.w	r1, [r1, #176]	; 0xb0
 8007494:	6299      	str	r1, [r3, #40]	; 0x28
 8007496:	f06f 0301 	mvn.w	r3, #1
 800749a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800749c:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 800749e:	07d9      	lsls	r1, r3, #31
 80074a0:	d5fc      	bpl.n	800749c <R3_2_SwitchOffPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074a2:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked=false; 
 80074a6:	2300      	movs	r3, #0
 80074a8:	6111      	str	r1, [r2, #16]
}
 80074aa:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADCRegularLocked=false; 
 80074ae:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
}
 80074b2:	4770      	bx	lr

080074b4 <R3_2_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074b4:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 80074b6:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80074b8:	6894      	ldr	r4, [r2, #8]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80074ba:	6863      	ldr	r3, [r4, #4]
 80074bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80074c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074c4:	6063      	str	r3, [r4, #4]
  int32_t wAux;

  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80074c6:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80074ca:	6e03      	ldr	r3, [r0, #96]	; 0x60
  
  /* Check saturation */
  if ( wAux > -INT16_MAX )
 80074cc:	480d      	ldr	r0, [pc, #52]	; (8007504 <R3_2_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t) *pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]; 
 80074ce:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80074d2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80074d4:	6812      	ldr	r2, [r2, #0]
 80074d6:	1a9b      	subs	r3, r3, r2
  if ( wAux > -INT16_MAX )
 80074d8:	4283      	cmp	r3, r0
 80074da:	db05      	blt.n	80074e8 <R3_2_RLGetPhaseCurrents+0x34>
  {
    if ( wAux < INT16_MAX )
 80074dc:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80074e0:	4293      	cmp	r3, r2
 80074e2:	dc0b      	bgt.n	80074fc <R3_2_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 80074e4:	b21b      	sxth	r3, r3
 80074e6:	e000      	b.n	80074ea <R3_2_RLGetPhaseCurrents+0x36>
 80074e8:	4b07      	ldr	r3, [pc, #28]	; (8007508 <R3_2_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = (int16_t)wAux;
}
 80074ea:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 80074ee:	2200      	movs	r2, #0
 80074f0:	f363 020f 	bfi	r2, r3, #0, #16
 80074f4:	f363 421f 	bfi	r2, r3, #16, #16
 80074f8:	600a      	str	r2, [r1, #0]
}
 80074fa:	4770      	bx	lr
 80074fc:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007500:	e7f3      	b.n	80074ea <R3_2_RLGetPhaseCurrents+0x36>
 8007502:	bf00      	nop
 8007504:	ffff8002 	.word	0xffff8002
 8007508:	ffff8001 	.word	0xffff8001

0800750c <R3_2_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800750c:	6f41      	ldr	r1, [r0, #116]	; 0x74

  pHandle->ADCRegularLocked=true;
 800750e:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007510:	688a      	ldr	r2, [r1, #8]
{
 8007512:	b410      	push	{r4}
  pHandle->ADCRegularLocked=true;
 8007514:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007518:	2400      	movs	r4, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800751a:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800751e:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007520:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007522:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007524:	07db      	lsls	r3, r3, #31
 8007526:	d5fc      	bpl.n	8007522 <R3_2_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007528:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800752a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800752e:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007530:	f891 30ba 	ldrb.w	r3, [r1, #186]	; 0xba
 8007534:	2b02      	cmp	r3, #2
 8007536:	d10b      	bne.n	8007550 <R3_2_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007538:	e9d1 2008 	ldrd	r2, r0, [r1, #32]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800753c:	f8b1 40ac 	ldrh.w	r4, [r1, #172]	; 0xac
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007540:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007542:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007544:	f8b1 40ae 	ldrh.w	r4, [r1, #174]	; 0xae
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007548:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 800754c:	6284      	str	r4, [r0, #40]	; 0x28
 800754e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 8007550:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop

08007558 <R3_2_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_2_Handle_t * pHandle = ( PWMC_R3_2_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007558:	6f41      	ldr	r1, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;

  pHandle->ADCRegularLocked=true;
 800755a:	2201      	movs	r2, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800755c:	688b      	ldr	r3, [r1, #8]
{
 800755e:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007560:	e9d1 5400 	ldrd	r5, r4, [r1]
  pHandle->ADCRegularLocked=true;
 8007564:	f880 2078 	strb.w	r2, [r0, #120]	; 0x78
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007568:	f06f 0201 	mvn.w	r2, #1
 800756c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800756e:	691a      	ldr	r2, [r3, #16]
  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007570:	07d6      	lsls	r6, r2, #31
 8007572:	d5fc      	bpl.n	800756e <R3_2_RLSwitchOnPWM+0x16>
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  LL_TIM_OC_SetCompareCH1( TIMx, 1u );
  LL_TIM_OC_SetCompareCH4( TIMx, ( pHandle->Half_PWMPeriod ) - 5u );
 8007574:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007578:	f06f 0601 	mvn.w	r6, #1
 800757c:	611e      	str	r6, [r3, #16]
 800757e:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007580:	2601      	movs	r6, #1
 8007582:	635e      	str	r6, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007584:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007586:	691a      	ldr	r2, [r3, #16]

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8007588:	07d2      	lsls	r2, r2, #31
 800758a:	d5fc      	bpl.n	8007586 <R3_2_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800758c:	68da      	ldr	r2, [r3, #12]
 800758e:	f042 0201 	orr.w	r2, r2, #1
 8007592:	60da      	str	r2, [r3, #12]

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007596:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800759a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800759c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800759e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075a2:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80075a4:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 80075a8:	2a02      	cmp	r2, #2
 80075aa:	d00f      	beq.n	80075cc <R3_2_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase B and C sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 80075ac:	2303      	movs	r3, #3
 80075ae:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  MODIFY_REG(ADCx->CR,
 80075b2:	68aa      	ldr	r2, [r5, #8]
 80075b4:	4912      	ldr	r1, [pc, #72]	; (8007600 <R3_2_RLSwitchOnPWM+0xa8>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	f042 0208 	orr.w	r2, r2, #8
 80075bc:	60aa      	str	r2, [r5, #8]
 80075be:	68a3      	ldr	r3, [r4, #8]
 80075c0:	400b      	ands	r3, r1
 80075c2:	f043 0308 	orr.w	r3, r3, #8
 80075c6:	60a3      	str	r3, [r4, #8]

  LL_ADC_INJ_StartConversion( ADCx_1 );
  LL_ADC_INJ_StartConversion( ADCx_2 );

  return;
}
 80075c8:	bcf0      	pop	{r4, r5, r6, r7}
 80075ca:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80075cc:	6a1a      	ldr	r2, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80075ce:	6a0e      	ldr	r6, [r1, #32]
 80075d0:	f8b1 70ac 	ldrh.w	r7, [r1, #172]	; 0xac
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80075d4:	f240 5355 	movw	r3, #1365	; 0x555
 80075d8:	421a      	tst	r2, r3
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075da:	e9d1 2309 	ldrd	r2, r3, [r1, #36]	; 0x24
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80075de:	d007      	beq.n	80075f0 <R3_2_RLSwitchOnPWM+0x98>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80075e0:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80075e2:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80075e6:	6196      	str	r6, [r2, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075e8:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
  WRITE_REG(GPIOx->BRR, PinMask);
 80075ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075ee:	e7dd      	b.n	80075ac <R3_2_RLSwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 80075f0:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80075f2:	f8b1 60ae 	ldrh.w	r6, [r1, #174]	; 0xae
 80075f6:	6296      	str	r6, [r2, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80075f8:	f8b1 20b0 	ldrh.w	r2, [r1, #176]	; 0xb0
 80075fc:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075fe:	e7d5      	b.n	80075ac <R3_2_RLSwitchOnPWM+0x54>
 8007600:	7fffffc0 	.word	0x7fffffc0

08007604 <R3_2_SetAOReferenceVoltage>:
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007604:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8007608:	b510      	push	{r4, lr}
 800760a:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
 800760e:	f101 0e08 	add.w	lr, r1, #8
 8007612:	b082      	sub	sp, #8
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007614:	f85c 300e 	ldr.w	r3, [ip, lr]
 8007618:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800761c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007620:	431a      	orrs	r2, r3
 8007622:	f84c 200e 	str.w	r2, [ip, lr]
  SET_BIT(DACx->SWTRIGR,
 8007626:	684a      	ldr	r2, [r1, #4]
 8007628:	f000 0303 	and.w	r3, r0, #3
 800762c:	4313      	orrs	r3, r2
 800762e:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8007630:	680a      	ldr	r2, [r1, #0]
 8007632:	2301      	movs	r3, #1
 8007634:	f000 0010 	and.w	r0, r0, #16
 8007638:	fa03 f000 	lsl.w	r0, r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800763c:	ea30 0302 	bics.w	r3, r0, r2
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007640:	4b14      	ldr	r3, [pc, #80]	; (8007694 <R3_2_SetAOReferenceVoltage+0x90>)
 8007642:	d013      	beq.n	800766c <R3_2_SetAOReferenceVoltage+0x68>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4c14      	ldr	r4, [pc, #80]	; (8007698 <R3_2_SetAOReferenceVoltage+0x94>)
  SET_BIT(DACx->CR,
 8007648:	680a      	ldr	r2, [r1, #0]
 800764a:	fba4 4303 	umull	r4, r3, r4, r3
 800764e:	0cdb      	lsrs	r3, r3, #19
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4310      	orrs	r0, r2
 8007654:	6008      	str	r0, [r1, #0]
 8007656:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007658:	9b00      	ldr	r3, [sp, #0]
 800765a:	b12b      	cbz	r3, 8007668 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 800765c:	9b00      	ldr	r3, [sp, #0]
 800765e:	3b01      	subs	r3, #1
 8007660:	9300      	str	r3, [sp, #0]
    while(wait_loop_index != 0UL)
 8007662:	9b00      	ldr	r3, [sp, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1f9      	bne.n	800765c <R3_2_SetAOReferenceVoltage+0x58>
}
 8007668:	b002      	add	sp, #8
 800766a:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800766c:	4a0a      	ldr	r2, [pc, #40]	; (8007698 <R3_2_SetAOReferenceVoltage+0x94>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	fba2 2303 	umull	r2, r3, r2, r3
 8007674:	0cdb      	lsrs	r3, r3, #19
 8007676:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800767a:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 800767c:	9b01      	ldr	r3, [sp, #4]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d0f2      	beq.n	8007668 <R3_2_SetAOReferenceVoltage+0x64>
      wait_loop_index--;
 8007682:	9b01      	ldr	r3, [sp, #4]
 8007684:	3b01      	subs	r3, #1
 8007686:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0UL)
 8007688:	9b01      	ldr	r3, [sp, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1f9      	bne.n	8007682 <R3_2_SetAOReferenceVoltage+0x7e>
}
 800768e:	b002      	add	sp, #8
 8007690:	bd10      	pop	{r4, pc}
 8007692:	bf00      	nop
 8007694:	20000680 	.word	0x20000680
 8007698:	431bde83 	.word	0x431bde83

0800769c <R3_2_Init>:
{
 800769c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80076a0:	6f43      	ldr	r3, [r0, #116]	; 0x74
  ADC_TypeDef * ADCx_1 = pHandle->pParams_str->ADCx_1;
 80076a2:	681e      	ldr	r6, [r3, #0]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 80076a4:	685d      	ldr	r5, [r3, #4]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076a6:	6872      	ldr	r2, [r6, #4]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80076a8:	689c      	ldr	r4, [r3, #8]
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80076aa:	f8d3 a014 	ldr.w	sl, [r3, #20]
{
 80076ae:	4607      	mov	r7, r0
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80076b0:	e9d3 e00b 	ldrd	lr, r0, [r3, #44]	; 0x2c
{
 80076b4:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80076b6:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076b8:	f022 0204 	bic.w	r2, r2, #4
  DAC_TypeDef * DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80076bc:	9001      	str	r0, [sp, #4]
  DAC_TypeDef * DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80076be:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80076c0:	9002      	str	r0, [sp, #8]
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80076c2:	e9d3 cb03 	ldrd	ip, fp, [r3, #12]
  DAC_TypeDef * DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80076c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076c8:	9003      	str	r0, [sp, #12]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80076ca:	e9d3 9806 	ldrd	r9, r8, [r3, #24]
 80076ce:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80076d0:	6031      	str	r1, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80076d2:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80076d4:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80076d6:	f022 0220 	bic.w	r2, r2, #32
 80076da:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80076dc:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076de:	686a      	ldr	r2, [r5, #4]
 80076e0:	f022 0204 	bic.w	r2, r2, #4
 80076e4:	606a      	str	r2, [r5, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80076e6:	6029      	str	r1, [r5, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80076e8:	686a      	ldr	r2, [r5, #4]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80076ea:	498f      	ldr	r1, [pc, #572]	; (8007928 <R3_2_Init+0x28c>)
 80076ec:	f022 0220 	bic.w	r2, r2, #32
 80076f0:	606a      	str	r2, [r5, #4]
    if ( TIMx == TIM1 )
 80076f2:	4a8e      	ldr	r2, [pc, #568]	; (800792c <R3_2_Init+0x290>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80076f4:	6028      	str	r0, [r5, #0]
 80076f6:	4294      	cmp	r4, r2
 80076f8:	690a      	ldr	r2, [r1, #16]
 80076fa:	bf0c      	ite	eq
 80076fc:	f442 6200 	orreq.w	r2, r2, #2048	; 0x800
 8007700:	f442 5200 	orrne.w	r2, r2, #8192	; 0x2000
 8007704:	610a      	str	r2, [r1, #16]
    if ( OPAMPParams != NULL )
 8007706:	f1bc 0f00 	cmp.w	ip, #0
 800770a:	d014      	beq.n	8007736 <R3_2_Init+0x9a>
     if (OPAMPParams -> OPAMPx_1 != NULL ) 
 800770c:	f8dc 2000 	ldr.w	r2, [ip]
 8007710:	b11a      	cbz	r2, 800771a <R3_2_Init+0x7e>
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8007712:	6811      	ldr	r1, [r2, #0]
 8007714:	f041 0101 	orr.w	r1, r1, #1
 8007718:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_2 != NULL ) 
 800771a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800771e:	b11a      	cbz	r2, 8007728 <R3_2_Init+0x8c>
 8007720:	6811      	ldr	r1, [r2, #0]
 8007722:	f041 0101 	orr.w	r1, r1, #1
 8007726:	6011      	str	r1, [r2, #0]
     if (OPAMPParams -> OPAMPx_3 != NULL ) 
 8007728:	f8dc 2008 	ldr.w	r2, [ip, #8]
 800772c:	b11a      	cbz	r2, 8007736 <R3_2_Init+0x9a>
 800772e:	6811      	ldr	r1, [r2, #0]
 8007730:	f041 0101 	orr.w	r1, r1, #1
 8007734:	6011      	str	r1, [r2, #0]
    if ( COMP_OCPAx != NULL )
 8007736:	f1bb 0f00 	cmp.w	fp, #0
 800773a:	d018      	beq.n	800776e <R3_2_Init+0xd2>
      if (( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE ) && (DAC_OCPAx != MC_NULL))
 800773c:	f893 20bd 	ldrb.w	r2, [r3, #189]	; 0xbd
 8007740:	2a01      	cmp	r2, #1
 8007742:	d008      	beq.n	8007756 <R3_2_Init+0xba>
 8007744:	f1be 0f00 	cmp.w	lr, #0
 8007748:	d005      	beq.n	8007756 <R3_2_Init+0xba>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx, ( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 800774a:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800774e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007750:	4671      	mov	r1, lr
 8007752:	f7ff ff57 	bl	8007604 <R3_2_SetAOReferenceVoltage>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007756:	f8db 3000 	ldr.w	r3, [fp]
 800775a:	f043 0301 	orr.w	r3, r3, #1
 800775e:	f8cb 3000 	str.w	r3, [fp]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007762:	f8db 3000 	ldr.w	r3, [fp]
 8007766:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800776a:	f8cb 3000 	str.w	r3, [fp]
    if ( COMP_OCPBx != NULL )
 800776e:	f1ba 0f00 	cmp.w	sl, #0
 8007772:	d018      	beq.n	80077a6 <R3_2_Init+0x10a>
      if (( pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE ) && (DAC_OCPBx != MC_NULL))
 8007774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007776:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 800777a:	2a01      	cmp	r2, #1
 800777c:	d007      	beq.n	800778e <R3_2_Init+0xf2>
 800777e:	9a01      	ldr	r2, [sp, #4]
 8007780:	b12a      	cbz	r2, 800778e <R3_2_Init+0xf2>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 8007782:	4611      	mov	r1, r2
 8007784:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007786:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 800778a:	f7ff ff3b 	bl	8007604 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800778e:	f8da 3000 	ldr.w	r3, [sl]
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800779a:	f8da 3000 	ldr.w	r3, [sl]
 800779e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077a2:	f8ca 3000 	str.w	r3, [sl]
    if ( COMP_OCPCx != NULL )
 80077a6:	f1b9 0f00 	cmp.w	r9, #0
 80077aa:	d018      	beq.n	80077de <R3_2_Init+0x142>
      if (( pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE )  && (DAC_OCPCx != MC_NULL))
 80077ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077ae:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 80077b2:	2a01      	cmp	r2, #1
 80077b4:	d007      	beq.n	80077c6 <R3_2_Init+0x12a>
 80077b6:	9a02      	ldr	r2, [sp, #8]
 80077b8:	b12a      	cbz	r2, 80077c6 <R3_2_Init+0x12a>
        R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,( uint16_t )( pHandle->pParams_str->DAC_OCP_Threshold ) );
 80077ba:	4611      	mov	r1, r2
 80077bc:	6c58      	ldr	r0, [r3, #68]	; 0x44
 80077be:	f8b3 20b6 	ldrh.w	r2, [r3, #182]	; 0xb6
 80077c2:	f7ff ff1f 	bl	8007604 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80077c6:	f8d9 3000 	ldr.w	r3, [r9]
 80077ca:	f043 0301 	orr.w	r3, r3, #1
 80077ce:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80077d2:	f8d9 3000 	ldr.w	r3, [r9]
 80077d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077da:	f8c9 3000 	str.w	r3, [r9]
    if ( COMP_OVPx != NULL )
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d018      	beq.n	8007816 <R3_2_Init+0x17a>
      if (( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE ) && (DAC_OVPx != MC_NULL))
 80077e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077e6:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
 80077ea:	2a01      	cmp	r2, #1
 80077ec:	d007      	beq.n	80077fe <R3_2_Init+0x162>
 80077ee:	9a03      	ldr	r2, [sp, #12]
 80077f0:	b12a      	cbz	r2, 80077fe <R3_2_Init+0x162>
          R3_2_SetAOReferenceVoltage( pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,( uint16_t )( pHandle->pParams_str->DAC_OVP_Threshold ) );
 80077f2:	4611      	mov	r1, r2
 80077f4:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80077f6:	f8b3 20b8 	ldrh.w	r2, [r3, #184]	; 0xb8
 80077fa:	f7ff ff03 	bl	8007604 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80077fe:	f8d8 3000 	ldr.w	r3, [r8]
 8007802:	f043 0301 	orr.w	r3, r3, #1
 8007806:	f8c8 3000 	str.w	r3, [r8]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800780a:	f8d8 3000 	ldr.w	r3, [r8]
 800780e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007812:	f8c8 3000 	str.w	r3, [r8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007816:	68b3      	ldr	r3, [r6, #8]
    if (LL_ADC_IsEnabled (ADCx_1) == 0)
 8007818:	07d8      	lsls	r0, r3, #31
 800781a:	d562      	bpl.n	80078e2 <R3_2_Init+0x246>
 800781c:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 800781e:	07d9      	lsls	r1, r3, #31
 8007820:	d56b      	bpl.n	80078fa <R3_2_Init+0x25e>
  volatile uint32_t Brk2Timeout = 1000;
 8007822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007826:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007828:	6823      	ldr	r3, [r4, #0]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 800782a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007838:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800783c:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800783e:	69a3      	ldr	r3, [r4, #24]
 8007840:	f043 0308 	orr.w	r3, r3, #8
 8007844:	61a3      	str	r3, [r4, #24]
 8007846:	69a3      	ldr	r3, [r4, #24]
 8007848:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800784c:	61a3      	str	r3, [r4, #24]
 800784e:	69e3      	ldr	r3, [r4, #28]
 8007850:	f043 0308 	orr.w	r3, r3, #8
 8007854:	61e3      	str	r3, [r4, #28]
 8007856:	69e3      	ldr	r3, [r4, #28]
 8007858:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800785c:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800785e:	6963      	ldr	r3, [r4, #20]
 8007860:	f043 0301 	orr.w	r3, r3, #1
 8007864:	6163      	str	r3, [r4, #20]
 8007866:	f892 30c1 	ldrb.w	r3, [r2, #193]	; 0xc1
 800786a:	2b02      	cmp	r3, #2
 800786c:	d029      	beq.n	80078c2 <R3_2_Init+0x226>
    if ( pHandle->_Super.Motor == M1 )
 800786e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007872:	b92b      	cbnz	r3, 8007880 <R3_2_Init+0x1e4>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8007874:	f892 30bb 	ldrb.w	r3, [r2, #187]	; 0xbb
 8007878:	2b01      	cmp	r3, #1
 800787a:	d026      	beq.n	80078ca <R3_2_Init+0x22e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800787c:	2b03      	cmp	r3, #3
 800787e:	d04b      	beq.n	8007918 <R3_2_Init+0x27c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007880:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007884:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8007886:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 800788a:	b16b      	cbz	r3, 80078a8 <R3_2_Init+0x20c>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800788c:	6923      	ldr	r3, [r4, #16]
 800788e:	05da      	lsls	r2, r3, #23
 8007890:	d50a      	bpl.n	80078a8 <R3_2_Init+0x20c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007892:	f46f 7280 	mvn.w	r2, #256	; 0x100
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 8007896:	9b05      	ldr	r3, [sp, #20]
 8007898:	b133      	cbz	r3, 80078a8 <R3_2_Init+0x20c>
 800789a:	6122      	str	r2, [r4, #16]
      Brk2Timeout--;
 800789c:	9b05      	ldr	r3, [sp, #20]
 800789e:	3b01      	subs	r3, #1
 80078a0:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80078a2:	6923      	ldr	r3, [r4, #16]
 80078a4:	05db      	lsls	r3, r3, #23
 80078a6:	d4f6      	bmi.n	8007896 <R3_2_Init+0x1fa>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80078a8:	68e3      	ldr	r3, [r4, #12]
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80078b0:	6a23      	ldr	r3, [r4, #32]
 80078b2:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80078b6:	f043 0305 	orr.w	r3, r3, #5
 80078ba:	6223      	str	r3, [r4, #32]
}
 80078bc:	b007      	add	sp, #28
 80078be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80078c2:	f892 30c2 	ldrb.w	r3, [r2, #194]	; 0xc2
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d01b      	beq.n	8007902 <R3_2_Init+0x266>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80078ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 80078ce:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 80078d0:	6263      	str	r3, [r4, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80078d2:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80078d6:	6123      	str	r3, [r4, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80078d8:	f892 30bc 	ldrb.w	r3, [r2, #188]	; 0xbc
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d1d5      	bne.n	800788c <R3_2_Init+0x1f0>
 80078e0:	e7e2      	b.n	80078a8 <R3_2_Init+0x20c>
      R3_2_ADCxInit (ADCx_1);
 80078e2:	4630      	mov	r0, r6
 80078e4:	f7ff fb78 	bl	8006fd8 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80078e8:	2340      	movs	r3, #64	; 0x40
 80078ea:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80078ec:	6873      	ldr	r3, [r6, #4]
 80078ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80078f2:	6073      	str	r3, [r6, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078f4:	68ab      	ldr	r3, [r5, #8]
    if (LL_ADC_IsEnabled (ADCx_2) == 0)
 80078f6:	07d9      	lsls	r1, r3, #31
 80078f8:	d493      	bmi.n	8007822 <R3_2_Init+0x186>
      R3_2_ADCxInit (ADCx_2);
 80078fa:	4628      	mov	r0, r5
 80078fc:	f7ff fb6c 	bl	8006fd8 <R3_2_ADCxInit>
 8007900:	e78f      	b.n	8007822 <R3_2_Init+0x186>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 8007902:	f892 10bb 	ldrb.w	r1, [r2, #187]	; 0xbb
 8007906:	2903      	cmp	r1, #3
 8007908:	d1df      	bne.n	80078ca <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800790a:	6323      	str	r3, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800790c:	6963      	ldr	r3, [r4, #20]
 800790e:	f043 0301 	orr.w	r3, r3, #1
 8007912:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007914:	6321      	str	r1, [r4, #48]	; 0x30
}
 8007916:	e7d8      	b.n	80078ca <R3_2_Init+0x22e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007918:	2101      	movs	r1, #1
 800791a:	6321      	str	r1, [r4, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800791c:	6961      	ldr	r1, [r4, #20]
 800791e:	f041 0101 	orr.w	r1, r1, #1
 8007922:	6161      	str	r1, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007924:	6323      	str	r3, [r4, #48]	; 0x30
}
 8007926:	e7ab      	b.n	8007880 <R3_2_Init+0x1e4>
 8007928:	e0042000 	.word	0xe0042000
 800792c:	40012c00 	.word	0x40012c00

08007930 <R3_2_CurrentReadingPolarization>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007930:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007932:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007934:	689d      	ldr	r5, [r3, #8]
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007936:	e9d3 7600 	ldrd	r7, r6, [r3]
  pHandle->PhaseAOffset = 0u;
 800793a:	2300      	movs	r3, #0
  pHandle->PolarizationCounter = 0u;
 800793c:	f880 306c 	strb.w	r3, [r0, #108]	; 0x6c
  pHandle->PhaseBOffset = 0u;
 8007940:	e9c0 3317 	strd	r3, r3, [r0, #92]	; 0x5c
  pHandle->PhaseCOffset = 0u;
 8007944:	6643      	str	r3, [r0, #100]	; 0x64
  CLEAR_BIT(TIMx->CCER, Channels);
 8007946:	6a2b      	ldr	r3, [r5, #32]
 8007948:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 800794c:	f023 0305 	bic.w	r3, r3, #5
 8007950:	622b      	str	r3, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8007952:	2304      	movs	r3, #4
 8007954:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_5;   
 8007958:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800795c:	4b3b      	ldr	r3, [pc, #236]	; (8007a4c <R3_2_CurrentReadingPolarization+0x11c>)
 800795e:	6043      	str	r3, [r0, #4]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8007960:	4b3b      	ldr	r3, [pc, #236]	; (8007a50 <R3_2_CurrentReadingPolarization+0x120>)
 8007962:	6183      	str	r3, [r0, #24]
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007964:	2380      	movs	r3, #128	; 0x80
{
 8007966:	b083      	sub	sp, #12
  pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8007968:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
{
 800796c:	4604      	mov	r4, r0
  R3_2_SwitchOnPWM( &pHandle->_Super );
 800796e:	f7ff fd17 	bl	80073a0 <R3_2_SwitchOnPWM>
  while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8007972:	4a38      	ldr	r2, [pc, #224]	; (8007a54 <R3_2_CurrentReadingPolarization+0x124>)
 8007974:	686b      	ldr	r3, [r5, #4]
 8007976:	4013      	ands	r3, r2
 8007978:	2b70      	cmp	r3, #112	; 0x70
 800797a:	d1fb      	bne.n	8007974 <R3_2_CurrentReadingPolarization+0x44>
  MODIFY_REG(ADCx->CR,
 800797c:	68ba      	ldr	r2, [r7, #8]
 800797e:	4936      	ldr	r1, [pc, #216]	; (8007a58 <R3_2_CurrentReadingPolarization+0x128>)
 8007980:	400a      	ands	r2, r1
 8007982:	f042 0208 	orr.w	r2, r2, #8
 8007986:	60ba      	str	r2, [r7, #8]
 8007988:	68b3      	ldr	r3, [r6, #8]
  waitForPolarizationEnd( TIMx,
 800798a:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800798c:	400b      	ands	r3, r1
 800798e:	f043 0308 	orr.w	r3, r3, #8
 8007992:	60b3      	str	r3, [r6, #8]
 8007994:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8007998:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800799c:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 80079a0:	4628      	mov	r0, r5
 80079a2:	e9cd 1300 	strd	r1, r3, [sp]
 80079a6:	f7ff f989 	bl	8006cbc <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80079aa:	4620      	mov	r0, r4
 80079ac:	f7ff fd44 	bl	8007438 <R3_2_SwitchOffPWM>
  pHandle->PolarizationCounter = 0u;
 80079b0:	2600      	movs	r6, #0
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80079b2:	4a2a      	ldr	r2, [pc, #168]	; (8007a5c <R3_2_CurrentReadingPolarization+0x12c>)
 80079b4:	6062      	str	r2, [r4, #4]
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80079b6:	4620      	mov	r0, r4
  pHandle->PolarizationCounter = 0u;
 80079b8:	f884 606c 	strb.w	r6, [r4, #108]	; 0x6c
  pHandle->PolarizationSector=SECTOR_1;
 80079bc:	f884 606d 	strb.w	r6, [r4, #109]	; 0x6d
  pHandle->_Super.Sector = SECTOR_1;   
 80079c0:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
  R3_2_SwitchOnPWM( &pHandle->_Super );
 80079c4:	f7ff fcec 	bl	80073a0 <R3_2_SwitchOnPWM>
  waitForPolarizationEnd( TIMx,
 80079c8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80079ca:	e9dd 1300 	ldrd	r1, r3, [sp]
 80079ce:	f892 20bb 	ldrb.w	r2, [r2, #187]	; 0xbb
 80079d2:	4628      	mov	r0, r5
 80079d4:	f7ff f972 	bl	8006cbc <waitForPolarizationEnd>
  R3_2_SwitchOffPWM( &pHandle->_Super );
 80079d8:	4620      	mov	r0, r4
 80079da:	f7ff fd2d 	bl	8007438 <R3_2_SwitchOffPWM>
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80079de:	e9d4 2317 	ldrd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80079e2:	0912      	lsrs	r2, r2, #4
  pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80079e4:	091b      	lsrs	r3, r3, #4
 80079e6:	e9c4 2317 	strd	r2, r3, [r4, #92]	; 0x5c
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80079ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 80079ec:	4a1c      	ldr	r2, [pc, #112]	; (8007a60 <R3_2_CurrentReadingPolarization+0x130>)
 80079ee:	6062      	str	r2, [r4, #4]
  pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80079f0:	091b      	lsrs	r3, r3, #4
 80079f2:	6663      	str	r3, [r4, #100]	; 0x64
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80079f4:	69ab      	ldr	r3, [r5, #24]
  pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointSectX;
 80079f6:	4a1b      	ldr	r2, [pc, #108]	; (8007a64 <R3_2_CurrentReadingPolarization+0x134>)
 80079f8:	61a2      	str	r2, [r4, #24]
 80079fa:	f023 0308 	bic.w	r3, r3, #8
 80079fe:	61ab      	str	r3, [r5, #24]
 8007a00:	69aa      	ldr	r2, [r5, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 8007a02:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8007a06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a0a:	61aa      	str	r2, [r5, #24]
 8007a0c:	69ea      	ldr	r2, [r5, #28]
 8007a0e:	f022 0208 	bic.w	r2, r2, #8
 8007a12:	61ea      	str	r2, [r5, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a14:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a16:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a18:	63eb      	str	r3, [r5, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007a1a:	69ab      	ldr	r3, [r5, #24]
 8007a1c:	f043 0308 	orr.w	r3, r3, #8
 8007a20:	61ab      	str	r3, [r5, #24]
 8007a22:	69ab      	ldr	r3, [r5, #24]
 8007a24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a28:	61ab      	str	r3, [r5, #24]
 8007a2a:	69eb      	ldr	r3, [r5, #28]
 8007a2c:	f043 0308 	orr.w	r3, r3, #8
 8007a30:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007a32:	6a2b      	ldr	r3, [r5, #32]
 8007a34:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8007a38:	2204      	movs	r2, #4
 8007a3a:	f043 0305 	orr.w	r3, r3, #5
 8007a3e:	622b      	str	r3, [r5, #32]
 8007a40:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
  pHandle->BrakeActionLock = false;
 8007a44:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
}
 8007a48:	b003      	add	sp, #12
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4c:	080072bd 	.word	0x080072bd
 8007a50:	08007205 	.word	0x08007205
 8007a54:	02000070 	.word	0x02000070
 8007a58:	7fffffc0 	.word	0x7fffffc0
 8007a5c:	08007309 	.word	0x08007309
 8007a60:	0800708d 	.word	0x0800708d
 8007a64:	08007241 	.word	0x08007241

08007a68 <R3_2_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a68:	6f42      	ldr	r2, [r0, #116]	; 0x74
{
 8007a6a:	4684      	mov	ip, r0
  R3_3_OPAMPParams_t * OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007a6c:	68d0      	ldr	r0, [r2, #12]
{
 8007a6e:	b5f0      	push	{r4, r5, r6, r7, lr}
  ADC_TypeDef * ADCx_2 = pHandle->pParams_str->ADCx_2;
 8007a70:	e9d2 1500 	ldrd	r1, r5, [r2]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007a74:	6894      	ldr	r4, [r2, #8]
  if ( OPAMPParams != NULL )
 8007a76:	b378      	cbz	r0, 8007ad8 <R3_2_TIMx_UP_IRQHandler+0x70>
    while (ADCx_1->JSQR != 0x0u)
 8007a78:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1fc      	bne.n	8007a78 <R3_2_TIMx_UP_IRQHandler+0x10>
    Opamp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007a7e:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8007a82:	eb00 038e 	add.w	r3, r0, lr, lsl #2
 8007a86:	68de      	ldr	r6, [r3, #12]
    if (Opamp != NULL )
 8007a88:	b12e      	cbz	r6, 8007a96 <R3_2_TIMx_UP_IRQHandler+0x2e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007a8a:	6830      	ldr	r0, [r6, #0]
 8007a8c:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8007a8e:	f420 7086 	bic.w	r0, r0, #268	; 0x10c
 8007a92:	4338      	orrs	r0, r7
 8007a94:	6030      	str	r0, [r6, #0]
     Opamp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007a96:	6a58      	ldr	r0, [r3, #36]	; 0x24
    if (Opamp != NULL )
 8007a98:	b128      	cbz	r0, 8007aa6 <R3_2_TIMx_UP_IRQHandler+0x3e>
      MODIFY_REG (Opamp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL ), OpampConfig);
 8007a9a:	6d5e      	ldr	r6, [r3, #84]	; 0x54
 8007a9c:	6803      	ldr	r3, [r0, #0]
 8007a9e:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007aa2:	4333      	orrs	r3, r6
 8007aa4:	6003      	str	r3, [r0, #0]
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007aa6:	eb02 028e 	add.w	r2, r2, lr, lsl #2
 8007aaa:	f8bc 306a 	ldrh.w	r3, [ip, #106]	; 0x6a
 8007aae:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007ab0:	f8d2 6094 	ldr.w	r6, [r2, #148]	; 0x94
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007ab4:	4318      	orrs	r0, r3
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007ab6:	4333      	orrs	r3, r6
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007ab8:	64c8      	str	r0, [r1, #76]	; 0x4c
  ADCx_2->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007aba:	64eb      	str	r3, [r5, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007abc:	6863      	ldr	r3, [r4, #4]
 8007abe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007ac6:	2280      	movs	r2, #128	; 0x80
 8007ac8:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 8007acc:	6063      	str	r3, [r4, #4]
}
 8007ace:	f10c 0046 	add.w	r0, ip, #70	; 0x46
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007ad2:	f8ac 206a 	strh.w	r2, [ip, #106]	; 0x6a
}
 8007ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  ADCx_1->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007ad8:	f89c e03a 	ldrb.w	lr, [ip, #58]	; 0x3a
 8007adc:	e7e3      	b.n	8007aa6 <R3_2_TIMx_UP_IRQHandler+0x3e>
 8007ade:	bf00      	nop

08007ae0 <R3_2_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8007ae0:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8007ae4:	b923      	cbnz	r3, 8007af0 <R3_2_BRK2_IRQHandler+0x10>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007ae6:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8007ae8:	f893 20ba 	ldrb.w	r2, [r3, #186]	; 0xba
 8007aec:	2a02      	cmp	r2, #2
 8007aee:	d004      	beq.n	8007afa <R3_2_BRK2_IRQHandler+0x1a>
  pHandle->OverCurrentFlag = true;
 8007af0:	2301      	movs	r3, #1
 8007af2:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007af6:	3046      	adds	r0, #70	; 0x46
 8007af8:	4770      	bx	lr
{
 8007afa:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007afc:	e9d3 4108 	ldrd	r4, r1, [r3, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8007b00:	f8b3 50ac 	ldrh.w	r5, [r3, #172]	; 0xac
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  WRITE_REG(GPIOx->BRR, PinMask);
 8007b06:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8007b08:	f8b3 40ae 	ldrh.w	r4, [r3, #174]	; 0xae
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8007b0c:	f8b3 30b0 	ldrh.w	r3, [r3, #176]	; 0xb0
 8007b10:	628c      	str	r4, [r1, #40]	; 0x28
 8007b12:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 8007b14:	2301      	movs	r3, #1
 8007b16:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 8007b1a:	bc30      	pop	{r4, r5}
 8007b1c:	3046      	adds	r0, #70	; 0x46
 8007b1e:	4770      	bx	lr

08007b20 <R3_2_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007b20:	6f42      	ldr	r2, [r0, #116]	; 0x74
 8007b22:	6891      	ldr	r1, [r2, #8]
 8007b24:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8007b26:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 8007b28:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007b2c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007b30:	644a      	str	r2, [r1, #68]	; 0x44
}
 8007b32:	3046      	adds	r0, #70	; 0x46
  pHandle->OverVoltageFlag = true;
 8007b34:	f8a3 c06f 	strh.w	ip, [r3, #111]	; 0x6f
}
 8007b38:	4770      	bx	lr
 8007b3a:	bf00      	nop

08007b3c <R3_2_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 8007b3c:	f890 306f 	ldrb.w	r3, [r0, #111]	; 0x6f
 8007b40:	b16b      	cbz	r3, 8007b5e <R3_2_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8007b42:	2300      	movs	r3, #0
 8007b44:	f880 306f 	strb.w	r3, [r0, #111]	; 0x6f
 8007b48:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8007b4a:	2302      	movs	r3, #2
  if ( pHandle->OverCurrentFlag == true )
 8007b4c:	f890 206e 	ldrb.w	r2, [r0, #110]	; 0x6e
 8007b50:	b11a      	cbz	r2, 8007b5a <R3_2_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 8007b52:	2300      	movs	r3, #0
 8007b54:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
    retVal |= MC_BREAK_IN;
 8007b58:	460b      	mov	r3, r1
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	4770      	bx	lr
 8007b5e:	2140      	movs	r1, #64	; 0x40
 8007b60:	e7f4      	b.n	8007b4c <R3_2_IsOverCurrentOccurred+0x10>
 8007b62:	bf00      	nop

08007b64 <R3_2_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8007b64:	f890 1047 	ldrb.w	r1, [r0, #71]	; 0x47
{
 8007b68:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 8007b6a:	2900      	cmp	r1, #0
 8007b6c:	d13c      	bne.n	8007be8 <R3_2_RLDetectionModeEnable+0x84>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007b6e:	6f45      	ldr	r5, [r0, #116]	; 0x74
 8007b70:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007b72:	699a      	ldr	r2, [r3, #24]
 8007b74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007b78:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007b7c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007b80:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007b82:	6a1a      	ldr	r2, [r3, #32]
 8007b84:	f042 0201 	orr.w	r2, r2, #1
 8007b88:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007b8a:	6a1a      	ldr	r2, [r3, #32]
 8007b8c:	f022 0204 	bic.w	r2, r2, #4
 8007b90:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007b92:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007b94:	f895 20ba 	ldrb.w	r2, [r5, #186]	; 0xba
 8007b98:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007b9a:	f103 0418 	add.w	r4, r3, #24
 8007b9e:	d030      	beq.n	8007c02 <R3_2_RLDetectionModeEnable+0x9e>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007ba0:	2a02      	cmp	r2, #2
 8007ba2:	d10f      	bne.n	8007bc4 <R3_2_RLDetectionModeEnable+0x60>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ba4:	699a      	ldr	r2, [r3, #24]
 8007ba6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007baa:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007bb2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007bb4:	6a1a      	ldr	r2, [r3, #32]
 8007bb6:	f042 0210 	orr.w	r2, r2, #16
 8007bba:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bbc:	6a1a      	ldr	r2, [r3, #32]
 8007bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc2:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007bca:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007bce:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007bd2:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007bd6:	6e01      	ldr	r1, [r0, #96]	; 0x60
 8007bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bdc:	621a      	str	r2, [r3, #32]
 8007bde:	6a1a      	ldr	r2, [r3, #32]
 8007be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be4:	621a      	str	r2, [r3, #32]
 8007be6:	65c1      	str	r1, [r0, #92]	; 0x5c
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007be8:	4b0e      	ldr	r3, [pc, #56]	; (8007c24 <R3_2_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007bea:	490f      	ldr	r1, [pc, #60]	; (8007c28 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007bec:	4a0f      	ldr	r2, [pc, #60]	; (8007c2c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007bee:	4c10      	ldr	r4, [pc, #64]	; (8007c30 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007bf0:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8007bf2:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007bf4:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007bf6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007bfa:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8007bfc:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007c00:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007c08:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007c0c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007c10:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c12:	6a1a      	ldr	r2, [r3, #32]
 8007c14:	f022 0210 	bic.w	r2, r2, #16
 8007c18:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007c1a:	6a1a      	ldr	r2, [r3, #32]
 8007c1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c20:	621a      	str	r2, [r3, #32]
}
 8007c22:	e7cf      	b.n	8007bc4 <R3_2_RLDetectionModeEnable+0x60>
 8007c24:	0800750d 	.word	0x0800750d
 8007c28:	08007559 	.word	0x08007559
 8007c2c:	08007439 	.word	0x08007439
 8007c30:	080074b5 	.word	0x080074b5

08007c34 <R3_2_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8007c34:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d03b      	beq.n	8007cb4 <R3_2_RLDetectionModeDisable+0x80>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007c3c:	6f41      	ldr	r1, [r0, #116]	; 0x74
 8007c3e:	688b      	ldr	r3, [r1, #8]
{
 8007c40:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c42:	699a      	ldr	r2, [r3, #24]
 8007c44:	4c43      	ldr	r4, [pc, #268]	; (8007d54 <R3_2_RLDetectionModeDisable+0x120>)
 8007c46:	4022      	ands	r2, r4
 8007c48:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007c4c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007c4e:	6a1a      	ldr	r2, [r3, #32]
 8007c50:	f042 0201 	orr.w	r2, r2, #1
 8007c54:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8007c56:	f891 20ba 	ldrb.w	r2, [r1, #186]	; 0xba
 8007c5a:	2a01      	cmp	r2, #1
 8007c5c:	d02b      	beq.n	8007cb6 <R3_2_RLDetectionModeDisable+0x82>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8007c5e:	2a02      	cmp	r2, #2
 8007c60:	d050      	beq.n	8007d04 <R3_2_RLDetectionModeDisable+0xd0>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007c62:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007c66:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c68:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c6a:	6999      	ldr	r1, [r3, #24]
 8007c6c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007c70:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007c74:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007c78:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007c7a:	6a19      	ldr	r1, [r3, #32]
 8007c7c:	f041 0110 	orr.w	r1, r1, #16
 8007c80:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c84:	69d9      	ldr	r1, [r3, #28]
 8007c86:	400c      	ands	r4, r1
 8007c88:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007c8c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007c8e:	6a19      	ldr	r1, [r3, #32]
 8007c90:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007c94:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007c96:	4930      	ldr	r1, [pc, #192]	; (8007d58 <R3_2_RLDetectionModeDisable+0x124>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c98:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007c9a:	4a30      	ldr	r2, [pc, #192]	; (8007d5c <R3_2_RLDetectionModeDisable+0x128>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007c9c:	6041      	str	r1, [r0, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007c9e:	4930      	ldr	r1, [pc, #192]	; (8007d60 <R3_2_RLDetectionModeDisable+0x12c>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007ca0:	4c30      	ldr	r4, [pc, #192]	; (8007d64 <R3_2_RLDetectionModeDisable+0x130>)
 8007ca2:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8007ca4:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007ca6:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8007caa:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007cae:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
}
 8007cb2:	4770      	bx	lr
 8007cb4:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007cb6:	6a19      	ldr	r1, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8007cb8:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007cbc:	f041 0104 	orr.w	r1, r1, #4
 8007cc0:	0852      	lsrs	r2, r2, #1
 8007cc2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cc4:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007cc6:	6999      	ldr	r1, [r3, #24]
 8007cc8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007ccc:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007cd0:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007cd4:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007cd6:	6a19      	ldr	r1, [r3, #32]
 8007cd8:	f041 0110 	orr.w	r1, r1, #16
 8007cdc:	6219      	str	r1, [r3, #32]
 8007cde:	6a19      	ldr	r1, [r3, #32]
 8007ce0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007ce4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ce6:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ce8:	69d9      	ldr	r1, [r3, #28]
 8007cea:	400c      	ands	r4, r1
 8007cec:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007cf0:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007cf2:	6a19      	ldr	r1, [r3, #32]
 8007cf4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007cf8:	6219      	str	r1, [r3, #32]
 8007cfa:	6a19      	ldr	r1, [r3, #32]
 8007cfc:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007d00:	6219      	str	r1, [r3, #32]
}
 8007d02:	e7c8      	b.n	8007c96 <R3_2_RLDetectionModeDisable+0x62>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d04:	6a19      	ldr	r1, [r3, #32]
 8007d06:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
 8007d0a:	f021 0104 	bic.w	r1, r1, #4
 8007d0e:	0852      	lsrs	r2, r2, #1
 8007d10:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d12:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d14:	6999      	ldr	r1, [r3, #24]
 8007d16:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007d1a:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007d1e:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007d22:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007d24:	6a19      	ldr	r1, [r3, #32]
 8007d26:	f041 0110 	orr.w	r1, r1, #16
 8007d2a:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d2c:	6a19      	ldr	r1, [r3, #32]
 8007d2e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007d32:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d36:	69d9      	ldr	r1, [r3, #28]
 8007d38:	400c      	ands	r4, r1
 8007d3a:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007d3e:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007d40:	6a19      	ldr	r1, [r3, #32]
 8007d42:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007d46:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d48:	6a19      	ldr	r1, [r3, #32]
 8007d4a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007d4e:	6219      	str	r1, [r3, #32]
}
 8007d50:	e7a1      	b.n	8007c96 <R3_2_RLDetectionModeDisable+0x62>
 8007d52:	bf00      	nop
 8007d54:	fffeff8c 	.word	0xfffeff8c
 8007d58:	0800708d 	.word	0x0800708d
 8007d5c:	08007439 	.word	0x08007439
 8007d60:	080073a1 	.word	0x080073a1
 8007d64:	0800734d 	.word	0x0800734d

08007d68 <R3_2_RLDetectionModeSetDuty>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d68:	6f43      	ldr	r3, [r0, #116]	; 0x74
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007d6a:	f8b0 c068 	ldrh.w	ip, [r0, #104]	; 0x68
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8007d6e:	689b      	ldr	r3, [r3, #8]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d70:	69da      	ldr	r2, [r3, #28]
 8007d72:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007d76:	fb01 f10c 	mul.w	r1, r1, ip
 8007d7a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
{
 8007d7e:	b410      	push	{r4}
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8007d80:	0c09      	lsrs	r1, r1, #16
  pHandle->ADCRegularLocked=true;
 8007d82:	2401      	movs	r4, #1
 8007d84:	f442 42e0 	orr.w	r2, r2, #28672	; 0x7000
 8007d88:	f880 4078 	strb.w	r4, [r0, #120]	; 0x78
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8007d8c:	8641      	strh	r1, [r0, #50]	; 0x32
 8007d8e:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007d90:	f8b0 2056 	ldrh.w	r2, [r0, #86]	; 0x56
  LL_TIM_OC_SetCompareCH3(TIMx, ( uint32_t )pHandle->_Super.Toff);
 8007d94:	f8b0 4058 	ldrh.w	r4, [r0, #88]	; 0x58
  LL_TIM_OC_SetCompareCH4(TIMx, ( uint32_t )( pHandle->Half_PWMPeriod - pHandle->_Super.Ton));
 8007d98:	ebac 0202 	sub.w	r2, ip, r2
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007d9e:	63dc      	str	r4, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007da0:	6359      	str	r1, [r3, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007da2:	685a      	ldr	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007da4:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8007da6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8007daa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  pHdl->Sector = SECTOR_4;
 8007dae:	f04f 0c03 	mov.w	ip, #3
 8007db2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007db6:	605a      	str	r2, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007db8:	2901      	cmp	r1, #1
  pHdl->Sector = SECTOR_4;
 8007dba:	f880 c03a 	strb.w	ip, [r0, #58]	; 0x3a
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007dbe:	685b      	ldr	r3, [r3, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8007dc0:	d008      	beq.n	8007dd4 <R3_2_RLDetectionModeSetDuty+0x6c>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007dc2:	4a07      	ldr	r2, [pc, #28]	; (8007de0 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8007dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8007dc8:	4213      	tst	r3, r2
    hAux = MC_FOC_DURATION;
 8007dca:	bf14      	ite	ne
 8007dcc:	2101      	movne	r1, #1
 8007dce:	2100      	moveq	r1, #0
}
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	8703      	strh	r3, [r0, #56]	; 0x38
}
 8007dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007ddc:	4608      	mov	r0, r1
 8007dde:	4770      	bx	lr
 8007de0:	02000070 	.word	0x02000070

08007de4 <RVBS_Clear>:
__weak void RVBS_Clear( RDivider_Handle_t * pHandle )
{
  uint16_t aux;
  uint16_t index;

  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007de4:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8007de8:	8b82      	ldrh	r2, [r0, #28]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007dea:	8b03      	ldrh	r3, [r0, #24]
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007dec:	4494      	add	ip, r2
{
 8007dee:	b410      	push	{r4}
  aux = ( pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold ) / 2u;
 8007df0:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007df4:	b14b      	cbz	r3, 8007e0a <RVBS_Clear+0x26>
  {
    pHandle->aBuffer[index] = aux;
 8007df6:	6a04      	ldr	r4, [r0, #32]
 8007df8:	2300      	movs	r3, #0
 8007dfa:	b29a      	uxth	r2, r3
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007dfc:	3301      	adds	r3, #1
    pHandle->aBuffer[index] = aux;
 8007dfe:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
  for ( index = 0u; index < pHandle->LowPassFilterBW; index++ )
 8007e02:	8b01      	ldrh	r1, [r0, #24]
 8007e04:	b29a      	uxth	r2, r3
 8007e06:	4291      	cmp	r1, r2
 8007e08:	d8f7      	bhi.n	8007dfa <RVBS_Clear+0x16>
  }
  pHandle->_Super.LatestConv = aux;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	f36c 030f 	bfi	r3, ip, #0, #16
 8007e10:	f36c 431f 	bfi	r3, ip, #16, #16
  pHandle->_Super.AvBusVoltage_d = aux;
  pHandle->index = 0;
 8007e14:	2200      	movs	r2, #0
}
 8007e16:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.LatestConv = aux;
 8007e1a:	6043      	str	r3, [r0, #4]
  pHandle->index = 0;
 8007e1c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop

08007e24 <RVBS_Init>:
{
 8007e24:	b510      	push	{r4, lr}
 8007e26:	4604      	mov	r4, r0
  pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8007e28:	300c      	adds	r0, #12
 8007e2a:	f7fa f9a3 	bl	8002174 <RCM_RegisterRegConv>
 8007e2e:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  RVBS_Clear( pHandle );
 8007e32:	4620      	mov	r0, r4
 8007e34:	f7ff ffd6 	bl	8007de4 <RVBS_Clear>
}
 8007e38:	bd10      	pop	{r4, pc}
 8007e3a:	bf00      	nop

08007e3c <RVBS_CheckFaultState>:
  */
__weak uint16_t RVBS_CheckFaultState( RDivider_Handle_t * pHandle )
{
  uint16_t fault;

  if ( pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold )
 8007e3c:	88c3      	ldrh	r3, [r0, #6]
 8007e3e:	8b42      	ldrh	r2, [r0, #26]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d305      	bcc.n	8007e50 <RVBS_CheckFaultState+0x14>
  {
    fault = MC_OVER_VOLT;
  }
  else if ( pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold )
 8007e44:	8b80      	ldrh	r0, [r0, #28]
  {
    fault = MC_UNDER_VOLT;
  }
  else
  {
    fault = MC_NO_ERROR;
 8007e46:	4298      	cmp	r0, r3
 8007e48:	bf8c      	ite	hi
 8007e4a:	2004      	movhi	r0, #4
 8007e4c:	2000      	movls	r0, #0
 8007e4e:	4770      	bx	lr
    fault = MC_OVER_VOLT;
 8007e50:	2002      	movs	r0, #2
  }
  return fault;
}
 8007e52:	4770      	bx	lr

08007e54 <RVBS_CalcAvVbus>:
{
 8007e54:	b570      	push	{r4, r5, r6, lr}
 8007e56:	4604      	mov	r4, r0
  hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8007e58:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8007e5c:	f7fa fa72 	bl	8002344 <RCM_ExecRegularConv>
  if ( hAux != 0xFFFF )
 8007e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007e64:	4298      	cmp	r0, r3
 8007e66:	d01b      	beq.n	8007ea0 <RVBS_CalcAvVbus+0x4c>
    pHandle->aBuffer[pHandle->index] = hAux;
 8007e68:	6a26      	ldr	r6, [r4, #32]
 8007e6a:	f894 e025 	ldrb.w	lr, [r4, #37]	; 0x25
 8007e6e:	f826 001e 	strh.w	r0, [r6, lr, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007e72:	8b25      	ldrh	r5, [r4, #24]
 8007e74:	b1cd      	cbz	r5, 8007eaa <RVBS_CalcAvVbus+0x56>
 8007e76:	2300      	movs	r3, #0
    wtemp = 0;
 8007e78:	461a      	mov	r2, r3
      wtemp += pHandle->aBuffer[i];
 8007e7a:	f836 c013 	ldrh.w	ip, [r6, r3, lsl #1]
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007e7e:	3301      	adds	r3, #1
 8007e80:	b2d9      	uxtb	r1, r3
 8007e82:	42a9      	cmp	r1, r5
      wtemp += pHandle->aBuffer[i];
 8007e84:	4462      	add	r2, ip
    for ( i = 0; i < pHandle->LowPassFilterBW; i++ )
 8007e86:	460b      	mov	r3, r1
 8007e88:	d3f7      	bcc.n	8007e7a <RVBS_CalcAvVbus+0x26>
    wtemp /= pHandle->LowPassFilterBW;
 8007e8a:	fbb2 f2f5 	udiv	r2, r2, r5
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007e8e:	1e6b      	subs	r3, r5, #1
 8007e90:	459e      	cmp	lr, r3
    pHandle->_Super.LatestConv = hAux;
 8007e92:	80a0      	strh	r0, [r4, #4]
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007e94:	80e2      	strh	r2, [r4, #6]
    if ( pHandle->index < pHandle->LowPassFilterBW - 1 )
 8007e96:	da0a      	bge.n	8007eae <RVBS_CalcAvVbus+0x5a>
      pHandle->index++;
 8007e98:	f10e 0e01 	add.w	lr, lr, #1
 8007e9c:	f884 e025 	strb.w	lr, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007ea0:	4620      	mov	r0, r4
 8007ea2:	f7ff ffcb 	bl	8007e3c <RVBS_CheckFaultState>
 8007ea6:	8120      	strh	r0, [r4, #8]
}
 8007ea8:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->_Super.AvBusVoltage_d = ( uint16_t )wtemp;
 8007eaa:	80e5      	strh	r5, [r4, #6]
    pHandle->_Super.LatestConv = hAux;
 8007eac:	80a0      	strh	r0, [r4, #4]
      pHandle->index = 0;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  pHandle->_Super.FaultState = RVBS_CheckFaultState( pHandle );
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	f7ff ffc1 	bl	8007e3c <RVBS_CheckFaultState>
 8007eba:	8120      	strh	r0, [r4, #8]
}
 8007ebc:	bd70      	pop	{r4, r5, r6, pc}
 8007ebe:	bf00      	nop

08007ec0 <REMNG_Init>:
  * @param  pHandle related Handle of struct RampMngr_Handle_t
  * @retval none.
  */
void REMNG_Init( RampExtMngr_Handle_t * pHandle )
{
  pHandle->Ext = 0;
 8007ec0:	2300      	movs	r3, #0
  pHandle->TargetFinal = 0;
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
  pHandle->ScalingFactor = 1u;
 8007ec2:	2201      	movs	r2, #1
  pHandle->TargetFinal = 0;
 8007ec4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  pHandle->IncDecAmount = 0;
 8007ec8:	e9c0 3303 	strd	r3, r3, [r0, #12]
  pHandle->ScalingFactor = 1u;
 8007ecc:	6142      	str	r2, [r0, #20]

#ifdef FASTDIV
  FD_Init( & ( pHandle->fd ) );
#endif

}
 8007ece:	4770      	bx	lr

08007ed0 <RUC_SetPhaseDurationms>:
  *         This parameter must be set in millisecond.
  *  @retval none
  */
__weak void RUC_SetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, uint16_t hDurationms )
{
  pHandle->ParamsData[bPhase].hDurationms = hDurationms;
 8007ed0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ed4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ed8:	818a      	strh	r2, [r1, #12]
}
 8007eda:	4770      	bx	lr

08007edc <RUC_SetPhaseFinalMecSpeedUnit>:
  *  @retval none
  */
__weak void RUC_SetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase,
                                    int16_t hFinalMecSpeedUnit )
{
  pHandle->ParamsData[bPhase].hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007edc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ee0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ee4:	81ca      	strh	r2, [r1, #14]
}
 8007ee6:	4770      	bx	lr

08007ee8 <RUC_SetPhaseFinalTorque>:
  * @param  hFinalTorque: new targetted motor torque.
  *  @retval none
  */
__weak void RUC_SetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase, int16_t hFinalTorque )
{
  pHandle->ParamsData[bPhase].hFinalTorque = hFinalTorque;
 8007ee8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007eec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007ef0:	820a      	strh	r2, [r1, #16]
}
 8007ef2:	4770      	bx	lr

08007ef4 <RUC_GetPhaseDurationms>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns duration used in selected phase.
  */
__weak uint16_t RUC_GetPhaseDurationms( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( uint16_t )pHandle->ParamsData[bPhase].hDurationms );
 8007ef4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007ef8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007efc:	8988      	ldrh	r0, [r1, #12]
 8007efe:	4770      	bx	lr

08007f00 <RUC_GetPhaseFinalMecSpeedUnit>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted rotor speed set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalMecSpeedUnit( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalMecSpeedUnit );
 8007f00:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f04:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007f08:	f9b1 000e 	ldrsh.w	r0, [r1, #14]
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop

08007f10 <RUC_GetPhaseFinalTorque>:
  *         This parameter must be a number between 0 and 6.
  *  @retval Returns targetted motor torque set in selected phase.
  */
__weak int16_t RUC_GetPhaseFinalTorque( RevUpCtrl_Handle_t * pHandle, uint8_t bPhase )
{
  return ( ( int16_t )pHandle->ParamsData[bPhase].hFinalTorque );
 8007f10:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8007f14:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 8007f18:	f9b1 0010 	ldrsh.w	r0, [r1, #16]
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop

08007f20 <RUC_GetNumberOfPhases>:
  *  @retval Returns number of phases relative to the programmed revup.
  */
__weak uint8_t RUC_GetNumberOfPhases( RevUpCtrl_Handle_t * pHandle )
{
  return ( ( uint8_t )pHandle->bPhaseNbr );
}
 8007f20:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop

08007f28 <SPD_GetElAngle>:
  * @retval int16_t rotor electrical angle (s16degrees)
  */
__weak int16_t SPD_GetElAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hElAngle );
}
 8007f28:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop

08007f30 <SPD_GetMecAngle>:
  * @retval int16_t rotor mechanical angle (s16degrees)
  */
__weak int32_t SPD_GetMecAngle( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->wMecAngle );
}
 8007f30:	6880      	ldr	r0, [r0, #8]
 8007f32:	4770      	bx	lr

08007f34 <SPD_GetAvrgMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  */
__weak int16_t SPD_GetAvrgMecSpeedUnit( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->hAvrMecSpeedUnit );
}
 8007f34:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop

08007f3c <SPD_GetInstElSpeedDpp>:
  * @retval int16_t rotor instantaneous electrical speed (Dpp)
  */
__weak int16_t SPD_GetInstElSpeedDpp( SpeednPosFdbk_Handle_t * pHandle )
{
  return ( pHandle->InstantaneousElSpeedDpp );
}
 8007f3c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8007f40:	4770      	bx	lr
 8007f42:	bf00      	nop

08007f44 <SPD_IsMecSpeedReliable>:
  int16_t hAux;

  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

  /* Compute absoulte value of mechanical speed */
  if ( *pMecSpeedUnit < 0 )
 8007f44:	f9b1 3000 	ldrsh.w	r3, [r1]
  else
  {
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
  }

  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007f48:	8a81      	ldrh	r1, [r0, #20]
{
 8007f4a:	b500      	push	{lr}
  if ( *pMecSpeedUnit < 0 )
 8007f4c:	2b00      	cmp	r3, #0
    hAux = -( *pMecSpeedUnit );
 8007f4e:	bfb8      	it	lt
 8007f50:	425b      	neglt	r3, r3
  {
    SpeedError = true;
  }

  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007f52:	f8b0 e016 	ldrh.w	lr, [r0, #22]
  uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007f56:	f890 c003 	ldrb.w	ip, [r0, #3]
  bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007f5a:	7802      	ldrb	r2, [r0, #0]
    hAbsMecSpeedUnit = ( uint16_t )( *pMecSpeedUnit );
 8007f5c:	b29b      	uxth	r3, r3
  if ( hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit )
 8007f5e:	459e      	cmp	lr, r3
 8007f60:	d819      	bhi.n	8007f96 <SPD_IsMecSpeedReliable+0x52>
  if ( hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit )
 8007f62:	4299      	cmp	r1, r3
 8007f64:	bf2c      	ite	cs
 8007f66:	2300      	movcs	r3, #0
 8007f68:	2301      	movcc	r3, #1
  {
    SpeedError = true;
  }

  /* Compute absoulte value of mechanical acceleration */
  if ( pHandle->hMecAccelUnitP < 0 )
 8007f6a:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
  else
  {
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
  }

  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007f6e:	f8b0 e018 	ldrh.w	lr, [r0, #24]
  if ( pHandle->hMecAccelUnitP < 0 )
 8007f72:	2900      	cmp	r1, #0
    hAux = -( pHandle->hMecAccelUnitP );
 8007f74:	bfb8      	it	lt
 8007f76:	4249      	neglt	r1, r1
    hAbsMecAccelUnitP = ( uint16_t )( pHandle->hMecAccelUnitP );
 8007f78:	b289      	uxth	r1, r1
  if ( hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP )
 8007f7a:	458e      	cmp	lr, r1
 8007f7c:	d300      	bcc.n	8007f80 <SPD_IsMecSpeedReliable+0x3c>
  {
    SpeedError = true;
  }

  if ( SpeedError == true )
 8007f7e:	b163      	cbz	r3, 8007f9a <SPD_IsMecSpeedReliable+0x56>
  {
    if ( bSpeedErrorNumber < bMaximumSpeedErrorsNumber )
 8007f80:	4594      	cmp	ip, r2
 8007f82:	d901      	bls.n	8007f88 <SPD_IsMecSpeedReliable+0x44>
    {
      bSpeedErrorNumber++;
 8007f84:	3201      	adds	r2, #1
 8007f86:	b2d2      	uxtb	r2, r2
  if ( bSpeedErrorNumber == bMaximumSpeedErrorsNumber )
  {
    SpeedSensorReliability = false;
  }

  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007f88:	7002      	strb	r2, [r0, #0]

  return ( SpeedSensorReliability );
}
 8007f8a:	ebb2 000c 	subs.w	r0, r2, ip
 8007f8e:	bf18      	it	ne
 8007f90:	2001      	movne	r0, #1
 8007f92:	f85d fb04 	ldr.w	pc, [sp], #4
    SpeedError = true;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e7e7      	b.n	8007f6a <SPD_IsMecSpeedReliable+0x26>
      bSpeedErrorNumber = 0u;
 8007f9a:	4594      	cmp	ip, r2
 8007f9c:	bf88      	it	hi
 8007f9e:	2200      	movhi	r2, #0
  pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007fa0:	7002      	strb	r2, [r0, #0]
}
 8007fa2:	ebb2 000c 	subs.w	r0, r2, ip
 8007fa6:	bf18      	it	ne
 8007fa8:	2001      	movne	r0, #1
 8007faa:	f85d fb04 	ldr.w	pc, [sp], #4
 8007fae:	bf00      	nop

08007fb0 <SPD_GetS16Speed>:
  * @retval int16_t The average mechanical rotor speed expressed in "S16Speed".
  */
__weak int16_t SPD_GetS16Speed( SpeednPosFdbk_Handle_t * pHandle )
{
  int32_t wAux = ( int32_t ) pHandle->hAvrMecSpeedUnit;
  wAux *= INT16_MAX;
 8007fb0:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007fb4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
  wAux *= INT16_MAX;
 8007fb8:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
  wAux /= ( int16_t ) pHandle->hMaxReliableMecSpeedUnit;
 8007fbc:	fb93 f0f0 	sdiv	r0, r3, r0
  return ( int16_t )wAux;
}
 8007fc0:	b200      	sxth	r0, r0
 8007fc2:	4770      	bx	lr

08007fc4 <STC_Init>:
{

  pHandle->PISpeed = pPI;
  pHandle->SPD = SPD_Handle;
  pHandle->Mode = pHandle->ModeDefault;
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007fc4:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
  pHandle->PISpeed = pPI;
 8007fc8:	6101      	str	r1, [r0, #16]
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007fca:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
  pHandle->SPD = SPD_Handle;
 8007fce:	6142      	str	r2, [r0, #20]
{
 8007fd0:	b410      	push	{r4}
  pHandle->Mode = pHandle->ModeDefault;
 8007fd2:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8007fd6:	7004      	strb	r4, [r0, #0]
  pHandle->TargetFinal = 0;
 8007fd8:	2300      	movs	r3, #0
  pHandle->SpeedRefUnitExt = ( int32_t )pHandle->MecSpeedRefUnitDefault * 65536;
 8007fda:	ea4f 440c 	mov.w	r4, ip, lsl #16
  pHandle->TorqueRef = ( int32_t )pHandle->TorqueRefDefault * 65536;
 8007fde:	0409      	lsls	r1, r1, #16
 8007fe0:	e9c0 4101 	strd	r4, r1, [r0, #4]
  pHandle->TargetFinal = 0;
 8007fe4:	8043      	strh	r3, [r0, #2]
  pHandle->RampRemainingStep = 0u;
  pHandle->IncDecAmount = 0;
}
 8007fe6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->RampRemainingStep = 0u;
 8007fea:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 8007fec:	6183      	str	r3, [r0, #24]
}
 8007fee:	4770      	bx	lr

08007ff0 <STC_SetSpeedSensor>:
  * @param SPD_Handle Speed sensor component to be set.
  * @retval none
  */
__weak void STC_SetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle, SpeednPosFdbk_Handle_t * SPD_Handle )
{
  pHandle->SPD = SPD_Handle;
 8007ff0:	6141      	str	r1, [r0, #20]
}
 8007ff2:	4770      	bx	lr

08007ff4 <STC_GetSpeedSensor>:
  * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
  */
__weak SpeednPosFdbk_Handle_t * STC_GetSpeedSensor( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( pHandle->SPD );
}
 8007ff4:	6940      	ldr	r0, [r0, #20]
 8007ff6:	4770      	bx	lr

08007ff8 <STC_Clear>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none.
  */
__weak void STC_Clear( SpeednTorqCtrl_Handle_t * pHandle )
{
  if ( pHandle->Mode == STC_SPEED_MODE )
 8007ff8:	7803      	ldrb	r3, [r0, #0]
 8007ffa:	2b01      	cmp	r3, #1
 8007ffc:	d000      	beq.n	8008000 <STC_Clear+0x8>
  {
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
  }
}
 8007ffe:	4770      	bx	lr
    PID_SetIntegralTerm( pHandle->PISpeed, 0 );
 8008000:	6900      	ldr	r0, [r0, #16]
 8008002:	2100      	movs	r1, #0
 8008004:	f7fe bd78 	b.w	8006af8 <PID_SetIntegralTerm>

08008008 <STC_GetMecSpeedRefUnit>:
  * @retval int16_t current mechanical rotor speed reference expressed in tenths
  *         of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->SpeedRefUnitExt / 65536 ) );
 8008008:	6840      	ldr	r0, [r0, #4]
 800800a:	2800      	cmp	r0, #0
 800800c:	bfbc      	itt	lt
 800800e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008012:	30ff      	addlt	r0, #255	; 0xff
}
 8008014:	1400      	asrs	r0, r0, #16
 8008016:	4770      	bx	lr

08008018 <STC_GetTorqueRef>:
  * @retval int16_t current motor torque reference. This value represents
  *         actually the Iq current expressed in digit.
  */
__weak int16_t STC_GetTorqueRef( SpeednTorqCtrl_Handle_t * pHandle )
{
  return ( ( int16_t )( pHandle->TorqueRef / 65536 ) );
 8008018:	6880      	ldr	r0, [r0, #8]
 800801a:	2800      	cmp	r0, #0
 800801c:	bfbc      	itt	lt
 800801e:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008022:	30ff      	addlt	r0, #255	; 0xff
}
 8008024:	1400      	asrs	r0, r0, #16
 8008026:	4770      	bx	lr

08008028 <STC_SetControlMode>:
  * @retval none
  */
__weak void STC_SetControlMode( SpeednTorqCtrl_Handle_t * pHandle, STC_Modality_t bMode )
{
  pHandle->Mode = bMode;
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8008028:	2300      	movs	r3, #0
  pHandle->Mode = bMode;
 800802a:	7001      	strb	r1, [r0, #0]
  pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800802c:	60c3      	str	r3, [r0, #12]
}
 800802e:	4770      	bx	lr

08008030 <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp( SpeednTorqCtrl_Handle_t * pHandle, int16_t hTargetFinal, uint32_t hDurationms )
{
 8008030:	b570      	push	{r4, r5, r6, lr}
  uint32_t wAux;
  int32_t wAux1;
  int16_t hCurrentReference;

  /* Check if the hTargetFinal is out of the bound of application. */
  if ( pHandle->Mode == STC_TORQUE_MODE )
 8008032:	7803      	ldrb	r3, [r0, #0]
{
 8008034:	4604      	mov	r4, r0
 8008036:	460d      	mov	r5, r1
 8008038:	4616      	mov	r6, r2
  if ( pHandle->Mode == STC_TORQUE_MODE )
 800803a:	b323      	cbz	r3, 8008086 <STC_ExecRamp+0x56>
    }
#endif
  }
  else
  {
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800803c:	6840      	ldr	r0, [r0, #4]

#ifdef CHECK_BOUNDARY
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800803e:	8be3      	ldrh	r3, [r4, #30]
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 8008040:	2800      	cmp	r0, #0
 8008042:	bfbc      	itt	lt
 8008044:	f500 407f 	addlt.w	r0, r0, #65280	; 0xff00
 8008048:	30ff      	addlt	r0, #255	; 0xff
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 800804a:	4299      	cmp	r1, r3
    hCurrentReference = ( int16_t )( pHandle->SpeedRefUnitExt / 65536 );
 800804c:	ea4f 4020 	mov.w	r0, r0, asr #16
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxAppPositiveMecSpeedUnit )
 8008050:	dd01      	ble.n	8008056 <STC_ExecRamp+0x26>
      AllowedRange = false;
 8008052:	2000      	movs	r0, #0
      pHandle->IncDecAmount = wAux1;
    }
  }

  return AllowedRange;
}
 8008054:	bd70      	pop	{r4, r5, r6, pc}
    else if ( hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit )
 8008056:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800805a:	428b      	cmp	r3, r1
 800805c:	dcf9      	bgt.n	8008052 <STC_ExecRamp+0x22>
    else if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinAppPositiveMecSpeedUnit )
 800805e:	8c23      	ldrh	r3, [r4, #32]
 8008060:	4299      	cmp	r1, r3
 8008062:	da03      	bge.n	800806c <STC_ExecRamp+0x3c>
      if ( hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit )
 8008064:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8008068:	428b      	cmp	r3, r1
 800806a:	dbf2      	blt.n	8008052 <STC_ExecRamp+0x22>
    if ( hDurationms == 0u )
 800806c:	b9ae      	cbnz	r6, 800809a <STC_ExecRamp+0x6a>
      if ( pHandle->Mode == STC_SPEED_MODE )
 800806e:	7823      	ldrb	r3, [r4, #0]
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008070:	042d      	lsls	r5, r5, #16
      if ( pHandle->Mode == STC_SPEED_MODE )
 8008072:	2b01      	cmp	r3, #1
      pHandle->RampRemainingStep = 0u;
 8008074:	f04f 0300 	mov.w	r3, #0
        pHandle->SpeedRefUnitExt = ( int32_t )hTargetFinal * 65536;
 8008078:	bf0c      	ite	eq
 800807a:	6065      	streq	r5, [r4, #4]
        pHandle->TorqueRef = ( int32_t )hTargetFinal * 65536;
 800807c:	60a5      	strne	r5, [r4, #8]
      pHandle->RampRemainingStep = 0u;
 800807e:	60e3      	str	r3, [r4, #12]
      pHandle->IncDecAmount = 0;
 8008080:	61a3      	str	r3, [r4, #24]
 8008082:	2001      	movs	r0, #1
}
 8008084:	bd70      	pop	{r4, r5, r6, pc}
    hCurrentReference = STC_GetTorqueRef( pHandle );
 8008086:	f7ff ffc7 	bl	8008018 <STC_GetTorqueRef>
    if ( ( int32_t )hTargetFinal > ( int32_t )pHandle->MaxPositiveTorque )
 800808a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800808c:	429d      	cmp	r5, r3
 800808e:	dce0      	bgt.n	8008052 <STC_ExecRamp+0x22>
    if ( ( int32_t )hTargetFinal < ( int32_t )pHandle->MinNegativeTorque )
 8008090:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8008094:	42ab      	cmp	r3, r5
 8008096:	dcdc      	bgt.n	8008052 <STC_ExecRamp+0x22>
 8008098:	e7e8      	b.n	800806c <STC_ExecRamp+0x3c>
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800809a:	8ba3      	ldrh	r3, [r4, #28]
      pHandle->TargetFinal = hTargetFinal;
 800809c:	8065      	strh	r5, [r4, #2]
      wAux = ( uint32_t )hDurationms * ( uint32_t )pHandle->STCFrequencyHz;
 800809e:	fb06 f303 	mul.w	r3, r6, r3
      wAux /= 1000u;
 80080a2:	4e06      	ldr	r6, [pc, #24]	; (80080bc <STC_ExecRamp+0x8c>)
 80080a4:	fba6 2303 	umull	r2, r3, r6, r3
 80080a8:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 80080aa:	3301      	adds	r3, #1
      wAux1 = ( ( int32_t )hTargetFinal - ( int32_t )hCurrentReference ) * 65536;
 80080ac:	1a28      	subs	r0, r5, r0
 80080ae:	0400      	lsls	r0, r0, #16
      pHandle->RampRemainingStep++;
 80080b0:	60e3      	str	r3, [r4, #12]
      wAux1 /= ( int32_t )pHandle->RampRemainingStep;
 80080b2:	fb90 f0f3 	sdiv	r0, r0, r3
      pHandle->IncDecAmount = wAux1;
 80080b6:	61a0      	str	r0, [r4, #24]
 80080b8:	2001      	movs	r0, #1
}
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	10624dd3 	.word	0x10624dd3

080080c0 <STC_StopRamp>:
  * @retval none
  */
__weak void STC_StopRamp( SpeednTorqCtrl_Handle_t * pHandle )
{

  pHandle->RampRemainingStep = 0u;
 80080c0:	2300      	movs	r3, #0
 80080c2:	60c3      	str	r3, [r0, #12]
  pHandle->IncDecAmount = 0;
 80080c4:	6183      	str	r3, [r0, #24]
}
 80080c6:	4770      	bx	lr

080080c8 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference( SpeednTorqCtrl_Handle_t * pHandle )
{
 80080c8:	b570      	push	{r4, r5, r6, lr}
  int16_t hTargetSpeed;
  int16_t hError;

  if ( pHandle->Mode == STC_TORQUE_MODE )
  {
    wCurrentReference = pHandle->TorqueRef;
 80080ca:	e9d0 6101 	ldrd	r6, r1, [r0, #4]
  if ( pHandle->Mode == STC_TORQUE_MODE )
 80080ce:	7802      	ldrb	r2, [r0, #0]
    wCurrentReference = pHandle->SpeedRefUnitExt;
  }

  /* Update the speed reference or the torque reference according to the mode
     and terminates the ramp if needed. */
  if ( pHandle->RampRemainingStep > 1u )
 80080d0:	68c3      	ldr	r3, [r0, #12]
    wCurrentReference = pHandle->TorqueRef;
 80080d2:	2a00      	cmp	r2, #0
 80080d4:	bf08      	it	eq
 80080d6:	460e      	moveq	r6, r1
  if ( pHandle->RampRemainingStep > 1u )
 80080d8:	2b01      	cmp	r3, #1
{
 80080da:	4604      	mov	r4, r0
  if ( pHandle->RampRemainingStep > 1u )
 80080dc:	d90c      	bls.n	80080f8 <STC_CalcTorqueReference+0x30>
  {
    /* Increment/decrement the reference value. */
    wCurrentReference += pHandle->IncDecAmount;
 80080de:	6981      	ldr	r1, [r0, #24]
 80080e0:	440e      	add	r6, r1

    /* Decrement the number of remaining steps */
    pHandle->RampRemainingStep--;
 80080e2:	3b01      	subs	r3, #1
  if ( pHandle->Mode == STC_SPEED_MODE )
  {
    /* Run the speed control loop */

    /* Compute speed error */
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80080e4:	2e00      	cmp	r6, #0
    pHandle->RampRemainingStep--;
 80080e6:	60c3      	str	r3, [r0, #12]
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80080e8:	4630      	mov	r0, r6
 80080ea:	db09      	blt.n	8008100 <STC_CalcTorqueReference+0x38>
 80080ec:	1405      	asrs	r5, r0, #16
  if ( pHandle->Mode == STC_SPEED_MODE )
 80080ee:	2a01      	cmp	r2, #1
 80080f0:	d00a      	beq.n	8008108 <STC_CalcTorqueReference+0x40>
    pHandle->SpeedRefUnitExt = wCurrentReference;
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
  }
  else
  {
    pHandle->TorqueRef = wCurrentReference;
 80080f2:	60a6      	str	r6, [r4, #8]
    hTorqueReference = ( int16_t )( wCurrentReference / 65536 );
 80080f4:	b228      	sxth	r0, r5
  }

  return hTorqueReference;
}
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
  else if ( pHandle->RampRemainingStep == 1u )
 80080f8:	d012      	beq.n	8008120 <STC_CalcTorqueReference+0x58>
    hTargetSpeed = ( int16_t )( wCurrentReference / 65536 );
 80080fa:	2e00      	cmp	r6, #0
 80080fc:	4630      	mov	r0, r6
 80080fe:	daf5      	bge.n	80080ec <STC_CalcTorqueReference+0x24>
 8008100:	f506 407f 	add.w	r0, r6, #65280	; 0xff00
 8008104:	30ff      	adds	r0, #255	; 0xff
 8008106:	e7f1      	b.n	80080ec <STC_CalcTorqueReference+0x24>
    hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit( pHandle->SPD );
 8008108:	6960      	ldr	r0, [r4, #20]
 800810a:	f7ff ff13 	bl	8007f34 <SPD_GetAvrgMecSpeedUnit>
    hError = hTargetSpeed - hMeasuredSpeed;
 800810e:	1a29      	subs	r1, r5, r0
    hTorqueReference = PI_Controller( pHandle->PISpeed, ( int32_t )hError );
 8008110:	b209      	sxth	r1, r1
 8008112:	6920      	ldr	r0, [r4, #16]
 8008114:	f7fe fcfc 	bl	8006b10 <PI_Controller>
    pHandle->TorqueRef = ( int32_t )hTorqueReference * 65536;
 8008118:	0403      	lsls	r3, r0, #16
 800811a:	e9c4 6301 	strd	r6, r3, [r4, #4]
}
 800811e:	bd70      	pop	{r4, r5, r6, pc}
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008120:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
    pHandle->RampRemainingStep = 0u;
 8008124:	2300      	movs	r3, #0
    wCurrentReference = ( int32_t )pHandle->TargetFinal * 65536;
 8008126:	042e      	lsls	r6, r5, #16
    pHandle->RampRemainingStep = 0u;
 8008128:	60c3      	str	r3, [r0, #12]
 800812a:	e7e0      	b.n	80080ee <STC_CalcTorqueReference+0x26>

0800812c <STC_GetMecSpeedRefUnitDefault>:
  *         expressed in tenths of HZ.
  */
__weak int16_t STC_GetMecSpeedRefUnitDefault( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MecSpeedRefUnitDefault;
}
 800812c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop

08008134 <STC_GetMaxAppPositiveMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak uint16_t STC_GetMaxAppPositiveMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MaxAppPositiveMecSpeedUnit;
}
 8008134:	8bc0      	ldrh	r0, [r0, #30]
 8008136:	4770      	bx	lr

08008138 <STC_GetMinAppNegativeMecSpeedUnit>:
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  */
__weak int16_t STC_GetMinAppNegativeMecSpeedUnit( SpeednTorqCtrl_Handle_t * pHandle )
{
  return pHandle->MinAppNegativeMecSpeedUnit;
}
 8008138:	f9b0 0024 	ldrsh.w	r0, [r0, #36]	; 0x24
 800813c:	4770      	bx	lr
 800813e:	bf00      	nop

08008140 <STC_GetDefaultIqdref>:
  * @retval default values of Iqdref.
  */
__weak qd_t STC_GetDefaultIqdref( SpeednTorqCtrl_Handle_t * pHandle )
{
  qd_t IqdRefDefault;
  IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008140:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
  IqdRefDefault.d = pHandle->IdrefDefault;
  return IqdRefDefault;
 8008144:	2200      	movs	r2, #0
 8008146:	b299      	uxth	r1, r3
 8008148:	f361 020f 	bfi	r2, r1, #0, #16
 800814c:	0c1b      	lsrs	r3, r3, #16
 800814e:	f363 421f 	bfi	r2, r3, #16, #16
{
 8008152:	b082      	sub	sp, #8
}
 8008154:	4610      	mov	r0, r2
 8008156:	b002      	add	sp, #8
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop

0800815c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed( SpeednTorqCtrl_Handle_t * pHandle )
{
 800815c:	b510      	push	{r4, lr}
 800815e:	4604      	mov	r4, r0
  pHandle->SpeedRefUnitExt = ( int32_t )SPD_GetAvrgMecSpeedUnit( pHandle->SPD ) * ( int32_t )65536;
 8008160:	6940      	ldr	r0, [r0, #20]
 8008162:	f7ff fee7 	bl	8007f34 <SPD_GetAvrgMecSpeedUnit>
 8008166:	0400      	lsls	r0, r0, #16
 8008168:	6060      	str	r0, [r4, #4]
}
 800816a:	bd10      	pop	{r4, pc}

0800816c <STM_Init>:
  * @retval none.
  */
__weak void STM_Init( STM_Handle_t * pHandle )
{

  pHandle->bState = IDLE;
 800816c:	2300      	movs	r3, #0
 800816e:	7003      	strb	r3, [r0, #0]
  pHandle->hFaultNow = MC_NO_FAULTS;
 8008170:	f8c0 3002 	str.w	r3, [r0, #2]
  pHandle->hFaultOccurred = MC_NO_FAULTS;
}
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop

08008178 <STM_FaultProcessing>:
                             hResetErrors )
{
  State_t LocalState =  pHandle->bState;

  /* Set current errors */
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 8008178:	8843      	ldrh	r3, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 800817a:	f8b0 c004 	ldrh.w	ip, [r0, #4]
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800817e:	430b      	orrs	r3, r1
 8008180:	ea23 0202 	bic.w	r2, r3, r2
  State_t LocalState =  pHandle->bState;
 8008184:	7803      	ldrb	r3, [r0, #0]
  pHandle->hFaultOccurred |= hSetErrors;
 8008186:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800818a:	b292      	uxth	r2, r2

  if ( LocalState == FAULT_NOW )
 800818c:	2b0a      	cmp	r3, #10
  pHandle->hFaultNow = ( pHandle->hFaultNow | hSetErrors ) & ( ~hResetErrors );
 800818e:	8042      	strh	r2, [r0, #2]
  pHandle->hFaultOccurred |= hSetErrors;
 8008190:	8081      	strh	r1, [r0, #4]
  if ( LocalState == FAULT_NOW )
 8008192:	d006      	beq.n	80081a2 <STM_FaultProcessing+0x2a>
      LocalState = FAULT_OVER;
    }
  }
  else
  {
    if ( pHandle->hFaultNow != MC_NO_FAULTS )
 8008194:	b90a      	cbnz	r2, 800819a <STM_FaultProcessing+0x22>
      LocalState = FAULT_NOW;
    }
  }

  return ( LocalState );
}
 8008196:	4618      	mov	r0, r3
 8008198:	4770      	bx	lr
      pHandle->bState = FAULT_NOW;
 800819a:	230a      	movs	r3, #10
 800819c:	7003      	strb	r3, [r0, #0]
}
 800819e:	4618      	mov	r0, r3
 80081a0:	4770      	bx	lr
    if ( pHandle->hFaultNow == MC_NO_FAULTS )
 80081a2:	2a00      	cmp	r2, #0
 80081a4:	d1f7      	bne.n	8008196 <STM_FaultProcessing+0x1e>
      pHandle->bState = FAULT_OVER;
 80081a6:	230b      	movs	r3, #11
 80081a8:	7003      	strb	r3, [r0, #0]
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop

080081b0 <STM_NextState>:
{
 80081b0:	b508      	push	{r3, lr}
  switch ( bCurrentState )
 80081b2:	7803      	ldrb	r3, [r0, #0]
 80081b4:	2b14      	cmp	r3, #20
 80081b6:	d810      	bhi.n	80081da <STM_NextState+0x2a>
 80081b8:	e8df f003 	tbb	[pc, r3]
 80081bc:	200d3457 	.word	0x200d3457
 80081c0:	500d532a 	.word	0x500d532a
 80081c4:	0f0f484d 	.word	0x0f0f484d
 80081c8:	455e0b1b 	.word	0x455e0b1b
 80081cc:	3b3f6342 	.word	0x3b3f6342
 80081d0:	31          	.byte	0x31
 80081d1:	00          	.byte	0x00
      if ( ( bState == ALIGN_OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 80081d2:	290e      	cmp	r1, #14
 80081d4:	d00f      	beq.n	80081f6 <STM_NextState+0x46>
      if ( bState == ANY_STOP )
 80081d6:	2907      	cmp	r1, #7
 80081d8:	d00d      	beq.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80081da:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d014      	beq.n	800820c <STM_NextState+0x5c>
 80081e2:	2907      	cmp	r1, #7
 80081e4:	d012      	beq.n	800820c <STM_NextState+0x5c>
      STM_FaultProcessing( pHandle, MC_SW_ERROR, 0u );
 80081e6:	2200      	movs	r2, #0
 80081e8:	2180      	movs	r1, #128	; 0x80
 80081ea:	f7ff ffc5 	bl	8008178 <STM_FaultProcessing>
 80081ee:	2000      	movs	r0, #0
}
 80081f0:	bd08      	pop	{r3, pc}
      if ( bState == IDLE )
 80081f2:	2900      	cmp	r1, #0
 80081f4:	d1f1      	bne.n	80081da <STM_NextState+0x2a>
    pHandle->bState = bNewState;
 80081f6:	7001      	strb	r1, [r0, #0]
 80081f8:	2001      	movs	r0, #1
}
 80081fa:	bd08      	pop	{r3, pc}
           ( bState == OFFSET_CALIB ) || ( bState == IDLE_ALIGNMENT ) )
 80081fc:	2911      	cmp	r1, #17
 80081fe:	d8f2      	bhi.n	80081e6 <STM_NextState+0x36>
 8008200:	4b23      	ldr	r3, [pc, #140]	; (8008290 <STM_NextState+0xe0>)
 8008202:	40cb      	lsrs	r3, r1
 8008204:	07da      	lsls	r2, r3, #31
 8008206:	d4f6      	bmi.n	80081f6 <STM_NextState+0x46>
    if ( !( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 8008208:	2903      	cmp	r1, #3
 800820a:	d1ec      	bne.n	80081e6 <STM_NextState+0x36>
 800820c:	2000      	movs	r0, #0
}
 800820e:	bd08      	pop	{r3, pc}
      if ( ( bState == SWITCH_OVER ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008210:	2913      	cmp	r1, #19
 8008212:	d0f0      	beq.n	80081f6 <STM_NextState+0x46>
 8008214:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 8008218:	2b05      	cmp	r3, #5
 800821a:	d1e0      	bne.n	80081de <STM_NextState+0x2e>
 800821c:	e7eb      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) )
 800821e:	2912      	cmp	r1, #18
 8008220:	d1d9      	bne.n	80081d6 <STM_NextState+0x26>
 8008222:	e7e8      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == ANY_STOP ) || ( bState == ALIGN_CHARGE_BOOT_CAP )
 8008224:	2907      	cmp	r1, #7
 8008226:	d0e6      	beq.n	80081f6 <STM_NextState+0x46>
 8008228:	f1a1 030d 	sub.w	r3, r1, #13
 800822c:	2b01      	cmp	r3, #1
 800822e:	d8d4      	bhi.n	80081da <STM_NextState+0x2a>
 8008230:	e7e1      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) || (bState == START_RUN) )
 8008232:	1f0b      	subs	r3, r1, #4
 8008234:	2b01      	cmp	r3, #1
 8008236:	d8ce      	bhi.n	80081d6 <STM_NextState+0x26>
 8008238:	e7dd      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == START ) || ( bState == ANY_STOP ) )
 800823a:	2904      	cmp	r1, #4
 800823c:	d1cb      	bne.n	80081d6 <STM_NextState+0x26>
 800823e:	e7da      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == OFFSET_CALIB ) || ( bState == ANY_STOP ) )
 8008240:	2911      	cmp	r1, #17
 8008242:	d1c8      	bne.n	80081d6 <STM_NextState+0x26>
 8008244:	e7d7      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == ALIGNMENT ) || ( bState == ANY_STOP ) )
 8008246:	2902      	cmp	r1, #2
 8008248:	d1c5      	bne.n	80081d6 <STM_NextState+0x26>
 800824a:	e7d4      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == IDLE ) || ( bState == ICLWAIT ) )
 800824c:	2900      	cmp	r1, #0
 800824e:	d0d2      	beq.n	80081f6 <STM_NextState+0x46>
 8008250:	290c      	cmp	r1, #12
 8008252:	d1c2      	bne.n	80081da <STM_NextState+0x2a>
 8008254:	e7cf      	b.n	80081f6 <STM_NextState+0x46>
      if ( bState == STOP_IDLE )
 8008256:	2909      	cmp	r1, #9
 8008258:	d1bf      	bne.n	80081da <STM_NextState+0x2a>
 800825a:	e7cc      	b.n	80081f6 <STM_NextState+0x46>
      if ( bState == STOP )
 800825c:	2908      	cmp	r1, #8
 800825e:	d1bc      	bne.n	80081da <STM_NextState+0x2a>
 8008260:	e7c9      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == RUN ) || ( bState == ANY_STOP ) )
 8008262:	1f8b      	subs	r3, r1, #6
 8008264:	2b01      	cmp	r3, #1
 8008266:	d8b8      	bhi.n	80081da <STM_NextState+0x2a>
 8008268:	e7c5      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == IDLE_START ) || ( bState == IDLE_ALIGNMENT )
 800826a:	f001 03fd 	and.w	r3, r1, #253	; 0xfd
 800826e:	2b01      	cmp	r3, #1
 8008270:	d0c1      	beq.n	80081f6 <STM_NextState+0x46>
           || ( bState == ICLWAIT ) )
 8008272:	290c      	cmp	r1, #12
 8008274:	d1b5      	bne.n	80081e2 <STM_NextState+0x32>
 8008276:	e7be      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == ALIGN_CLEAR ) || ( bState == ANY_STOP ) )
 8008278:	f001 03f7 	and.w	r3, r1, #247	; 0xf7
 800827c:	2b07      	cmp	r3, #7
 800827e:	d1ac      	bne.n	80081da <STM_NextState+0x2a>
 8008280:	e7b9      	b.n	80081f6 <STM_NextState+0x46>
      if ( ( bState == CLEAR ) || ( bState == ANY_STOP ) || ( bState == WAIT_STOP_MOTOR ) )
 8008282:	2914      	cmp	r1, #20
 8008284:	d8a9      	bhi.n	80081da <STM_NextState+0x2a>
 8008286:	4b03      	ldr	r3, [pc, #12]	; (8008294 <STM_NextState+0xe4>)
 8008288:	40cb      	lsrs	r3, r1
 800828a:	07db      	lsls	r3, r3, #31
 800828c:	d4b3      	bmi.n	80081f6 <STM_NextState+0x46>
 800828e:	e7a4      	b.n	80081da <STM_NextState+0x2a>
 8008290:	00030092 	.word	0x00030092
 8008294:	00140080 	.word	0x00140080

08008298 <STM_GetState>:
  * @retval State_t Current state machine state
  */
__weak State_t STM_GetState( STM_Handle_t * pHandle )
{
  return ( pHandle->bState );
}
 8008298:	7800      	ldrb	r0, [r0, #0]
 800829a:	4770      	bx	lr

0800829c <STM_FaultAcknowledged>:
  */
__weak bool STM_FaultAcknowledged( STM_Handle_t * pHandle )
{
  bool bToBeReturned = false;

  if ( pHandle->bState == FAULT_OVER )
 800829c:	7803      	ldrb	r3, [r0, #0]
 800829e:	2b0b      	cmp	r3, #11
 80082a0:	d001      	beq.n	80082a6 <STM_FaultAcknowledged+0xa>
  bool bToBeReturned = false;
 80082a2:	2000      	movs	r0, #0
    pHandle->hFaultOccurred = MC_NO_FAULTS;
    bToBeReturned = true;
  }

  return ( bToBeReturned );
}
 80082a4:	4770      	bx	lr
    pHandle->bState = STOP_IDLE;
 80082a6:	2209      	movs	r2, #9
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80082a8:	2300      	movs	r3, #0
    pHandle->bState = STOP_IDLE;
 80082aa:	7002      	strb	r2, [r0, #0]
    pHandle->hFaultOccurred = MC_NO_FAULTS;
 80082ac:	8083      	strh	r3, [r0, #4]
    bToBeReturned = true;
 80082ae:	2001      	movs	r0, #1
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop

080082b4 <STM_GetFaultState>:
  */
__weak uint32_t STM_GetFaultState( STM_Handle_t * pHandle )
{
  uint32_t LocalFaultState;

  LocalFaultState = ( uint32_t )( pHandle->hFaultOccurred );
 80082b4:	8883      	ldrh	r3, [r0, #4]
  LocalFaultState |= ( uint32_t )( pHandle->hFaultNow ) << 16;
 80082b6:	8840      	ldrh	r0, [r0, #2]

  return LocalFaultState;
}
 80082b8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop

080082c0 <TC_Init>:
  * @retval none
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t * pPIDPosReg, SpeednTorqCtrl_Handle_t * pSTC, ENCODER_Handle_t * pENC)
{

  pHandle->MovementDuration = 0.0f;
 80082c0:	f04f 0c00 	mov.w	ip, #0
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 80082c4:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->TcTick = 0;
 80082c6:	2300      	movs	r3, #0
  pHandle->pSTC = pSTC;
 80082c8:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->MovementDuration = 0.0f;
 80082cc:	f8c0 c000 	str.w	ip, [r0]
  pHandle->AngleStep = 0.0f;
 80082d0:	f8c0 c00c 	str.w	ip, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 80082d4:	f8c0 c010 	str.w	ip, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 80082d8:	f8c0 c014 	str.w	ip, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 80082dc:	f8c0 c018 	str.w	ip, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 80082e0:	f8c0 c01c 	str.w	ip, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 80082e4:	f8c0 c020 	str.w	ip, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 80082e8:	f8c0 c024 	str.w	ip, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 80082ec:	f8c0 c028 	str.w	ip, [r0, #40]	; 0x28
  pHandle->ElapseTime = 0.0f;
 80082f0:	f8c0 c02c 	str.w	ip, [r0, #44]	; 0x2c
  pHandle->Jerk = 0.0f;
 80082f4:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 80082f8:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 80082fc:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8008300:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8008304:	f8c0 c044 	str.w	ip, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8008308:	f8c0 c048 	str.w	ip, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 800830c:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
  pHandle->TcTick = 0;
 8008310:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->ReceivedTh = 0.0f;
 8008312:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008316:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800831a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 800831e:	4770      	bx	lr

08008320 <TC_MoveCommand>:
  * @param  movementDuration Duration to reach the final position.
  * @retval true  = Trajectory command programmed
  *         false = Not ready for a new trajectory configuration.
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8008320:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8008322:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8008326:	2803      	cmp	r0, #3
 8008328:	d061      	beq.n	80083ee <TC_MoveCommand+0xce>
  {
	  // Back to Move command as the movement duration is different from 0
	  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
  }

  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 800832a:	b108      	cbz	r0, 8008330 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800832c:	2000      	movs	r0, #0

    RetConfigStatus = true;

  }
  return (RetConfigStatus);
}
 800832e:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 8008330:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008338:	ddf9      	ble.n	800832e <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800833a:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800833e:	eddf 7a2f 	vldr	s15, [pc, #188]	; 80083fc <TC_MoveCommand+0xdc>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008342:	ed9f 4a2f 	vldr	s8, [pc, #188]	; 8008400 <TC_MoveCommand+0xe0>
    pHandle->StartingAngle = startingAngle;
 8008346:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800834a:	eef2 6a02 	vmov.f32	s13, #34	; 0x41100000  9.0
 800834e:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->FinalAngle = startingAngle + angleStep;
 8008352:	ee70 3a20 	vadd.f32	s7, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008356:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 800835a:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800835c:	2001      	movs	r0, #1
 800835e:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 8008362:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8008364:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8008366:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8008368:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800836c:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008370:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->FinalAngle = startingAngle + angleStep;
 8008374:	edc3 3a02 	vstr	s7, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008378:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800837c:	eeb2 6a00 	vmov.f32	s12, #32	; 0x41000000  8.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008380:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008384:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008388:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800838c:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008390:	ee27 7aa7 	vmul.f32	s14, s15, s15
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008394:	eeb1 5a08 	vmov.f32	s10, #24	; 0x40c00000  6.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008398:	ee67 6a27 	vmul.f32	s13, s14, s15
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800839c:	ee37 7a07 	vadd.f32	s14, s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80083a0:	eec4 3a26 	vdiv.f32	s7, s8, s13
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80083a4:	eef1 5a0c 	vmov.f32	s11, #28	; 0x40e00000  7.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80083a8:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80083ac:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80083b0:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80083b4:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80083b8:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80083bc:	ee27 7a23 	vmul.f32	s14, s14, s7
    pHandle->AngleStep = angleStep;
 80083c0:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->Theta = startingAngle;
 80083c4:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80083c8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80083cc:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80083d0:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80083d4:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80083d8:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80083dc:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80083e0:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80083e4:	edc3 3a0d 	vstr	s7, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80083e8:	ed83 7a0e 	vstr	s14, [r3, #56]	; 0x38
  return (RetConfigStatus);
 80083ec:	4770      	bx	lr
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 80083ee:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80083f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083f6:	dca0      	bgt.n	800833a <TC_MoveCommand+0x1a>
 80083f8:	e798      	b.n	800832c <TC_MoveCommand+0xc>
 80083fa:	bf00      	nop
 80083fc:	3de38e39 	.word	0x3de38e39
 8008400:	3daaaaab 	.word	0x3daaaaab

08008404 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;
  
  // Estimate speed
  if (pHandle->ReceivedTh > 0) 
 8008404:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008408:	b9a3      	cbnz	r3, 8008434 <TC_FollowCommand+0x30>
  float omega = 0, acceleration = 0, dt = 0;
 800840a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8008488 <TC_FollowCommand+0x84>
 800840e:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8008488 <TC_FollowCommand+0x84>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
    }
  }
  
  // Update state variable
  pHandle->ThetaPrev  = Angle;
 8008412:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
  if (pHandle->ReceivedTh < 2)
  {
    pHandle->ReceivedTh++;
 8008416:	3301      	adds	r3, #1
  pHandle->OmegaPrev = omega;
 8008418:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
    pHandle->ReceivedTh++;
 800841c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;
  
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008420:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 8008422:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 8008426:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 800842a:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800842e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  
  return;
}
 8008432:	4770      	bx	lr
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008434:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8008438:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 800843c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 8008440:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008442:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008446:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8008448:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800844c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008450:	dd12      	ble.n	8008478 <TC_FollowCommand+0x74>
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008452:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 8008456:	ee70 6a66 	vsub.f32	s13, s0, s13
  if (pHandle->ReceivedTh > 1) {
 800845a:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800845c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1) {
 8008460:	d0d5      	beq.n	800840e <TC_FollowCommand+0xa>
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8008462:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 8008466:	ee37 6a46 	vsub.f32	s12, s14, s12
 800846a:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->ThetaPrev  = Angle;
 800846e:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 8008472:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  if (pHandle->ReceivedTh < 2)
 8008476:	e7d3      	b.n	8008420 <TC_FollowCommand+0x1c>
  if (pHandle->ReceivedTh > 1) {
 8008478:	2b01      	cmp	r3, #1
 800847a:	d0c6      	beq.n	800840a <TC_FollowCommand+0x6>
  float omega = 0, acceleration = 0, dt = 0;
 800847c:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8008488 <TC_FollowCommand+0x84>
 8008480:	eef0 6a47 	vmov.f32	s13, s14
 8008484:	e7f3      	b.n	800846e <TC_FollowCommand+0x6a>
 8008486:	bf00      	nop
 8008488:	00000000 	.word	0x00000000

0800848c <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])              // 1st Sub-Step interval time of acceleration phase
 800848c:	edd0 7a0b 	vldr	s15, [r0, #44]	; 0x2c
 8008490:	ed90 7a04 	vldr	s14, [r0, #16]
 8008494:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008498:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849c:	d535      	bpl.n	800850a <TC_MoveExecution+0x7e>
  {
    jerkApplied = pHandle->Jerk;
 800849e:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  }
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
  {

  }
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 80084a2:	edd0 6a00 	vldr	s13, [r0]
  {
    pHandle->Theta = pHandle->FinalAngle;
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
  }

  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80084a6:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
  {
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80084aa:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d113      	bne.n	80084da <TC_MoveExecution+0x4e>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80084b2:	edd0 5a0f 	vldr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80084b6:	ed90 6a10 	vldr	s12, [r0, #64]	; 0x40
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80084ba:	eee7 5a05 	vfma.f32	s11, s14, s10
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80084be:	ed90 5a12 	vldr	s10, [r0, #72]	; 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80084c2:	edc0 5a0f 	vstr	s11, [r0, #60]	; 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80084c6:	eea7 6a25 	vfma.f32	s12, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80084ca:	eef0 5a45 	vmov.f32	s11, s10
 80084ce:	eee7 5a06 	vfma.f32	s11, s14, s12
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80084d2:	ed80 6a10 	vstr	s12, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80084d6:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 80084da:	ee77 7a87 	vadd.f32	s15, s15, s14
bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  // Check that entire sequence (Acceleration - Cruise - Deceleration) is completed.
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80084de:	ee36 7a87 	vadd.f32	s14, s13, s14
  pHandle->ElapseTime += pHandle->SamplingTime;
 80084e2:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80084e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80084ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80084ee:	dd0b      	ble.n	8008508 <TC_MoveExecution+0x7c>
    if (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START) {
 80084f0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80084f4:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 80084f6:	bf04      	itt	eq
 80084f8:	2305      	moveq	r3, #5
 80084fa:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 80084fe:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008500:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8008502:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008504:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8008508:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])         // 2nd Sub-Step interval time of acceleration phase
 800850a:	ed90 7a05 	vldr	s14, [r0, #20]
 800850e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008516:	d504      	bpl.n	8008522 <TC_MoveExecution+0x96>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 8008518:	edd0 6a00 	vldr	s13, [r0]
  float jerkApplied = 0;
 800851c:	ed9f 5a21 	vldr	s10, [pc, #132]	; 80085a4 <TC_MoveExecution+0x118>
 8008520:	e7c1      	b.n	80084a6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])         // 3rd Sub-Step interval time of acceleration phase
 8008522:	ed90 7a06 	vldr	s14, [r0, #24]
 8008526:	eef4 7ac7 	vcmpe.f32	s15, s14
 800852a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800852e:	d418      	bmi.n	8008562 <TC_MoveExecution+0xd6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])         // Speed Cruise phase (after acceleration and before deceleration phases)
 8008530:	ed90 7a07 	vldr	s14, [r0, #28]
 8008534:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800853c:	d50a      	bpl.n	8008554 <TC_MoveExecution+0xc8>
    pHandle->Acceleration = 0.0f;
 800853e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80085a4 <TC_MoveExecution+0x118>
    pHandle->Omega = pHandle->CruiseSpeed;
 8008542:	6b83      	ldr	r3, [r0, #56]	; 0x38
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 8008544:	edd0 6a00 	vldr	s13, [r0]
    pHandle->Acceleration = 0.0f;
 8008548:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
  float jerkApplied = 0;
 800854c:	eeb0 5a47 	vmov.f32	s10, s14
    pHandle->Omega = pHandle->CruiseSpeed;
 8008550:	6403      	str	r3, [r0, #64]	; 0x40
 8008552:	e7a8      	b.n	80084a6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])         // 1st Sub-Step interval time of deceleration phase
 8008554:	ed90 7a08 	vldr	s14, [r0, #32]
 8008558:	eef4 7ac7 	vcmpe.f32	s15, s14
 800855c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008560:	d506      	bpl.n	8008570 <TC_MoveExecution+0xe4>
    jerkApplied = -(pHandle->Jerk);
 8008562:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 8008566:	edd0 6a00 	vldr	s13, [r0]
    jerkApplied = -(pHandle->Jerk);
 800856a:	eeb1 5a45 	vneg.f32	s10, s10
 800856e:	e79a      	b.n	80084a6 <TC_MoveExecution+0x1a>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])         // 2nd Sub-Step interval time of deceleration phase
 8008570:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
 8008574:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857c:	d4cc      	bmi.n	8008518 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration)   // 3rd Sub-Step interval time of deceleration phase
 800857e:	edd0 6a00 	vldr	s13, [r0]
 8008582:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800858a:	d502      	bpl.n	8008592 <TC_MoveExecution+0x106>
    jerkApplied = pHandle->Jerk;
 800858c:	ed90 5a0d 	vldr	s10, [r0, #52]	; 0x34
 8008590:	e789      	b.n	80084a6 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 8008592:	6882      	ldr	r2, [r0, #8]
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8008594:	ed90 7a0c 	vldr	s14, [r0, #48]	; 0x30
    pHandle->Theta = pHandle->FinalAngle;
 8008598:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800859a:	2302      	movs	r3, #2
 800859c:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80085a0:	e79b      	b.n	80084da <TC_MoveExecution+0x4e>
 80085a2:	bf00      	nop
 80085a4:	00000000 	.word	0x00000000

080085a8 <TC_PositionRegulation>:
{
 80085a8:	b538      	push	{r3, r4, r5, lr}
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80085aa:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80085ae:	2b01      	cmp	r3, #1
{
 80085b0:	4604      	mov	r4, r0
  if ( pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING )
 80085b2:	d034      	beq.n	800861e <TC_PositionRegulation+0x76>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 80085b4:	2b03      	cmp	r3, #3
 80085b6:	d10f      	bne.n	80085d8 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085b8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80085bc:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80085c0:	ed94 6a0f 	vldr	s12, [r4, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80085c4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085c8:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80085cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085d0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80085d4:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80085d8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 80085dc:	b903      	cbnz	r3, 80085e0 <TC_PositionRegulation+0x38>
}
 80085de:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80085e0:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8008628 <TC_PositionRegulation+0x80>
 80085e4:	edd4 7a12 	vldr	s15, [r4, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80085e8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80085ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80085ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80085f2:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80085f6:	f7ff fcfd 	bl	8007ff4 <STC_GetSpeedSensor>
 80085fa:	f7ff fc99 	bl	8007f30 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 80085fe:	1a29      	subs	r1, r5, r0
 8008600:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008602:	f7fe facb 	bl	8006b9c <PID_Controller>
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 8008606:	2100      	movs	r1, #0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008608:	4605      	mov	r5, r0
    STC_SetControlMode( pHandle->pSTC, STC_TORQUE_MODE );
 800860a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800860c:	f7ff fd0c 	bl	8008028 <STC_SetControlMode>
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 8008610:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008612:	4629      	mov	r1, r5
 8008614:	2200      	movs	r2, #0
}
 8008616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp( pHandle->pSTC, hTorqueRef_Pos, 0 );
 800861a:	f7ff bd09 	b.w	8008030 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800861e:	f7ff ff35 	bl	800848c <TC_MoveExecution>
  if ( pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING )
 8008622:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 8008626:	e7c5      	b.n	80085b4 <TC_PositionRegulation+0xc>
 8008628:	4622f983 	.word	0x4622f983

0800862c <TC_EncAlignmentCommand>:
{
 800862c:	b510      	push	{r4, lr}
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 800862e:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8008632:	2b02      	cmp	r3, #2
{
 8008634:	b082      	sub	sp, #8
 8008636:	4604      	mov	r4, r0
  if (pHandle->AlignmentStatus == TC_ALIGNMENT_COMPLETED) {
 8008638:	d010      	beq.n	800865c <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800863a:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 800863e:	2b04      	cmp	r3, #4
 8008640:	d011      	beq.n	8008666 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 8008642:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8008644:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8008646:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8008648:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800864a:	6083      	str	r3, [r0, #8]
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800864c:	f884 1062 	strb.w	r1, [r4, #98]	; 0x62
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008650:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      pHandle->PositionControlRegulation = ENABLE;
 8008654:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
}
 8008658:	b002      	add	sp, #8
 800865a:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800865c:	2300      	movs	r3, #0
 800865e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 8008662:	b002      	add	sp, #8
 8008664:	bd10      	pop	{r4, pc}
      pHandle->EncoderAbsoluteAligned = false;
 8008666:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008668:	6e80      	ldr	r0, [r0, #104]	; 0x68
      pHandle->EncoderAbsoluteAligned = false;
 800866a:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800866e:	f7ff fcc1 	bl	8007ff4 <STC_GetSpeedSensor>
 8008672:	f7ff fc5d 	bl	8007f30 <SPD_GetMecAngle>
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 8008676:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800867a:	9001      	str	r0, [sp, #4]
  if ( (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0) )
 800867c:	2b03      	cmp	r3, #3
 800867e:	d005      	beq.n	800868c <TC_EncAlignmentCommand+0x60>
  if ( (pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0) )
 8008680:	b123      	cbz	r3, 800868c <TC_EncAlignmentCommand+0x60>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 8008682:	2301      	movs	r3, #1
 8008684:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8008688:	b002      	add	sp, #8
 800868a:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800868c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008690:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8008754 <TC_EncAlignmentCommand+0x128>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008694:	eddf 5a30 	vldr	s11, [pc, #192]	; 8008758 <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 8008698:	eddf 3a30 	vldr	s7, [pc, #192]	; 800875c <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800869c:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8008760 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 80086a0:	edc4 3a03 	vstr	s7, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80086a4:	eec7 6a27 	vdiv.f32	s13, s14, s15
    pHandle->ElapseTime = 0.0f;
 80086a8:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80086aa:	2201      	movs	r2, #1
 80086ac:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->ElapseTime = 0.0f;
 80086b0:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80086b2:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80086b4:	63e3      	str	r3, [r4, #60]	; 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80086b6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80086ba:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80086be:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80086c2:	ee27 6a86 	vmul.f32	s12, s15, s12
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80086c6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80086ca:	eddf 7a26 	vldr	s15, [pc, #152]	; 8008764 <TC_EncAlignmentCommand+0x138>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80086ce:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80086d2:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80086d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80086da:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80086de:	edc4 6a00 	vstr	s13, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80086e2:	ee67 6aa7 	vmul.f32	s13, s15, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80086e6:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80086ea:	ee26 6aa7 	vmul.f32	s12, s13, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 80086ee:	ee77 2a23 	vadd.f32	s5, s14, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80086f2:	eec2 3a06 	vdiv.f32	s7, s4, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80086f6:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80086fa:	eeb0 4a08 	vmov.f32	s8, #8	; 0x40400000  3.0
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80086fe:	eef1 4a08 	vmov.f32	s9, #24	; 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008702:	eeb1 5a0c 	vmov.f32	s10, #28	; 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008706:	eef2 5a00 	vmov.f32	s11, #32	; 0x41000000  8.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800870a:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800870e:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008712:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008716:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800871a:	ee27 6aa5 	vmul.f32	s12, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800871e:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->StartingAngle = startingAngle;
 8008722:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->FinalAngle = startingAngle + angleStep;
 8008726:	edc4 2a02 	vstr	s5, [r4, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800872a:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800872e:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008732:	ed84 3a05 	vstr	s6, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008736:	ed84 4a06 	vstr	s8, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800873a:	edc4 4a07 	vstr	s9, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800873e:	ed84 5a08 	vstr	s10, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008742:	ed84 6a09 	vstr	s12, [r4, #36]	; 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008746:	edc4 3a0d 	vstr	s7, [r4, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800874a:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->Theta = startingAngle;
 800874e:	ed84 7a12 	vstr	s14, [r4, #72]	; 0x48
  return (RetConfigStatus);
 8008752:	e796      	b.n	8008682 <TC_EncAlignmentCommand+0x56>
 8008754:	3e638e39 	.word	0x3e638e39
 8008758:	38c90fdb 	.word	0x38c90fdb
 800875c:	40c90fdb 	.word	0x40c90fdb
 8008760:	3f060a92 	.word	0x3f060a92
 8008764:	3de38e39 	.word	0x3de38e39

08008768 <TC_EncoderReset>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_EncoderReset(PosCtrl_Handle_t *pHandle)
{
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 8008768:	f890 2052 	ldrb.w	r2, [r0, #82]	; 0x52
{
 800876c:	4603      	mov	r3, r0
  if ((!pHandle->EncoderAbsoluteAligned) && (pHandle->AlignmentStatus == TC_ZERO_ALIGNMENT_START))
 800876e:	b922      	cbnz	r2, 800877a <TC_EncoderReset+0x12>
 8008770:	f890 c062 	ldrb.w	ip, [r0, #98]	; 0x62
 8008774:	f1bc 0f01 	cmp.w	ip, #1
 8008778:	d000      	beq.n	800877c <TC_EncoderReset+0x14>
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
    pHandle->Theta = 0.0f;
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
  }
}
 800877a:	4770      	bx	lr
    pHandle->MecAngleOffset = pHandle->pENC->_Super.hMecAngle;
 800877c:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800877e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8008782:	f8a3 1054 	strh.w	r1, [r3, #84]	; 0x54
    pHandle->pENC->_Super.wMecAngle = 0;
 8008786:	6082      	str	r2, [r0, #8]
    pHandle->EncoderAbsoluteAligned = true;
 8008788:	f883 c052 	strb.w	ip, [r3, #82]	; 0x52
    pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800878c:	f04f 0c02 	mov.w	ip, #2
 8008790:	f883 c062 	strb.w	ip, [r3, #98]	; 0x62
    pHandle->Theta = 0.0f;
 8008794:	f04f 0c00 	mov.w	ip, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008798:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    pHandle->Theta = 0.0f;
 800879c:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
    ENC_SetMecAngle(pHandle->pENC , pHandle->MecAngleOffset);
 80087a0:	f7fe b8c0 	b.w	8006924 <ENC_SetMecAngle>

080087a4 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 80087a4:	b508      	push	{r3, lr}

  return ((float)( (SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16) );
 80087a6:	6e80      	ldr	r0, [r0, #104]	; 0x68
 80087a8:	f7ff fc24 	bl	8007ff4 <STC_GetSpeedSensor>
 80087ac:	f7ff fbc0 	bl	8007f30 <SPD_GetMecAngle>
 80087b0:	ee07 0a90 	vmov	s15, r0
 80087b4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80087c4 <TC_GetCurrentPosition+0x20>
 80087b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 80087bc:	ee27 0a80 	vmul.f32	s0, s15, s0
 80087c0:	bd08      	pop	{r3, pc}
 80087c2:	bf00      	nop
 80087c4:	38c90fdb 	.word	0x38c90fdb

080087c8 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 80087c8:	ed90 0a02 	vldr	s0, [r0, #8]
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop

080087d0 <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 80087d0:	ed90 0a00 	vldr	s0, [r0]
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop

080087d8 <TC_GetAlignmentStatus>:
  * @retval Alignment Status
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 80087d8:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop

080087e0 <TC_IncTick>:
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval none
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80087e0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80087e2:	3301      	adds	r3, #1
 80087e4:	6583      	str	r3, [r0, #88]	; 0x58
}
 80087e6:	4770      	bx	lr

080087e8 <UFCP_Init>:

__weak void UFCP_Init( UFCP_Handle_t * pHandle )
{

  /* Initialize generic component part */
  FCP_Init( & pHandle->_Super );
 80087e8:	f7fe b8c2 	b.w	8006970 <FCP_Init>

080087ec <UFCP_TX_IRQ_Handler>:
 */
__weak void UFCP_TX_IRQ_Handler( UFCP_Handle_t * pHandle )
{
  FCP_Handle_t * pBaseHandle = & pHandle->_Super;

  if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState )
 80087ec:	f890 3097 	ldrb.w	r3, [r0, #151]	; 0x97
 80087f0:	b16b      	cbz	r3, 800880e <UFCP_TX_IRQ_Handler+0x22>
  {
    uint16_t tx_data;

    switch ( pBaseHandle->TxFrameLevel )
 80087f2:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80087f6:	4602      	mov	r2, r0
 80087f8:	b1a3      	cbz	r3, 8008824 <UFCP_TX_IRQ_Handler+0x38>
 80087fa:	2b01      	cmp	r3, #1
 80087fc:	d108      	bne.n	8008810 <UFCP_TX_IRQ_Handler+0x24>
      case 0:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
        break;

      case 1:
        tx_data = (uint16_t) pBaseHandle->TxFrame.Size;
 80087fe:	7d41      	ldrb	r1, [r0, #21]
          tx_data = (uint16_t) pBaseHandle->TxFrame.FrameCRC;
        }
    } /* end of switch ( pBaseHandle->TxFrameLevel ) */

    /* Send the data byte */
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 8008800:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->TDR = Value;
 8008804:	6281      	str	r1, [r0, #40]	; 0x28

    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
    {
      pBaseHandle->TxFrameLevel++;
 8008806:	3301      	adds	r3, #1
 8008808:	f882 3098 	strb.w	r3, [r2, #152]	; 0x98
 800880c:	4770      	bx	lr
 800880e:	4770      	bx	lr
        if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008810:	7d41      	ldrb	r1, [r0, #21]
 8008812:	3101      	adds	r1, #1
 8008814:	428b      	cmp	r3, r1
 8008816:	dc07      	bgt.n	8008828 <UFCP_TX_IRQ_Handler+0x3c>
          tx_data = (uint16_t) pBaseHandle->TxFrame.Buffer[ pBaseHandle->TxFrameLevel - FCP_HEADER_SIZE ];
 8008818:	18c1      	adds	r1, r0, r3
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800881a:	f8d0 0120 	ldr.w	r0, [r0, #288]	; 0x120
 800881e:	7d09      	ldrb	r1, [r1, #20]
 8008820:	6281      	str	r1, [r0, #40]	; 0x28
    if ( pBaseHandle->TxFrameLevel < pBaseHandle->TxFrame.Size + FCP_HEADER_SIZE )
 8008822:	e7f0      	b.n	8008806 <UFCP_TX_IRQ_Handler+0x1a>
        tx_data = (uint16_t) pBaseHandle->TxFrame.Code;
 8008824:	7d01      	ldrb	r1, [r0, #20]
        break;
 8008826:	e7eb      	b.n	8008800 <UFCP_TX_IRQ_Handler+0x14>
{
 8008828:	b410      	push	{r4}
    LL_USART_TransmitData8(pHandle->USARTx, tx_data);
 800882a:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
 800882e:	f890 3096 	ldrb.w	r3, [r0, #150]	; 0x96
 8008832:	628b      	str	r3, [r1, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8008838:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800883c:	e841 3400 	strex	r4, r3, [r1]
 8008840:	2c00      	cmp	r4, #0
 8008842:	d1f7      	bne.n	8008834 <UFCP_TX_IRQ_Handler+0x48>
    }
    else
    {
      LL_USART_DisableIT_TXE(pHandle->USARTx);
      pBaseHandle->TxFrameState = FCP_TRANSFER_IDLE;
 8008844:	f882 4097 	strb.w	r4, [r2, #151]	; 0x97

      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008848:	e9d2 0300 	ldrd	r0, r3, [r2]
    }

  } /* end of if ( FCP_TRANSFER_IDLE != pBaseHandle->TxFrameState ) */
}
 800884c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pBaseHandle->ClientFrameSentCallback( pBaseHandle->ClientEntity );
 8008850:	4718      	bx	r3
 8008852:	bf00      	nop

08008854 <UFCP_Receive>:

__weak uint8_t UFCP_Receive( FCP_Handle_t * pHandle )
{
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->RxFrameState )
 8008854:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008858:	b973      	cbnz	r3, 8008878 <UFCP_Receive+0x24>
  {
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;

    pHandle->RxFrameLevel = 0;
    pHandle->RxFrameState = FCP_TRANSFER_ONGOING;
 800885a:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800885c:	f8d0 2120 	ldr.w	r2, [r0, #288]	; 0x120
 8008860:	f8a0 311c 	strh.w	r3, [r0, #284]	; 0x11c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	e852 3f00 	ldrex	r3, [r2]
 8008868:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	e842 3100 	strex	r1, r3, [r2]
 8008870:	2900      	cmp	r1, #0
 8008872:	d1f7      	bne.n	8008864 <UFCP_Receive+0x10>

    LL_USART_EnableIT_RXNE(pActualHandle->USARTx);
    ret_val = FCP_STATUS_WAITING_TRANSFER;
 8008874:	2002      	movs	r0, #2
 8008876:	4770      	bx	lr
  }
  else
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008878:	2001      	movs	r0, #1
  }

  return ret_val;
}
 800887a:	4770      	bx	lr

0800887c <UFCP_Send>:

__weak uint8_t UFCP_Send( FCP_Handle_t * pHandle, uint8_t code, uint8_t *buffer, uint8_t size)
{
 800887c:	b570      	push	{r4, r5, r6, lr}
 800887e:	4604      	mov	r4, r0
  uint8_t ret_val;

  if ( FCP_TRANSFER_IDLE == pHandle->TxFrameState )
 8008880:	f890 0097 	ldrb.w	r0, [r0, #151]	; 0x97
 8008884:	2800      	cmp	r0, #0
 8008886:	d147      	bne.n	8008918 <UFCP_Send+0x9c>
    UFCP_Handle_t * pActualHandle = (UFCP_Handle_t *) pHandle;
    uint8_t *dest = pHandle->TxFrame.Buffer;

    pHandle->TxFrame.Code = code;
    pHandle->TxFrame.Size = size;
    while ( size-- ) *dest++ = *buffer++;
 8008888:	1e58      	subs	r0, r3, #1
    uint8_t *dest = pHandle->TxFrame.Buffer;
 800888a:	f104 0616 	add.w	r6, r4, #22
    pHandle->TxFrame.Code = code;
 800888e:	7521      	strb	r1, [r4, #20]
    pHandle->TxFrame.Size = size;
 8008890:	7563      	strb	r3, [r4, #21]
    while ( size-- ) *dest++ = *buffer++;
 8008892:	b2c0      	uxtb	r0, r0
 8008894:	b343      	cbz	r3, 80088e8 <UFCP_Send+0x6c>
 8008896:	1c51      	adds	r1, r2, #1
 8008898:	1a75      	subs	r5, r6, r1
 800889a:	2d02      	cmp	r5, #2
 800889c:	d93e      	bls.n	800891c <UFCP_Send+0xa0>
 800889e:	2807      	cmp	r0, #7
 80088a0:	d93c      	bls.n	800891c <UFCP_Send+0xa0>
 80088a2:	089d      	lsrs	r5, r3, #2
 80088a4:	3d01      	subs	r5, #1
 80088a6:	b2e9      	uxtb	r1, r5
 80088a8:	1d15      	adds	r5, r2, #4
 80088aa:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80088ae:	46b4      	mov	ip, r6
 80088b0:	4611      	mov	r1, r2
 80088b2:	f851 eb04 	ldr.w	lr, [r1], #4
 80088b6:	f84c eb04 	str.w	lr, [ip], #4
 80088ba:	42a9      	cmp	r1, r5
 80088bc:	d1f9      	bne.n	80088b2 <UFCP_Send+0x36>
 80088be:	f003 01fc 	and.w	r1, r3, #252	; 0xfc
 80088c2:	1a40      	subs	r0, r0, r1
 80088c4:	428b      	cmp	r3, r1
 80088c6:	b2c0      	uxtb	r0, r0
 80088c8:	eb02 0c01 	add.w	ip, r2, r1
 80088cc:	eb06 0501 	add.w	r5, r6, r1
 80088d0:	d00a      	beq.n	80088e8 <UFCP_Send+0x6c>
 80088d2:	5c53      	ldrb	r3, [r2, r1]
 80088d4:	5473      	strb	r3, [r6, r1]
 80088d6:	b138      	cbz	r0, 80088e8 <UFCP_Send+0x6c>
 80088d8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 80088dc:	706b      	strb	r3, [r5, #1]
 80088de:	2801      	cmp	r0, #1
 80088e0:	d002      	beq.n	80088e8 <UFCP_Send+0x6c>
 80088e2:	f89c 3002 	ldrb.w	r3, [ip, #2]
 80088e6:	70ab      	strb	r3, [r5, #2]
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80088e8:	f104 0014 	add.w	r0, r4, #20
 80088ec:	f7fe f854 	bl	8006998 <FCP_CalcCRC>

    pHandle->TxFrameLevel = 0;
 80088f0:	2100      	movs	r1, #0
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 80088f2:	2301      	movs	r3, #1
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 80088f4:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    pHandle->TxFrame.FrameCRC = FCP_CalcCRC( & pHandle->TxFrame );
 80088f8:	f884 0096 	strb.w	r0, [r4, #150]	; 0x96
    pHandle->TxFrameLevel = 0;
 80088fc:	f884 1098 	strb.w	r1, [r4, #152]	; 0x98
    pHandle->TxFrameState = FCP_TRANSFER_ONGOING;
 8008900:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008904:	e852 3f00 	ldrex	r3, [r2]
 8008908:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890c:	e842 3100 	strex	r1, r3, [r2]
 8008910:	2900      	cmp	r1, #0
 8008912:	d1f7      	bne.n	8008904 <UFCP_Send+0x88>
 8008914:	2002      	movs	r0, #2
  {
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
  }

  return ret_val;
}
 8008916:	bd70      	pop	{r4, r5, r6, pc}
    ret_val = FCP_STATUS_TRANSFER_ONGOING;
 8008918:	2001      	movs	r0, #1
}
 800891a:	bd70      	pop	{r4, r5, r6, pc}
 800891c:	f104 0015 	add.w	r0, r4, #21
 8008920:	4413      	add	r3, r2
 8008922:	e000      	b.n	8008926 <UFCP_Send+0xaa>
 8008924:	3101      	adds	r1, #1
    while ( size-- ) *dest++ = *buffer++;
 8008926:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 800892a:	f800 2f01 	strb.w	r2, [r0, #1]!
 800892e:	4299      	cmp	r1, r3
 8008930:	d1f8      	bne.n	8008924 <UFCP_Send+0xa8>
 8008932:	e7d9      	b.n	80088e8 <UFCP_Send+0x6c>

08008934 <UFCP_RX_IRQ_Handler>:
  if ( FCP_TRANSFER_IDLE != pBaseHandle->RxFrameState )
 8008934:	f890 311c 	ldrb.w	r3, [r0, #284]	; 0x11c
 8008938:	b90b      	cbnz	r3, 800893e <UFCP_RX_IRQ_Handler+0xa>
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800893a:	4830      	ldr	r0, [pc, #192]	; (80089fc <UFCP_RX_IRQ_Handler+0xc8>)
}
 800893c:	4770      	bx	lr
{
 800893e:	b530      	push	{r4, r5, lr}
    switch ( pBaseHandle->RxFrameLevel )
 8008940:	f890 311d 	ldrb.w	r3, [r0, #285]	; 0x11d
{
 8008944:	b083      	sub	sp, #12
 8008946:	4604      	mov	r4, r0
    uint8_t rx_byte = (uint8_t) rx_data;
 8008948:	b2ca      	uxtb	r2, r1
    switch ( pBaseHandle->RxFrameLevel )
 800894a:	b393      	cbz	r3, 80089b2 <UFCP_RX_IRQ_Handler+0x7e>
 800894c:	2b01      	cmp	r3, #1
 800894e:	d03a      	beq.n	80089c6 <UFCP_RX_IRQ_Handler+0x92>
        if ( pBaseHandle->RxFrameLevel < pBaseHandle->RxFrame.Size + FCP_HEADER_SIZE )
 8008950:	f890 109a 	ldrb.w	r1, [r0, #154]	; 0x9a
 8008954:	3101      	adds	r1, #1
 8008956:	428b      	cmp	r3, r1
 8008958:	dc08      	bgt.n	800896c <UFCP_RX_IRQ_Handler+0x38>
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 800895a:	18c1      	adds	r1, r0, r3
          pBaseHandle->RxFrameLevel++;
 800895c:	3301      	adds	r3, #1
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 800895e:	4827      	ldr	r0, [pc, #156]	; (80089fc <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrame.Buffer[pBaseHandle->RxFrameLevel - FCP_HEADER_SIZE] = rx_byte;
 8008960:	f881 2099 	strb.w	r2, [r1, #153]	; 0x99
          pBaseHandle->RxFrameLevel++;
 8008964:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 8008968:	b003      	add	sp, #12
 800896a:	bd30      	pop	{r4, r5, pc}
          pBaseHandle->RxTimeoutCountdown = 0;
 800896c:	2300      	movs	r3, #0
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800896e:	f8d0 1120 	ldr.w	r1, [r0, #288]	; 0x120
          pBaseHandle->RxFrame.FrameCRC = rx_byte;
 8008972:	f880 211b 	strb.w	r2, [r0, #283]	; 0x11b
          pBaseHandle->RxTimeoutCountdown = 0;
 8008976:	8243      	strh	r3, [r0, #18]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008978:	e851 3f00 	ldrex	r3, [r1]
 800897c:	f023 0320 	bic.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008980:	e841 3200 	strex	r2, r3, [r1]
 8008984:	2a00      	cmp	r2, #0
 8008986:	d1f7      	bne.n	8008978 <UFCP_RX_IRQ_Handler+0x44>
          pBaseHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008988:	f884 211c 	strb.w	r2, [r4, #284]	; 0x11c
          if ( FCP_CalcCRC( & pBaseHandle->RxFrame ) == pBaseHandle->RxFrame.FrameCRC )
 800898c:	f104 0099 	add.w	r0, r4, #153	; 0x99
 8008990:	f7fe f802 	bl	8006998 <FCP_CalcCRC>
 8008994:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 8008998:	4283      	cmp	r3, r0
 800899a:	d122      	bne.n	80089e2 <UFCP_RX_IRQ_Handler+0xae>
            pBaseHandle->ClientFrameReceivedCallback( pBaseHandle->ClientEntity,
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	68a5      	ldr	r5, [r4, #8]
 80089a0:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80089a4:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
 80089a8:	f104 029b 	add.w	r2, r4, #155	; 0x9b
 80089ac:	47a8      	blx	r5
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80089ae:	4814      	ldr	r0, [pc, #80]	; (8008a00 <UFCP_RX_IRQ_Handler+0xcc>)
 80089b0:	e7da      	b.n	8008968 <UFCP_RX_IRQ_Handler+0x34>
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80089b2:	8a01      	ldrh	r1, [r0, #16]
        ret_val = (void *) & UFCP_Usart_Timeout_start;
 80089b4:	4813      	ldr	r0, [pc, #76]	; (8008a04 <UFCP_RX_IRQ_Handler+0xd0>)
        pBaseHandle->RxFrame.Code = rx_byte;
 80089b6:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
        pBaseHandle->RxFrameLevel++;
 80089ba:	2301      	movs	r3, #1
        pBaseHandle->RxTimeoutCountdown = pBaseHandle->RxTimeout;
 80089bc:	8261      	strh	r1, [r4, #18]
        pBaseHandle->RxFrameLevel++;
 80089be:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
}
 80089c2:	b003      	add	sp, #12
 80089c4:	bd30      	pop	{r4, r5, pc}
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089c6:	060b      	lsls	r3, r1, #24
        pBaseHandle->RxFrame.Size = rx_byte;
 80089c8:	f880 209a 	strb.w	r2, [r0, #154]	; 0x9a
        if ( pBaseHandle->RxFrame.Size >= FCP_MAX_PAYLOAD_SIZE)
 80089cc:	d404      	bmi.n	80089d8 <UFCP_RX_IRQ_Handler+0xa4>
        pBaseHandle->RxFrameLevel++;
 80089ce:	2302      	movs	r3, #2
 80089d0:	f880 311d 	strb.w	r3, [r0, #285]	; 0x11d
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80089d4:	4809      	ldr	r0, [pc, #36]	; (80089fc <UFCP_RX_IRQ_Handler+0xc8>)
 80089d6:	e7c7      	b.n	8008968 <UFCP_RX_IRQ_Handler+0x34>
          pBaseHandle->RxFrameLevel =0 ;
 80089d8:	2300      	movs	r3, #0
  void * ret_val = (void *) & UFCP_Usart_Timeout_none;
 80089da:	4808      	ldr	r0, [pc, #32]	; (80089fc <UFCP_RX_IRQ_Handler+0xc8>)
          pBaseHandle->RxFrameLevel =0 ;
 80089dc:	f884 311d 	strb.w	r3, [r4, #285]	; 0x11d
 80089e0:	e7c2      	b.n	8008968 <UFCP_RX_IRQ_Handler+0x34>
            error_code = FCP_MSG_RX_BAD_CRC;
 80089e2:	250a      	movs	r5, #10
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089e4:	2301      	movs	r3, #1
 80089e6:	f10d 0207 	add.w	r2, sp, #7
 80089ea:	21ff      	movs	r1, #255	; 0xff
 80089ec:	4620      	mov	r0, r4
            error_code = FCP_MSG_RX_BAD_CRC;
 80089ee:	f88d 5007 	strb.w	r5, [sp, #7]
            (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 80089f2:	f7ff ff43 	bl	800887c <UFCP_Send>
          ret_val = (void *) & UFCP_Usart_Timeout_stop;
 80089f6:	4802      	ldr	r0, [pc, #8]	; (8008a00 <UFCP_RX_IRQ_Handler+0xcc>)
  return ret_val;
 80089f8:	e7b6      	b.n	8008968 <UFCP_RX_IRQ_Handler+0x34>
 80089fa:	bf00      	nop
 80089fc:	08008d8c 	.word	0x08008d8c
 8008a00:	08008d90 	.word	0x08008d90
 8008a04:	08008d8e 	.word	0x08008d8e

08008a08 <UFCP_OVR_IRQ_Handler>:
{
 8008a08:	b500      	push	{lr}
 8008a0a:	b083      	sub	sp, #12
  error_code = UFCP_MSG_OVERRUN;
 8008a0c:	f04f 0c08 	mov.w	ip, #8
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a10:	2301      	movs	r3, #1
 8008a12:	f10d 0207 	add.w	r2, sp, #7
 8008a16:	21ff      	movs	r1, #255	; 0xff
  error_code = UFCP_MSG_OVERRUN;
 8008a18:	f88d c007 	strb.w	ip, [sp, #7]
  (void) UFCP_Send( pBaseHandle, FCP_CODE_NACK, & error_code, 1 );
 8008a1c:	f7ff ff2e 	bl	800887c <UFCP_Send>
}
 8008a20:	b003      	add	sp, #12
 8008a22:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a26:	bf00      	nop

08008a28 <UFCP_AbortReceive>:

__weak void UFCP_AbortReceive( FCP_Handle_t * pHandle )
{
  pHandle->RxFrameState = FCP_TRANSFER_IDLE;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	f880 311c 	strb.w	r3, [r0, #284]	; 0x11c
}
 8008a2e:	4770      	bx	lr

08008a30 <VSS_Clear>:
* @retval none
*/
__weak void VSS_Clear( VirtualSpeedSensor_Handle_t * pHandle )
{

  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008a30:	2300      	movs	r3, #0
  pHandle->hRemainingStep = 0u;
  pHandle->hElAngleAccu = 0;

  pHandle->bTransitionStarted = false;
  pHandle->bTransitionEnded = false;
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008a32:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
  pHandle->_Super.bSpeedErrorNumber = 0u;
 8008a34:	7003      	strb	r3, [r0, #0]
  pHandle->wElSpeedDpp32 = 0;
 8008a36:	e9c0 3308 	strd	r3, r3, [r0, #32]
  pHandle->_Super.hElAngle = 0;
 8008a3a:	6043      	str	r3, [r0, #4]
  pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008a3c:	60c3      	str	r3, [r0, #12]
  pHandle->_Super.hMecAccelUnitP = 0;
 8008a3e:	8243      	strh	r3, [r0, #18]
  pHandle->hRemainingStep = 0u;
 8008a40:	8503      	strh	r3, [r0, #40]	; 0x28
  pHandle->bTransitionStarted = false;
 8008a42:	8583      	strh	r3, [r0, #44]	; 0x2c
  pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008a44:	85c2      	strh	r2, [r0, #46]	; 0x2e
  pHandle->hElAngleAccu = 0;
 8008a46:	6303      	str	r3, [r0, #48]	; 0x30
  /* (Fast division optimization for cortex-M0 micros)*/
  /* Dummy division to speed up next executions */
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->_Super.bElToMecRatio ) );
  FD_FastDiv( &( pHandle->fd ), 1, ( int32_t )( pHandle->hTransitionSteps ) );
#endif
}
 8008a48:	4770      	bx	lr
 8008a4a:	bf00      	nop

08008a4c <VSS_Init>:
{
 8008a4c:	b508      	push	{r3, lr}
  VSS_Clear( pHandle );
 8008a4e:	f7ff ffef 	bl	8008a30 <VSS_Clear>
}
 8008a52:	bd08      	pop	{r3, pc}

08008a54 <VSS_SetMecAngle>:
  */
__weak void VSS_SetMecAngle( VirtualSpeedSensor_Handle_t * pHandle, int16_t hMecAngle )
{

  pHandle->hElAngleAccu = hMecAngle;
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a54:	7843      	ldrb	r3, [r0, #1]
  pHandle->hElAngleAccu = hMecAngle;
 8008a56:	8601      	strh	r1, [r0, #48]	; 0x30
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a58:	fb91 f3f3 	sdiv	r3, r1, r3
  pHandle->_Super.hElAngle = hMecAngle;
 8008a5c:	8081      	strh	r1, [r0, #4]
  pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a5e:	80c3      	strh	r3, [r0, #6]
}
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop

08008a64 <VSS_SetMecAcceleration>:
  uint16_t hNbrStep;
  int16_t hCurrentMecSpeedDpp;
  int32_t wMecAccDppP32;
  int16_t hFinalMecSpeedDpp;

  if ( pHandle->bTransitionStarted == false )
 8008a64:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8008a68:	b99b      	cbnz	r3, 8008a92 <VSS_SetMecAcceleration+0x2e>
{
 8008a6a:	b510      	push	{r4, lr}
  {
    if ( hDurationms == 0u )
 8008a6c:	b992      	cbnz	r2, 8008a94 <VSS_SetMecAcceleration+0x30>
    {
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a6e:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008a70:	69c4      	ldr	r4, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008a72:	8181      	strh	r1, [r0, #12]
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a74:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = ( int16_t )( ( ( int32_t )( hFinalMecSpeedUnit ) *
 8008a78:	fb04 fc01 	mul.w	ip, r4, r1
                                    ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008a7c:	005b      	lsls	r3, r3, #1
                                    ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008a7e:	fb9c f3f3 	sdiv	r3, ip, r3

      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a82:	f890 c001 	ldrb.w	ip, [r0, #1]

      pHandle->hRemainingStep = 0u;
 8008a86:	8502      	strh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hElSpeedDpp *= ( int16_t )( pHandle->_Super.bElToMecRatio );
 8008a88:	fb1c f303 	smulbb	r3, ip, r3
 8008a8c:	81c3      	strh	r3, [r0, #14]

      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008a8e:	8541      	strh	r1, [r0, #42]	; 0x2a
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
    }
  }
}
 8008a90:	bd10      	pop	{r4, pc}
 8008a92:	4770      	bx	lr
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008a94:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008a96:	4c12      	ldr	r4, [pc, #72]	; (8008ae0 <VSS_SetMecAcceleration+0x7c>)
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008a98:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
                            ( int16_t )pHandle->_Super.bElToMecRatio;
 8008a9c:	f890 c001 	ldrb.w	ip, [r0, #1]
      pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008aa0:	8541      	strh	r1, [r0, #42]	; 0x2a
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008aa2:	fb03 f202 	mul.w	r2, r3, r2
                                 ( uint32_t )pHandle->hSpeedSamplingFreqHz ) /
 8008aa6:	fba4 2302 	umull	r2, r3, r4, r2
      hNbrStep = ( uint16_t )( ( ( uint32_t )hDurationms *
 8008aaa:	f3c3 138f 	ubfx	r3, r3, #6, #16
      hNbrStep++;
 8008aae:	3301      	adds	r3, #1
 8008ab0:	b29a      	uxth	r2, r3
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ab2:	8b43      	ldrh	r3, [r0, #26]
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008ab4:	69c4      	ldr	r4, [r0, #28]
      pHandle->hRemainingStep = hNbrStep;
 8008ab6:	8502      	strh	r2, [r0, #40]	; 0x28
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008abc:	fb04 f101 	mul.w	r1, r4, r1
                                       ( ( int32_t )SPEED_UNIT * ( int32_t )pHandle->_Super.hMeasurementFrequency ) );
 8008ac0:	005b      	lsls	r3, r3, #1
      hFinalMecSpeedDpp = ( int16_t )( ( ( int32_t )hFinalMecSpeedUnit * ( int32_t )( pHandle->_Super.DPPConvFactor) ) /
 8008ac2:	fb91 f3f3 	sdiv	r3, r1, r3
      hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp /
 8008ac6:	fb9e f1fc 	sdiv	r1, lr, ip
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008aca:	1a5b      	subs	r3, r3, r1
 8008acc:	041b      	lsls	r3, r3, #16
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008ace:	ea4f 410e 	mov.w	r1, lr, lsl #16
      wMecAccDppP32 = ( ( ( int32_t )hFinalMecSpeedDpp - ( int32_t )hCurrentMecSpeedDpp ) *
 8008ad2:	fb93 f3f2 	sdiv	r3, r3, r2
      pHandle->wElAccDppP32 = wMecAccDppP32 * ( int16_t )pHandle->_Super.bElToMecRatio;
 8008ad6:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->wElSpeedDpp32 = ( int32_t )pHandle->_Super.hElSpeedDpp * ( int32_t )65536;
 8008ada:	e9c0 3108 	strd	r3, r1, [r0, #32]
}
 8008ade:	bd10      	pop	{r4, pc}
 8008ae0:	10624dd3 	.word	0x10624dd3

08008ae4 <__libc_init_array>:
 8008ae4:	b570      	push	{r4, r5, r6, lr}
 8008ae6:	4d0d      	ldr	r5, [pc, #52]	; (8008b1c <__libc_init_array+0x38>)
 8008ae8:	4c0d      	ldr	r4, [pc, #52]	; (8008b20 <__libc_init_array+0x3c>)
 8008aea:	1b64      	subs	r4, r4, r5
 8008aec:	10a4      	asrs	r4, r4, #2
 8008aee:	2600      	movs	r6, #0
 8008af0:	42a6      	cmp	r6, r4
 8008af2:	d109      	bne.n	8008b08 <__libc_init_array+0x24>
 8008af4:	4d0b      	ldr	r5, [pc, #44]	; (8008b24 <__libc_init_array+0x40>)
 8008af6:	4c0c      	ldr	r4, [pc, #48]	; (8008b28 <__libc_init_array+0x44>)
 8008af8:	f000 f820 	bl	8008b3c <_init>
 8008afc:	1b64      	subs	r4, r4, r5
 8008afe:	10a4      	asrs	r4, r4, #2
 8008b00:	2600      	movs	r6, #0
 8008b02:	42a6      	cmp	r6, r4
 8008b04:	d105      	bne.n	8008b12 <__libc_init_array+0x2e>
 8008b06:	bd70      	pop	{r4, r5, r6, pc}
 8008b08:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b0c:	4798      	blx	r3
 8008b0e:	3601      	adds	r6, #1
 8008b10:	e7ee      	b.n	8008af0 <__libc_init_array+0xc>
 8008b12:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b16:	4798      	blx	r3
 8008b18:	3601      	adds	r6, #1
 8008b1a:	e7f2      	b.n	8008b02 <__libc_init_array+0x1e>
 8008b1c:	08008d9c 	.word	0x08008d9c
 8008b20:	08008d9c 	.word	0x08008d9c
 8008b24:	08008d9c 	.word	0x08008d9c
 8008b28:	08008da0 	.word	0x08008da0

08008b2c <memset>:
 8008b2c:	4402      	add	r2, r0
 8008b2e:	4603      	mov	r3, r0
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d100      	bne.n	8008b36 <memset+0xa>
 8008b34:	4770      	bx	lr
 8008b36:	f803 1b01 	strb.w	r1, [r3], #1
 8008b3a:	e7f9      	b.n	8008b30 <memset+0x4>

08008b3c <_init>:
 8008b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b3e:	bf00      	nop
 8008b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b42:	bc08      	pop	{r3}
 8008b44:	469e      	mov	lr, r3
 8008b46:	4770      	bx	lr

08008b48 <_fini>:
 8008b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b4a:	bf00      	nop
 8008b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b4e:	bc08      	pop	{r3}
 8008b50:	469e      	mov	lr, r3
 8008b52:	4770      	bx	lr
